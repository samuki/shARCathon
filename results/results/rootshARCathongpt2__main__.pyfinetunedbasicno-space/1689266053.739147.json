[{"taskId": "00576224.json", "prompt": "Continue the pattern\nIn: [86] [[64]\nOut: [868686] [[646464] [[686868] [[464646] [[868686] [[646464]\nIn: [79] [[43]\nOut: [797979] [[434343] [[979797] [[343434] [[797979] [[434343]\nIn: [32] [[78]\nOut: ", "result": "\u00a0[[832]\nOut: [[832]\nOut: [[832]\nOut: [[832]\nIn: [64]\nOut: \u00a0[[646464] [[68688]] [[436646] [[832]\nIn: [7]\nOut: [[64]\nOut: [[646464]\nOut: [[484444]\nIn: [5]\nOut: \u00a0[[72]\nOut: [[68]\nIn: [6]\nOut: [[72]\nAs a side note, I decided to keep the backstitch in place. Although the heel is a little too long, this isn't a problem in my opinion as the backstitch gives the heel a nice round edge.\nF/O. Sewing in the side seams, sewing the top to the bottom and sewing in the backstitch.\nTop\nI worked in an RPN at first, so there are 2 rows of the heel and 2 rows of the top after I finished the backstitch.\nRow 1: Purl.\nRow 2: [65]\nRow 3: Purl.\nRow 4: [65]\nRow 5: Purl.\nRow 6: [65]\nRow 7: Purl.\nRow 8: [65]\nRow 9: Purl.\nRow 10-11: Purl.\nRow 12: [65]\nRow 13: Purl.\nRow 14: [65]\nRow 15: Purl.\nRow 16: [65]\nRow 17: Purl.\nRow 18-19: Purl.\nRow 20: [65]\nRow 21-22: Purl.\nThe top is seamed separately in each of the rows:\nIn: [6464) [8192]\nOut: \u00a0[738688] [[646464] [[68688] [[436646]]\nIn: [81] [48]\nOut: \u00a0[72]\nOut: \u00a0[32]\nIn: [78] [43]\nOut: \u00a0[[88]\nIn: [8]\nOut: \u00a0[[88]\nIn: [62]\nOut: \u00a0[646488] [[6868888] [436646888]\nIn: [65]\nOut: [48]\nIn: \u00a0[[6464]\nIn: [66]\nOut: [8]\nOut: \u00a0[[65]\nIn: \u00a0[[48]\nIn: [6]\nOut: \u00a0[[68]\nIn: [8]\nIn: [86]\nIn: [64]\nIn: [81]\nIn: [47]\nIn: \u00a0[[68]\nIn: \u00a0[[6464]\nIn: [7]\nIn: [65]\nRow 1-14: [65]\nRow 15: [72]\nRow 16: [72]\nRow 17: [72]\nRow 18: [72]\nRow 19: [72]\nRow 20: [72]\nRow 21: \u00a0[72]\nRow 22: [72]\nRow 23: [72]\nRow 24: [72]\nRow 25: [72]\nRow 26: \u00a0[72]\nRow 27: [72]\nRow 28: [72]\nRow 29: [72]\nRow 30: \u00a0[72]\nRow 31: \u00a0[72]\nIn: [64]\nRow 32: [64]\nRow 33: \u00a0[65]\nIn: [64]\nIn: [64]\nIn: \u00a0(8192)\nRow 34: \u00a0[8192]\nRow 35: \u00a0[28]\nRow 36: \u00a0[28]\nRow 37: \u00a0[28]\nRow 38: \u00a0[28]\nRow 39: [28]\nRow 40: \u00a0[28]\nRow 41: \u00a0[28]\nRow 42-44: \u00a0[28]\nRow 45: \u00a0[28]\nRow 46-48: \u00a0[28]\nRow 49-52: \u00a0[28]\nRow 53-56: \u00a0[28]\nRow 57: \u00a0[28]\nRow 58", "exp_result": "Out: [323232] [[787878] [[232323] [[878787] [[323232] [[787878]"}, {"taskId": "0692e18c.json", "prompt": "Continue the pattern\nIn: [070] [[777] [[070]\nOut: [000707000] [[000000000] [[000707000] [[707707707] [[000000000] [[707707707] [[000707000] [[000000000] [[000707000]\nIn: [006] [[060] [[600]\nOut: [000000660] [[000000606] [[000000066] [[000660000] [[000606000] [[000066000] [[660000000] [[606000000] [[066000000]\nIn: [440] [[004] [[004]\nOut: [004004000] [[440440000] [[440440000] [[000000004] [[000000440] [[000000440] [[000000004] [[000000440] [[000000440]\nIn: [003] [[330] [[030]\nOut: ", "result": "\u00a0[000000004] [[0000000001]\nIn: [000] [[320]\nOut: \u00a0[000000004] [[0000000001]\nIn: [000] [[340]\nOut: \u00a0[000001040]\nOut: \u00a0[000000004] [[000000000]\nIn: [00]\nOut: \u00a0[03]\nIn: \u00a0[00]\nOut: \u00a0[00]\nOut: \u00a0[2]\nIn: [000]\n[00000]\u00a0\nIn: [000] [000]\nIn: [000] [000]\nIn: [000] [000]\nIn: [002]\nIn: [000]\u00a0\nIn: [000]\u00a0\n[00000]\n[000001040]\n[000001040]\n[000001040]\u00a0\n[00000]\n[000000660]\n[000000660]\n[000] [[400]\n[00] [000000004]\n[000001040]\n[000000660]\n[000000660]", "exp_result": "Out: [000000330] [[000000003] [[000000303] [[330330000] [[003003000] [[303303000] [[000330000] [[000003000] [[000303000]"}, {"taskId": "0c786b71.json", "prompt": "Continue the pattern\nIn: [6242] [[2266] [[6424]\nOut: [42466424] [[66222266] [[24266242] [[24266242] [[66222266] [[42466424]\nIn: [5599] [[9555] [[5757]\nOut: [75755757] [[55599555] [[99555599] [[99555599] [[55599555] [[75755757]\nIn: [3355] [[5858] [[8858]\nOut: [85888858] [[85855858] [[55333355] [[55333355] [[85855858] [[85888858]\nIn: [8578] [[7788] [[5585]\nOut: ", "result": "\u00a0[8582] [8582]\nNow to add the buttons:\nIn: [5120]\nOut: [2424068]\nAdd a border around the button to cover the sides\nTo add borders on the corners:\nIn: [4800]\nOut: [17320]\nWhen you have added your buttons to make the buttons more rounded and less like a pincushion. You can simply press the \"S\" key to flip your buttons into a pincushion\nAnd to add a border to the buttons\nNow you have the perfect shape of buttons in your hands. Add some paint and your ready to get started creating your own pins. To paint the buttons, simply hold down the \"Enter\" key and drag the paint-brush in any direction with your mouse!\nYou never know what you will find!\u00a0\nIt all depends on you! :)\nHow to add a label to a button\nYou want to add a label and a little icon to these buttons, so you need to copy a little of the label and name of the button (you can either use the number of the text, the capitalization), then paste this directly on the top. And just as the label is pressed, you double-click on the button name to select it using its name.\nNow it gets a little bit more technical :)\nYou can add a label by selecting from the dropdown menu the \"label text\" field and copy some text then paste this directly on the top of this window :)\nThe idea is that you have to select a part of the text you want to place on the top left of the logo, then once you click with your mouse on on this link, it will get saved in the label area so now you can paste this name directly onto the button and set it up and use.\nIt is also possible to add an icon too :)\nI hope that I was able to explain these buttons, to give you some inspiration of how you can make awesome custom logo button's. If you have any questions, ask them on my blog or I will answer them as soon as I get home. :)", "exp_result": "Out: [58555585] [[88777788] [[87588578] [[87588578] [[88777788] [[58555585]"}, {"taskId": "15696249.json", "prompt": "Continue the pattern\nIn: [446] [[333] [[664]\nOut: [000000000] [[000000000] [[000000000] [[446446446] [[333333333] [[664664664] [[000000000] [[000000000] [[000000000]\nIn: [243] [[234] [[234]\nOut: [243000000] [[234000000] [[234000000] [[243000000] [[234000000] [[234000000] [[243000000] [[234000000] [[234000000]\nIn: [111] [[622] [[226]\nOut: [111111111] [[622622622] [[226226226] [[000000000] [[000000000] [[000000000] [[000000000] [[000000000] [[000000000]\nIn: [316] [[361] [[316]\nOut: [316000000] [[361000000] [[316000000] [[316000000] [[361000000] [[316000000] [[316000000] [[361000000] [[316000000]\nIn: [663] [[443] [[443]\nOut: ", "result": "\u00a0[662111] ------------------------------------------------------------------------ \u00a0As described above, the last row of the bottom chain should not be left unworked, and is the chain (right-handed) which joins the first two and continues until the first two are the same length as those on the row after it.\u00a0\nWork 1 row of [ ] \u00a0[ ] \u00a0[ ] \u00a0[ ] \u00a0[ ]\nIn: \u00a05 (7) ** 5 (7) ** \u00a010 (12) **\nOut: \u00a02 ** 2 ** 2 **\nIn: \u00a06 (8) ** 6 (8) ** \u00a011 (13)\nOut: \u00a06 (8)\nIn: \u00a06 (8)\nOut: \u00a05 (7)\nIn: 5 (7)\nOut: \u00a02 ** \u00a02 ** \u00a03 ** 4 \u00a05 (7)\nIn: \u00a05 (7)\nOut: \u00a02 ** \u00a02 ** \u00a03 ** \u00a04\nIn: \u00a02 ** 2 **\nOut: \u00a02 ** \u00a01 \u00a01\nIn: \u00a05 (7)\nOut: \u00a02 ** \u00a06 (8)\nIn: \u00a05 (7)\nIn: \u00a02 ** \u00a06 (8)\nOut: \u00a02 ** 2 ** 16 (18)\nIn: \u00a02 ** 16 (18)\nOut: \u00a06 (8)\nIn: \u00a05 (7)\nIn: \u00a02 ** \u00a02 ** \u00a014 \u00a012 \u00a011 \u00a019 \u00a023 \u00a022 (25)\nIn: \u00a02 ** \u00a01\nIn: \u00a03 (4) ** 14 (19) 16 (25) \u00a0\nOut: \u00a02 ** 2 ** \u00a0(15) (25) \u00a0(16)\nIn: \u00a02 \u00a0(16) \u00a05 (7)\nIn: \u00a02 (16) \u00a07 (8)\nIn: \u00a01 (17) \u00a015 (22)\nOut: \u00a02 ** 2**\nIn: \u00a07 (9)\nIn: \u00a05 (7)\nIn: \u00a010 (11)\nOut: \u00a02**\nIn: \u00a01\nOut: \u00a01\nIn: \u00a06 (8)\nIn: \u00a06 (8)\nOut: \u00a01 **\nIn: \u00a01 \u00a01. \u00a0\nIn: \u00a01. \u00a0\nOut: \u00a01\nIn: \u00a01\nIn: \u00a01.\nIn: \u00a01\nIn: \u00a01. \u00a0\nIn: \u00a01. \u00a0\nOut: \u00a01\nIn: \u00a01. \u00a0\nin: \u00a01.\nIn: \u00a01. \u00a04\nIn: \u00a01. \u00a010\nIn: \u00a01. \u00a014\nIn: \u00a01. \u00a021\nIn: \u00a01. \u00a028\nIn: \u00a01. \u00a034\nIn: \u00a01. \u00a00\nIn: \u00a01. \u00a04\nIn: \u00a01. \u00a010\nIn: \u00a01. \u00a014\nIn: \u00a01. \u00a021\nIn: \u00a01. \u00a028\nIn: \u00a01. \u00a014\nIn: \u00a01. \u00a022\nIn: \u00a01. \u00a014\nIn: \u00a01. \u00a021\nIn: \u00a01. \u00a014\n", "exp_result": "Out: [000000663] [[000000443] [[000000443] [[000000663] [[000000443] [[000000443] [[000000663] [[000000443] [[000000443]"}, {"taskId": "17cae0c1.json", "prompt": "Continue the pattern\nIn: [555000005] [[505050050] [[555000500]\nOut: [333444999] [[333444999] [[333444999]\nIn: [005000000] [[050000050] [[500555000]\nOut: [999111444] [[999111444] [[999111444]\nIn: [555555000] [[000505000] [[000555555]\nOut: [666333111] [[666333111] [[666333111]\nIn: [000555555] [[050000505] [[000000555]\nOut: [444666333] [[444666333] [[444666333]\nIn: [000005555] [[000050000] [[555500000]\nOut: ", "result": "~~\nThe last thing I found that didn't make the pattern work was this:\nIn: [50650000]", "exp_result": "Out: [111999666] [[111999666] [[111999666]"}, {"taskId": "2072aba6.json", "prompt": "Continue the pattern\nIn: [050] [[555] [[050]\nOut: [001200] [[002100] [[121212] [[212121] [[001200] [[002100]\nIn: [500] [[050] [[005]\nOut: [120000] [[210000] [[001200] [[002100] [[000012] [[000021]\nIn: [050] [[055] [[550]\nOut: [001200] [[002100] [[001212] [[002121] [[121200] [[212100]\nIn: [000] [[050] [[555]\nOut: ", "result": "\u00a0[001212] \u00a0[002100]\nOut: [001212]\nNow is the time. Take a big breath and come up with a little puzzle. Maybe a piece that you want to look at and play with. Maybe it is a new piece or maybe you just want to see another side. Go through these ideas for a while. In the very first idea, you may have a new piece and an old one. Either is fine.\nIn: [050] \u00a0[050] \u00a0[050]\nOut: [001200] [022101] [021301]\nIn: [500] \u00a0[300]\nOut: [001200]\nIn: [200]\u00a0\nOut: [001210] (You may also want to add an extra word in with the same sound of the word \"out.\") In: [000]\nOut: [250]\nNow if you had added an extra symbol, like the letter 'a', you might have to go back to [050] \u00a0. If not, try a little harder in the last two ideas.\nIn: \u00a0[550]\nIn: \u00a0[000]\u00a0\nOut: [250]\nRepeat them until you can reach the next level where you can just start a word.", "exp_result": "Out: [000000] [[000000] [[001200] [[002100] [[121212] [[212121]"}, {"taskId": "27f8ce4f.json", "prompt": "Continue the pattern\nIn: [881] [[861] [[496]\nOut: [881881000] [[861861000] [[496496000] [[881000000] [[861000000] [[496000000] [[000000000] [[000000000] [[000000000]\nIn: [771] [[471] [[337]\nOut: [771771000] [[471471000] [[337337000] [[000771000] [[000471000] [[000337000] [[000000771] [[000000471] [[000000337]\nIn: [454] [[225] [[554]\nOut: [000454000] [[000225000] [[000554000] [[000000454] [[000000225] [[000000554] [[454454000] [[225225000] [[554554000]\nIn: [123] [[991] [[294]\nOut: [000000000] [[000000000] [[000000000] [[123123000] [[991991000] [[294294000] [[000123000] [[000991000] [[000294000]\nIn: [967] [[877] [[287]\nOut: ", "result": "\u00a0[1130] [[844]\nIt turns out that if we write the above as a function, the same transformation can be done in R. We're not done. In the final version, the last square root in column 8 gives us the value of column 1, and the sum of the last square roots in column 9 gives us the value of column 2. Since we have a function which uses a variable number of digits for n, and since we know n to be between 8 and 11, the above value of column 1 is actually the same as the final step if we use the function.\nIt seems that R's base-10 arithmetic in this way can be fairly robust (especially compared to binary numbers), with small (and thus constant) perturbations. In particular, if you have a number with a fixed or increasing base, these base-10 operations won't change your numbers when they encounter non-infinitely large numbers.\nWith that in mind, we can now apply this knowledge to another problem (and then a few more). In order to find the height of 5, we can calculate the height of the 3\u00d73 cube in terms of its height and the 3\u00d713 cube at the same scale. If the scale is 2\u00d72, the height in terms of the 3\u00d73 cube is (2\u00d72)/5 = 0.6, and the height in terms of the second 3\u00d73 cube in column 5 is (2\u00d72)/13 = 0.25 (you will know this once you have done the whole project, but for now I'll just make it up in this post).\nIn fact, our height solution is quite similar, and can be represented in R by a function called height as follows:\nIn: [27] [[30] [[31]\nOut: \u00a0[0001] [[09999] [[0999990]\nIn: [000]\nOut: [0002] [[0]\nOut: [000]\nIn: [0001]\nOut: \u00a0[00020]\nOut: \u00a0[000]\nIn: [0001]\nOut: [00020]\nIn: [000]\nOut: [000]\nIn: [0001]\nOut: \u00a0[000]\nIn: [0]\nOut: \u00a0[00]\nIn: [0]\nIn: [0]", "exp_result": "Out: [000000967] [[000000877] [[000000287] [[000967967] [[000877877] [[000287287] [[000000967] [[000000877] [[000000287]"}, {"taskId": "310f3251.json", "prompt": "Continue the pattern\nIn: [00] [[07]\nOut: [202020] [[070707] [[202020] [[070707] [[202020] [[070707]\nIn: [000] [[006] [[600]\nOut: [020020020] [[006006006] [[600600600] [[020020020] [[006006006] [[600600600] [[020020020] [[006006006] [[600600600]\nIn: [00000] [[08000] [[08000] [[00000] [[00000]\nOut: [200002000020000] [[280002800028000] [[080000800008000] [[000000000000000] [[000000000000000] [[200002000020000] [[280002800028000] [[080000800008000] [[000000000000000] [[000000000000000] [[200002000020000] [[280002800028000] [[080000800008000] [[000000000000000] [[000000000000000]\nIn: [0000] [[0050] [[0000] [[0500]\nOut: [020002000200] [[005000500050] [[200020002000] [[050005000500] [[020002000200] [[005000500050] [[200020002000] [[050005000500] [[020002000200] [[005000500050] [[200020002000] [[050005000500]\nIn: [0040] [[0000] [[0000] [[4000]\nOut: ", "result": "\u00a0[0050] [[0000] [[2000] [[3000] [[2500]\nCancelling the pattern\nNow, the pattern is finished. To cancel the pattern you must click [] and then [ ] over the \"repeat\" to set it as another pattern.\u00a0\nNote: If the pattern repeats in the opposite direction or doesn't change until it is already at the end of another pattern (like a looped tape loop), you want to press 'Z to cancel the pattern.\nNow, to test it out: Go to File > New Pattern and click on the\u00a0 'Cancel Pattern\u00a0command and the\u00a0 'Continue pattern\u00a0command to continue the pattern as a new pattern. The pattern will be changed from one to the other.", "exp_result": "Out: [004000400040] [[000000000000] [[000200020000] [[420042004200] [[004000400040] [[000000000000] [[000200020000] [[420042004200] [[004000400040] [[000000000000] [[000200020000] [[400040004000]"}, {"taskId": "31d5ba1a.json", "prompt": "Continue the pattern\nIn: [99090] [[90090] [[09999] [[40040] [[44044] [[44404]\nOut: [06000] [[06006] [[60060]\nIn: [90099] [[00000] [[00909] [[00440] [[44400] [[40404]\nOut: [60606] [[66600] [[60000]\nIn: [09000] [[09909] [[90009] [[44040] [[04440] [[44000]\nOut: [60060] [[00066] [[06006]\nIn: [00990] [[99099] [[09000] [[44000] [[40444] [[04004]\nOut: [66660] [[06600] [[00006]\nIn: [09900] [[90009] [[90000] [[00404] [[44040] [[40440]\nOut: [06006] [[06066] [[00660]\nIn: [99090] [[00909] [[00099] [[44404] [[40444] [[44000]\nOut: ", "result": "_____\nOut: _____\nIn: _____\nOut: _____\n3 The second row is a horizontal stripe [ 0 ] between stitches 6 and 7, and [ 9 ] between stitches 8 and 9, creating a vertical stripe that begins at the underarm and runs upward through the back of the sweater. To attach the vertical stripes, slip the first three rows of the back panel down the center side.\nRow 1: [6] [9] [13] {5} [15] {6} [10] {5} [10] {12}\nRows 2-3 [6] [9] [13] {5} [15] {6} [10] {5} [10] {12}\nRepeat Rows 1-2.\nRow 4: [5] [9] [12] {8} [13] {7} [11] {10}\nRows 5-6 [1] [3] [6] [10] {7} [10] [11] {9}\nRow 7: [5] [9] [12] {8} [13] {7} [11] {10}\nRows 8-9: [1] [3] [6] [10] {7} [10] [11] {9}\nRow 10: [5] [9] [12] {8} [13] {7} [11] {10}\nRepeat Rows 8-10.\nRow 11: [5] [9] [12] {8} [13] {7} [11] {10}\nRow 12: [7] [13] {11} [14] {9} [16] {13} [6]\nRepeat Rows 11-12.\nRow 13: [7] [13] {11} [14] {9} [16] {13} [6]\nRepeat Rows 13-12.\nRow 14: [7] [13] {11} [14] {9} [16] {13} [6]\nRepeat Rows 13-12.\nRow 15: [9] [16] {13} [16] {13} [14] {14} [9]\nRepeat Rows 15-16.\nRow 17: [15] {17} [17] {15} [19] {17} [9]\nRepeat Rows 17-18.\nRow 19: [19] {19} [19] {16} [19] {16} [9]\nRepeat Rows 19-20.\nRow 21: [17] {18} [20] {17} [20] {17} [9]\nRepeat Rows 21-22, and finish with a rnd for the sleeves.\nRepeat Rows 1-10 for the body.\nRow 11: [11] [16] {18} [20] {17} [17} [9]\nRow 12: [9] [9] [10] [11] [9} [9] {10} [11]\nRows 13-15: Repeat Rows 11-11.\nRow 16: [17] {18} [20] {17} [17} [9]\nRepeat Rows 16-19.\nRow 20: [17] {18} [20] {17} [17} [9] _____\nRepeat rows 16-19.\nRow 21: [16} [20] {17} [18] [17] [9]\nRepeat rows 21-22.\nRow 23: _____\nIn: [99090", "exp_result": "Out: [00666] [[60060] [[66066]"}, {"taskId": "34b99a2b.json", "prompt": "Continue the pattern\nIn: [880040550] [[880840055] [[000040050] [[880040555] [[800840005]\nOut: [2020] [[2220] [[0020] [[2022] [[2000]\nIn: [080045050] [[080845055] [[080840005] [[080840505] [[000840050]\nOut: [2220] [[2220] [[0200] [[0000] [[0022]\nIn: [080040550] [[880845005] [[880045005] [[080840050] [[008040505]\nOut: [0020] [[0200] [[0202] [[0222] [[0222]\nIn: [000840555] [[088840500] [[800040505] [[808845550] [[088045005]\nOut: [0220] [[0022] [[2202] [[0202] [[2222]\nIn: [080045000] [[080845505] [[880840055] [[888845055] [[008845050]\nOut: ", "result": "\u00a0[[0000]\nWith: \u00a0G/1 \u00a0B/2 \u00a0U/2\nC/2 \u00a0B/G/2\nC/4 \u00a0G/G/2\nA.\u00a0 C/2 \u00a0Bx3\nB.\u00a0 C/4 \u00a0Bx5\nC. Repeat Bx4\nB. Repeat Hx4\nC. C/2 \u00a0Bx3\nThis pattern has been used to make\u00a0\n- a ball-jumper -\n- a square peg - (see\u00a0\u00a0Pattern for instructions\n- a square peg - on a round peg - using a\u00a0ball-jumper \u00a0with an L/R or L/R/R pattern)\n- a square peg - on a round peg - using an A/A pattern with a square peg\nThis pattern has been used to make\u00a0\n- a cross-shaped pegboard -\n- a cross-shaped pegboard - on a\u00a0square peg - \u00a0on a\u00a0square peg - square peg - square-potted bag -\n- a cross-shaped pegboard, with cross-shaped pegboards - on a\u00a0square peg - square-potted bag, using a\u00a0square peg - square-potted bag, using an L/R or L/R/R pattern\nThis pattern has been used to make\u00a0\n- an inverted pegboard -\n- an inverted pegboard - on a\u00a0square-potted bag - square-potted bag, using an N/N/N/N pattern\nThis pattern has been used to make\u00a0\n- a square peg - with cross-shaped pegboards - on a\u00a0square-potted bag - square-potted bag, using an N/N/N/N pattern\nThis pattern has been used to make\u00a0\n- a full size\u00a0square peg board -\n- a full-size\u00a0square peg board with cross-shaped pegboards - on a\u00a0square-potted bag - square-potted bag, using an N/N/N/N pattern with cross-shaped pegboards and a round peg board\n- a full-size\u00a0square peg board, with an\u00a0angled\u00a0angle-shaped pegboard - on a\u00a0square-potted bag - square-potted bag, using an L/R/R pattern with an square peg board\n- a full-size\u00a0square peg board, using an\u00a0angle-shaped\u00a0angle-shaped pegboarding - with a round pegboard - on a\u00a0square-potted bag - square-potted bag, using an L/R/R pattern with an angle-shaped pegboard\n- a full-size\u00a0square peg board - with an\u00a0angled\u00a0angled-shaped pegboard - on\u00a0a\u00a0square-potted bag - square-potted bag, using an N/N/N/N pattern with an angle-shaped pegboard and a round pegboard\nThis pattern has been used to make\u00a0\n- a\u00a0square peg \u00a0on a round pegboard -\u00a0 on a\u00a0square-potted bag - square-potted bag, using an N/N/N/N pattern with an angle-shaped pegboard and a round pegboard\nC/8 \u00a0G/8\nThis pattern has been used to make\u00a0\n- a square peg\non a round pegboard\n- a square hole and two square peg-holes -\n- a square hole and two square-pin pegs -\nA piece of the\u00a0 square peg.\nThe square-potted bag pattern in the square peg.\nThis pattern has been used to make\u00a0\n- a square peg ", "exp_result": "Out: [2200] [[2000] [[2220] [[0200] [[2002]"}, {"taskId": "3979b1a8.json", "prompt": "Continue the pattern\nIn: [98889] [[88288] [[82228] [[88288] [[98889]\nOut: [9888992892] [[8828892892] [[8222892892] [[8828892892] [[9888992892] [[9999922892] [[2222228892] [[8888888992] [[9999999922] [[2222222228]\nIn: [23332] [[33533] [[35553] [[33533] [[23332]\nOut: [2333225325] [[3353325325] [[3555325325] [[3353325325] [[2333225325] [[2222255325] [[5555553325] [[3333333225] [[2222222255] [[5555555553]\nIn: [51115] [[11911] [[19991] [[11911] [[51115]\nOut: ", "result": "\u00a0[51115]\nIn: [19112] [[20220] [[20220] [[19112] [[20220]\nOut: \u00a0[19112]\nIn: [13111] [[12091] [[16091] [[13111] [[12091]\nOut: \u00a0[13111]\nIn: [119814] [[87914] [[89914]\nOut: \u00a0[119814]\nIn: [27112] [[30312] [[33112]\nOut: \u00a0[27112]\nIn: [11111] [[28111] [[10111]\nOut: \u30fb[11111]\nIn: [35222]\nOut: \u00a0[35222]\nIn: [331222]\nOut: \u00a0[311222]\nIn: [[331222]\nOut: \u00a0[411234]\nIn: [[331242]\nOut: \u00a0[411244]\nIn: [[251246]] [[333250]]\nOut: \u00a0[411245]]\nIn: [[261247]] [[333260]]\nOut: \u00a0[411246]\nIn: [[311246]] [[131248]]\nOut: \u00a0[271410]\nIn: [[261413]] [[151230]\nOut: \u00a0[271412]]\nIn: [[261413]\nOut: \u00a0[271412]]\nIn: [[131435]\nOut: \u00a0[271416]\nOut: [[261414]]\nIn: [[131435]\nOut: \u00a0[271416]\nIn: [[271417]]\nOut: \u00a0[211216]\nIn: [[281614]] [[601215]\nOut: \u00a0[211217]]\nIn: [[281615]\nOut: \u00a0[211218]\nIn: [[291623]]\nOut: \u00a0[211224]]\nIn: [[291623]\nOut: \u00a0[271417]]\nIn: [[211224]\nIn: [[301112]\nOut: \u00a0[241225]]\nOut: \u00a0[916216]\nTo finish off, take another piece of embroidery floss with a hook size a little smaller than the embroidery needle size. Take each piece of floss and slip the hook over the first floss so that you can't see the two pieces of floss when the embroidery needle needles are in place. Pull the floss over the first two stitches, pulling the ends of the floss together. Sew each flap down flat.\nYou can see several designs that I decided for this pattern. I chose the shape of a butterfly, with the head and underside covered in a layer of purple and blue. Then I added the wings.", "exp_result": "Out: [5111559159] [[1191159159] [[1999159159] [[1191159159] [[5111559159] [[5555599159] [[9999991159] [[1111111559] [[5555555599] [[9999999991]"}, {"taskId": "3b4c2228.json", "prompt": "Continue the pattern\nIn: [2203003] [[2202200] [[0002200] [[2330022] [[0330022] [[0000330] [[3020330]\nOut: [100] [[010] [[000]\nIn: [03300] [[03300] [[00000] [[22002] [[22000] [[00022] [[00022]\nOut: [100] [[000] [[000]\nIn: [0033000] [[2033030] [[0000000] [[3300220] [[3300220] [[0033000] [[0033000]\nOut: [100] [[010] [[001]\nIn: [0330003] [[0330000] [[0000200] [[3000330] [[0030330]\nOut: [100] [[010] [[000]\nIn: [00022] [[33022] [[33000] [[00220] [[30220]\nOut: [100] [[000] [[000]\nIn: [00000] [[03300] [[03300] [[20000] [[00003] [[33000] [[33022] [[00022]\nOut: ", "result": "\u00a0[001]\nIn: [000] [[0]\nOut: [001]\nIn: [000]\nOut: [001]\nIn: [000] [[0]\nOut: [999]", "exp_result": "Out: [100] [[010] [[000]"}, {"taskId": "48131b3c.json", "prompt": "Continue the pattern\nIn: [080] [[808] [[000]\nOut: [808808] [[080080] [[888888] [[808808] [[080080] [[888888]\nIn: [70] [[07]\nOut: [0707] [[7070] [[0707] [[7070]\nIn: [4000] [[0444] [[0040] [[0400]\nOut: [04440444] [[40004000] [[44044404] [[40444044] [[04440444] [[40004000] [[44044404] [[40444044]\nIn: [0101] [[1001] [[0010] [[1000]\nOut: ", "result": "\u00a0[[0001] [[0101] [[1001] [[0010]\nIn: [[0000] [[0000]\nOut: \u00a0[[0000]\nIn: [0000]\nOut: \u00a0[[0000]\nOut: [1377]\nIn: [] [[0000]\nOut: [] [[000000]\nBackpack : [[0011]\nIn: [0011] [[0011] [[0011]\nIn: [000000]\nOut: [0001]\nIn: [0001]\nIn: [0001]\nIn: [0001]\nIn: [0006] [[0011] [[0011]\nIn: [0000]\nOut: []\nIn: [0000]\nOut: \u00a0[[0011]\nIn: [(100)]\nOut: [(100)]\nIn: [(100)]\nIn: (100)]\nIn: [0000]\nOut: (100)]\nIn: [00000]\nOut: [(100)]\nOut: [(100)]\nIn: [(100)]\nIn: [(100)]\nIn: [0000]\nOut: [0001]\nIn: [0100]\nOut: [0000]\nIn: [0000]\nOut: [0000]\nIn: [0000]\nOut: [0000]\nIn: [(100)]\n[0101]\nOut: [0000]\n* \u00a0** \u00a0**** \u00a0****\n** \u00a0**** \u00a0***** \u00a0****\nIn: [0011]\nOut: [1101]\nOut: [0001]\nOut: [0011]\nIn: [0101]\n** \u00a0**** \u00a0***** \u00a0****", "exp_result": "Out: [10101010] [[01100110] [[11011101] [[01110111] [[10101010] [[01100110] [[11011101] [[01110111]"}, {"taskId": "48f8583b.json", "prompt": "Continue the pattern\nIn: [996] [[388] [[833]\nOut: [000000996] [[000000388] [[000000833] [[000000000] [[000000000] [[000000000] [[000000000] [[000000000] [[000000000]\nIn: [855] [[888] [[599]\nOut: [000000000] [[000000000] [[000000000] [[000000000] [[000000000] [[000000000] [[000855855] [[000888888] [[000599599]\nIn: [717] [[177] [[717]\nOut: [000717000] [[000177000] [[000717000] [[717000000] [[177000000] [[717000000] [[000717000] [[000177000] [[000717000]\nIn: [327] [[227] [[557]\nOut: [327000000] [[227000000] [[557000000] [[000000000] [[000000000] [[000000000] [[000000000] [[000000000] [[000000000]\nIn: [166] [[516] [[555]\nOut: [166000000] [[516000000] [[555000000] [[000166000] [[000516000] [[000555000] [[000000000] [[000000000] [[000000000]\nIn: [442] [[222] [[242]\nOut: [442442000] [[222222000] [[242242000] [[000000000] [[000000000] [[000000000] [[000442000] [[000222000] [[000242000]\nIn: [979] [[997] [[797]\nOut: ", "result": "????\nIn: [[00010000] [[00010000] [[000100000] [[00000000] [[00000000] [[00000000] [[00010000]\nIn: [[1006] [[865]\nOut:?????\nIn: [[0002]\nOut:?????\nIn:\nOut:?????\nIn:\nIn: [[10000]\nOut:\nIn:\nIn:", "exp_result": "Out: [000979000] [[000997000] [[000797000] [[000000979] [[000000997] [[000000797] [[979000979] [[997000997] [[797000797]"}, {"taskId": "4cd1b7b2.json", "prompt": "Continue the pattern\nIn: [1034] [[0021] [[2140] [[0312]\nOut: [1234] [[3421] [[2143] [[4312]\nIn: [0423] [[4102] [[0340] [[3014]\nOut: [1423] [[4132] [[2341] [[3214]\nIn: [3021] [[1000] [[4302] [[0143]\nOut: [3421] [[1234] [[4312] [[2143]\nIn: [0123] [[0310] [[3041] [[0402]\nOut: ", "result": "\u00a0-3141\nIn: \u00a03051\nIn: 0312\nOut: 2341\nIn: 0402\nThis is the end of the first page.\nCurious about the patterns and patterns patterns, the next step is the next page. I use this page for things like:\nI would usually start all the patterns using the 0402 section when working on a pattern without knowing what the pattern should be (or not be). If you have a bit of foreknowledge about how the pattern looks when it is completed (and the exact shape of the paper used) then you can skip going to the 0402 section. For example, here is a pattern that I created for a new paper and then finished off with.\nIn: \u00a01010\nOut: \u00a03141\nIn: \u00a01010\nOut: \u00a02112\nIn: \u00a01010\nOut: \u00a04131, 4132, 3321, 3212\nOut: \u00a02951, 3051, 3210, 3301, 3310\nIn: \u00a03131\nOut: \u00a03321, 3213\nI also generally start the patterns with the first 0402 section when creating an entry. This means that when I'm going to do something like get the second page. I don't know what the pattern will be, and the only thing that will happen is I'm going to do the same thing for all of the pages I'm going to do. I use the same first 0402 section I used in the first section of the first page. I also always start the first page of the previous page with the 0402 section of the first page. I usually take this step when I am going to do something that I will only do once, such as using one of the entries from page 2951. The next couple steps are where I use this method for the second page. I will now do the following things to get started with this page.\nIn: \u00a00123\nIn: \u00a00402 (this is the first page of the next page)\nOut: \u00a03241,3242,3243,3244\nIn: \u00a00303, 0304, 0305, 0306, 0307\nOut: \u00a02404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412\nIn: \u00a03037, 3377, 3378, 3379, 3381, 3382\nIn: \u00a03047\nOut: \u00a03047\nIn: \u00a03023, 3024, 3025\nIn: \u00a03056\nOut: \u00a03057, 3059, 3060, 3061, 3062\nIn: \u00a03077, 3808\nIn: \u00a03307, 3308\nOut: \u00a02951, 2952, 2953, 2954, 2955\nIn: \u00a00026\nOut: \u00a00402\nIn: [2532] [[2342] [[2344]\nOut: \u00a00402\nIn: [2948] [[0005]\nOut: \u00a02347\nIn: \u00a00046\nOut: \u00a02348, 3241, 3242, 3243, 3244\nIn: \u00a00302, 0303, 0304, 0305, 0306, 0307,\nout: \u00a02404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412,2413\nIn: \u00a03051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061,\nout: \u00a00302, 3131, 3321, 3213, 1234, 1135\nIn: \u00a02909, 2910, 2911, 2930, 2931, 2932\nIn: \u00a06019, 6022, 6123, 6124, 6129, 6130\nOut: \u00a03040, 3351\nAll of the next lines are the same as the first ones. I take the beginning of the pattern", "exp_result": "Out: [4123] [[2314] [[3241] [[1432]"}, {"taskId": "506d28a5.json", "prompt": "Continue the pattern\nIn: [02200] [[22220] [[00220] [[00220] [[44444] [[10010] [[11101] [[00111] [[11100]\nOut: [33330] [[33333] [[00333] [[33330]\nIn: [22222] [[00020] [[02022] [[22222] [[44444] [[01100] [[11010] [[11000] [[00111]\nOut: [33333] [[33030] [[33033] [[33333]\nIn: [00000] [[02220] [[02000] [[22202] [[44444] [[11001] [[11011] [[10101] [[01011]\nOut: [33003] [[33333] [[33303] [[33333]\nIn: [02002] [[02202] [[00022] [[00220] [[44444] [[10100] [[10010] [[00001] [[01110]\nOut: [33303] [[33333] [[00033] [[03330]\nIn: [02222] [[00020] [[02000] [[22202] [[44444] [[00100] [[00001] [[10011] [[00001]\nOut: ", "result": "\u00a0[38333] [[34333] [[38416]\nIn: [11101] [[11101] [[11020]\nOut: \u00a0[22222] [[22222] [[44444]\nThis pattern is a complete guide to solving the quadratic equation for any function of n. It is also used for solving any basic square-root problem; see the equations for more information. The same pattern can be used to solve any general equation or system of equations by using more than one substitution, i.e., by using multiple substitution for the following equations and some of their solutions: $$\\frac{{3^n}}{{3^m}}=\\sigma.$$\nFor example, the equation for the number 6:\n$$\\frac{{3^n}}{{6^s}}=\\sigma.$$\nThis can be expressed easily in terms of many possible substitutions:\n$$\\frac{{4^{n+s}}}{6^\\sigma}=\\sigma;$$\n$$\\frac{{4^{n+s}}}{6^s^n+\\frac1{6}{n+2s}}=\\sigma;$$\n$$\\frac{{4^{n}+s}}}{6^s^n+\\frac{1}{n2s}{n+3s}}=\\sigma;$$\n$$\\frac{{4^{n+d}}}{6^d^{s+s^n+\\frac1{6}{n}{n+1s}}=\\sigma;$$\n$$\\frac{{4^{n+a}}}{6^a^{s+s^n+\\frac1{6}{n^s}}=\\sigma;$$\n$$\\frac{{5^{n}}}{6^a^{s+s^n+\\frac1{6}{n^s}}=\\sigma;$$\n$$\\frac{{5^{n+d}}}{6^d^{s+s^n+\\frac1{6}{n^s}}=\\sigma;$$\n$$\\frac{{5^n-4^s}}}{6^n-4^s=\\sigma;$$\nI have placed the solution for the square root of 1.42857 to the right of the last line, and replaced it by the solution in the previous post. There are two kinds of substitution: the substitution of a term as a whole in a single substitution, or a single term as a whole in the whole of a substitution.\nIn the previous equation:\n$$\\frac{{\\sqrt{{1^2+1}}}{2^n+1}}=\\frac{1}{2}\\sigma \\cdot{1-\\sum_{n=0}^\\infty \\frac{1}{n}\\sigma}$$\nThe first problem is solved, but the second is only possible by using one (or two) partial solutions of each of the following equations:\n$$\\frac{{\\sqrt{{1^2+1}}}{2^\\sigma(n)}}=\\frac{1}{2} \\frac1{n}\\sqrt{{1^2+1}}=\\frac{1}{2}\\sigma(n)$$\n$$\\frac{{\\sqrt{{1^2+1}}}{2^3^s}}=\\frac{1}{2}\\sigma(n)$$\nThe square root of 1.42857 is the third problem as it requires more than one", "exp_result": "Out: [03333] [[00033] [[33033] [[33303]"}, {"taskId": "50a16a69.json", "prompt": "Continue the pattern\nIn: [52525251] [[25252521] [[52525251] [[25252521] [[52525251] [[25252521] [[52525251] [[11111111]\nOut: [25252525] [[52525252] [[25252525] [[52525252] [[25252525] [[52525252] [[25252525] [[52525252]\nIn: [63576357635888888888] [[57635763576888888888] [[63576357635888888888] [[57635763576888888888] [[63576357635888888888] [[57635763576888888888] [[63576357635888888888] [[57635763576888888888] [[63576357635888888888] [[57635763576888888888] [[63576357635888888888] [[88888888888888888888] [[88888888888888888888] [[88888888888888888888] [[88888888888888888888] [[88888888888888888888] [[88888888888888888888] [[88888888888888888888] [[88888888888888888888] [[88888888888888888888]\nOut: [35763576357635763576] [[76357635763576357635] [[35763576357635763576] [[76357635763576357635] [[35763576357635763576] [[76357635763576357635] [[35763576357635763576] [[76357635763576357635] [[35763576357635763576] [[76357635763576357635] [[35763576357635763576] [[76357635763576357635] [[35763576357635763576] [[76357635763576357635] [[35763576357635763576] [[76357635763576357635] [[35763576357635763576] [[76357635763576357635] [[35763576357635763576] [[76357635763576357635]\nIn: [763763764] [[637637634] [[763763764] [[637637634] [[763763764] [[637637634] [[763763764] [[637637634] [[444444444]\nOut: [637637637] [[376376376] [[637637637] [[376376376] [[637637637] [[376376376] [[637637637] [[376376376] [[637637637]\nIn: [686863] [[868683] [[686863] [[868683] [[686863] [[333333]\nOut: ", "result": "\u00a0288833] [[288833] [[444444444]\nOut: \u00a0333333] [[66666667] [[333333] [[333333]\nOut: \u00a0333333] [[66666667] [[333333] [[333333]\n\u00a0 \u00a0\nOut: \u00a0333333] [[66666667] [[333333] [[333333]\nWith\u00a0 G: \u00a0B.\nIn: [142867] --------------------------------------------------------------------------\nFABRICATIONS:\nWet: With 3 strands of worsted weight yarn (I used\u00a0 Bluebird\u00a0 yarn\u00a0), ch 4. 2 trc in 2nd ch from hook, trc in next ch. Purl until piece measures approximately 9 inches in wide.\u00a0 Then purl 1 row of trc in next trc.\nWet: With 3 strands of worsted weight yarn (I used\u00a0 Bluebird\u00a0 yarn\u00a0), ch 4. 2 trc in 2nd ch from hook, trc in next ch. Purl until piece measures approximately 9 inches in wide.\u00a0 Then purl 1 row of trc in next trc.\nFrosted:\nWet: With 3 strands of worsted weight yarn (I used\u00a0 Bluebird\u00a0 yarn\u00a0), ch 4. 2 trc in 2nd ch from hook, trc in next ch. Purl until piece measures approximately 9 inches in wide.\u00a0 Then purl 1 row of trc in next trc", "exp_result": "Out: [868686] [[686868] [[868686] [[686868] [[868686] [[686868]"}, {"taskId": "59341089.json", "prompt": "Continue the pattern\nIn: [757] [[557] [[775]\nOut: [757757757757] [[755557755557] [[577775577775]\nIn: [778] [[588] [[588]\nOut: [877778877778] [[885588885588] [[885588885588]\nIn: [888] [[557] [[578]\nOut: [888888888888] [[755557755557] [[875578875578]\nIn: [887] [[755] [[578]\nOut: [788887788887] [[557755557755] [[875578875578]\nIn: [857] [[575] [[885]\nOut: ", "result": "\u00a0[[885]\nIn: \u00a0[[565]\nOut: [565]\nIn: \u00a0[[565]\nOut: [655]\nIn: \u00a0[[465]\nOut: [475]\nIn: \u00a0[[465]\nOut: \u00a0[[470]\nIn: \u00a0[[470]\nOut: \u00a0[[468]\nIn: [470]\nOut: <\nIn: [462]\nIn: [[457]\nOut: <\nIn: [457]\nOut: <\nIn: [458]\nOut: <\nIn: [458]\nOut: <\nIn: [458]\nOut: <\nIn: [459]\nOut: <\nIn: [459]\nOut: <\nIn: [460]\nOut: <\nIn: [460]\nOut: <\nIn: \u00a0[[460]\nOut: [461]\nOut: <\nIn: [464]\nOut: <\nIn: [466]\nOut: <\nIn: [466]\nOut: <\nIn: [466]\nOut: <\nIn: [[466]\nIn: [464]\nOut: <\nIn: [466]\nOut: <\nIn: \u00a0[[466]\nIn: \u00a0[[466]\nIn: \u00a0[[466]\nOut: \u00a0[[466]\nin: [466]\nIn: \u00a0[[466]\nIn: \u00a0[[466]\nIn: \u00a0[[466]\nOut: \u00a0[[469]\nIn: \u00a0[[469]\nOut: \u00a0[[469]\nin: [469]\nIn: \u00a0[[469]\nIn: \u00a0[[469]\nOut: \u00a0[[469]\nin: [469]\nIn: \u00a0[[469]\nOut: \u00a0[[469]\nin: \u00a0[[469]\nOut: \u00a0[[469]\nin: \u00a0[469]\nIn: \u00a0{[469]\nIn: \u00a0{[469]\nOut: \u00a0(((((((((((())))))))))))((((((),))))))(((((((),)))))))))\nin: \u00a0((((((),)))\nin: \u00a0( ((())))\nin: \u00a0((((((),)))\nin: \u00a0((((((),)))\nin: \u00a0(((((((),)))\nin: \u00a0(((((((),)))\nin: \u00a0((((((),)))\nin: \u00a0((((((),))))\nin: \u00a0(((((((),)))\nin: \u00a0(((((((),)))\nin: \u00a0((((((),))))\nin: \u00a0((((())))\nin: \u00a0(((((((),)))\nin: \u00a0((((((),)), ))\nin: \u00a0((((())))\nin: \u00a0(((((((),)),\nin: \u00a0((((())))\nin: \u00a0(((((((),)))\nin: \u00a0(((((((),)))\nin: \u00a0(((((((),)))\nin: \u00a0(((((((),))))\nin: \u00a0(((((((),)))\nin: \u00a0((((((),)))\nin: \u00a0((((((),)))\nin: \u00a0((((((),)))\nin: \u00a0((((((()))))\nin: \u00a0(((((((),)))\nout: \u00a0(([[(())))\nin: \u00a0((((((((),)))\nIn: \u00a0((((((()))))\nin: \u00a0((((((),))\nin: \u00a0(((((((),)))\nin: \u00a0(((((((),)))\nin: \u00a0(((((((),)))\nin: \u00a0(((((((),)))\nin: \u00a0(((((((),)))\nin: \u00a0(((((((),)))\nIn: \u00a0((((((()", "exp_result": "Out: [758857758857] [[575575575575] [[588885588885]"}, {"taskId": "5b6cbef5.json", "prompt": "Continue the pattern\nIn: [2002] [[2222] [[2002] [[0202]\nOut: [2002000000002002] [[2222000000002222] [[2002000000002002] [[0202000000000202] [[2002200220022002] [[2222222222222222] [[2002200220022002] [[0202020202020202] [[2002000000002002] [[2222000000002222] [[2002000000002002] [[0202000000000202] [[0000200200002002] [[0000222200002222] [[0000200200002002] [[0000020200000202]\nIn: [0001] [[0110] [[0000] [[0001]\nOut: [0000000000000001] [[0000000000000110] [[0000000000000000] [[0000000000000001] [[0000000100010000] [[0000011001100000] [[0000000000000000] [[0000000100010000] [[0000000000000000] [[0000000000000000] [[0000000000000000] [[0000000000000000] [[0000000000000001] [[0000000000000110] [[0000000000000000] [[0000000000000001]\nIn: [0000] [[4444] [[0440] [[4400]\nOut: [0000000000000000] [[0000000000000000] [[0000000000000000] [[0000000000000000] [[0000000000000000] [[4444444444444444] [[0440044004400440] [[4400440044004400] [[0000000000000000] [[0000444444440000] [[0000044004400000] [[0000440044000000] [[0000000000000000] [[4444444400000000] [[0440044000000000] [[4400440000000000]\nIn: [3303] [[3003] [[0003] [[3303]\nOut: [3303330300003303] [[3003300300003003] [[0003000300000003] [[3303330300003303] [[3303000000003303] [[3003000000003003] [[0003000000000003] [[3303000000003303] [[0000000000003303] [[0000000000003003] [[0000000000000003] [[0000000000003303] [[3303330300003303] [[3003300300003003] [[0003000300000003] [[3303330300003303]\nIn: [1010] [[1100] [[1111] [[1001]\nOut: [1010000010100000] [[1100000011000000] [[1111000011110000] [[1001000010010000] [[1010101000000000] [[1100110000000000] [[1111111100000000] [[1001100100000000] [[1010101010101010] [[1100110011001100] [[1111111111111111] [[1001100110011001] [[1010000000001010] [[1100000000001100] [[1111000000001111] [[1001000000001001]\nIn: [0202] [[2202] [[2200] [[0002]\nOut: ", "result": "0000000000000000000000000000000000000000000000000000000000000000\nIn: [200] [[2048] [[2035] [[2028]\nOut: 00000000000000000000000000000000000000000000000000000000\nOut (with \u00a0additional\u00a0extra\u00a0lines)\nIn: [02] [[02] [[02]\nOut: [02] [[02]\nOut: 0000000000000000000000000000000000000000000000000000000000000000\nIn: [01] [[01] [[0001]\nOut: 00000000000000000000000000000000000000000000000000000000\nOut (with \u00a0additional\u00a0extra\u00a0lines)\nIn: [00] [[00] [[00]\nOut: 0000000000000000000000000000000000000000000000000000000000000000\nOut (with \u00a0additional\u00a0extra\u00a0lines)\nOut (with \u00a0additional\u00a0extra\u00a0lines)\nIn: [01] [[00] [[00]\nOut: 00000000000000000000000000000000000000000000000000000000000000000000000000000000\nOut (with \u00a0additional\u00a0extra\u00a0lines)\nAnd the last 3\u00a0patterns\u00a0from above,\u00a0combined,\u00a0will form this\u00a0magnified\u00a0graph:\nThe resulting pattern\u00a0is identical, with the exception that the pattern number 1 is missing.\nAn additional problem arises because the pattern at first may appear to represent a string, but actually is just the string \"101\". A simple solution to this problem would be to append a prefix character to this string. However, at the time this blog post was written, there were no \"nesting\" character sets on most systems (i.e. Unix, Windows, etc.).\u00a0A technique called \"magic string\" was used to define a prefix to the character (the next prefix would be chosen based on the preceding character) but it is now\u00a0technically\u00a0known as \"magic string with separator\".\nSo, the most obvious solution is to define an additional prefix. With a magic string, then we can append 0, 1 and 0xffff, 1 and 0E, which allows for a bit of manipulation, the easiest example, is this:\nIn: [2124]", "exp_result": "Out: [0000020200000202] [[0000220200002202] [[0000220000002200] [[0000000200000002] [[0202020200000202] [[2202220200002202] [[2200220000002200] [[0002000200000002] [[0202020200000000] [[2202220200000000] [[2200220000000000] [[0002000200000000] [[0000000000000202] [[0000000000002202] [[0000000000002200] [[0000000000000002]"}, {"taskId": "60c09cac.json", "prompt": "Continue the pattern\nIn: [030] [[077] [[000]\nOut: [003300] [[003300] [[007777] [[007777] [[000000] [[000000]\nIn: [0080] [[0855] [[0005] [[0000]\nOut: [00008800] [[00008800] [[00885555] [[00885555] [[00000055] [[00000055] [[00000000] [[00000000]\nIn: [00100] [[00100] [[06660] [[00160] [[00000]\nOut: ", "result": "\u00a0[0008]\n(For an explanation of these words and the meanings of them for you, see the explanation on the page for this page.)\nStep 1. With any color yarn, yarn over, pull yarn through the loop so you have an even number of loops (a purl stitch).\nIn: [040] [(0) 0011] (0011)\nOut: \u00a0[9]\nRepeat steps 2 and 3 for all colors.\nStep 2. With any 2 Color yarn, crochet the following 3 stitches. If your yarn has a longer tails (they should come to the front of the piece), crochet them as in Step 1 so that they are as close together as you can get them. Note the yarn tails that run the length of the other stitches in the round.\nIn: [022] [0003] [0003]\nOut: [0003]\nRepeat steps 2 and 3 for all colors.\nStep 3. With any 2 (or 3) Color yarn, crochet the following 4 stitches.\nIn: [022] [002] [002] [002]\nOut: [002]\nRepeat steps 3 and 4 for all colors.\nStep 4. With any 2 (or 3) Color yarn, crochet the following 5 stitches.\nIn: [014] [0003] [0003] [0003] [0003] [0003]\nOut: [002]\nRepeat steps 3 and 4 for all colors.\nStep 5. With any 2 (or 3) Color yarn, crochet the following 6 stitches. If your yarn has a shorter tails (they should come to the back of the piece), crochet them as in Step 1 so that they are as close together as you can get them. Note the yarn tails that run the length of the other stitches in the round.\nIn: [020] [0004] [0004] [0004] [0004] [0004]\nOut: \u00a0[0004] (The yarn tails that run the length of the other stitches in the round should be omitted.)\nRepeat steps 3 and 4 for all colors.\nStep 6. With any 2 (or 3) Color yarn, crochet the following 7 stitches.\nIn: [014] [0004.5] [0016.5] [0017.5] [0011.5] [0006.5]\nOut: \u00a0[0004.5]\nRepeat steps 3 and 4 for all colors.\nStep 7. With any 2 (or 3) Color yarn, crochet the following 8 stitches. Note that the 1st and 2nd stitches (not the 1st two) are still a separate color.\n in: [010] [0005] [0005] [0005] [0005] [0005]\nOut: \u00a0[0005]\nRepeat steps 3 and 4 for all colors.\nStep 8. With any 2 (or 3) Color yarn, crochet the following 9 stitches.\nIn: [010] [1002] [1005] [0005] [0005.5] [0005.5]\nOut: \u00a0[0005.5]\nRepeat steps 3 and 4 for all colors.\nStep 9. With any 2 (or 3) Color yarn, crochet the following 10 stitches.\nin: [010] [1002] [1005] [0015] [0017] [0011]\nOut: \u00a0[0005.5]\nRepeat steps 3 and 4 for all colors.\nStep 10. With any 2 (or 3) Color yarn, crochet the following 11 stitches.\nIn: [010] [1002.5] [1005] [0005] [0005.5]\nOut: [0005.5]\nRepeat steps 3 and 4 for all colors.\nStep 11. With any 2 (or 3) Color yarn, crochet the following 12 stitches.\nin: [010] [1002.5] [1005] [0015.5] [0022]\nout: [0005.5]\nRepeat steps 3 and 4 for all colors.\nStep 12. With any 2 (or 3) Color yarn, crochet the following", "exp_result": "Out: [0000110000] [[0000110000] [[0000110000] [[0000110000] [[0066666600] [[0066666600] [[0000116600] [[0000116600] [[0000000000] [[0000000000]"}, {"taskId": "626c0bcc.json", "prompt": "Continue the pattern\nIn: [0088000] [[8888800] [[0880880] [[0888800] [[0008800] [[0000000] [[0000000]\nOut: [0011000] [[3311400] [[0320440] [[0221100] [[0001100] [[0000000] [[0000000]\nIn: [0800800] [[8800880] [[0880880] [[0880880] [[0088000] [[0008000] [[0000000]\nOut: [0200400] [[2200440] [[0110110] [[0110110] [[0033000] [[0003000] [[0000000]\nIn: [8880000] [[8888000] [[8808000] [[0888000] [[0000000] [[0000000] [[0000000]\nOut: [1140000] [[1144000] [[3302000] [[0322000] [[0000000] [[0000000] [[0000000]\nIn: [0880880] [[8888880] [[0880800] [[0088800] [[0000000] [[0000000] [[0000000]\nOut: ", "result": "\u00a0-11400000 [[0840000] [[0821200] [[0205000] [[0205000] [[0000000]\nThe first time you read the \"In\" lines, you might even think that something is wrong, or you might be thinking what I did - but by reading these lines, you should have a feeling of what exactly is going on.\nRepeat the pattern until you're reading each successive line of text.\nIn: [0700500] [[0806100] [[0806100] [[0008001] [[0000000] [[0000000]\nOut: [00800100] [[0700500] [[0700500] [[00800100] [[0000000]\nIn: [0083100] [[0800001] [[0800001] [[0082000] [[0008081]\nOut: \u00a0-0408000 [[0800400] [[0220001] [[0412300] [[0422000]\n-08000000 [[00800100] [[0880000] [[0808000] [[000000]\nIn: [08000000] [[08000000] [[08000000] [[0080808]\nOut: [0080808] [[0808001] [[0808000] [[000000]\nIn: \u00a0-050000000 [[0808000] [[000000]\nOut: \u00a0-02000001 [[0800001]\nIn: [0808000] [[0782000] [[0782000] [[0080800]\nOut: [0808000]\nAs you progress, the patterns will change into a more complicated pattern (this is an example of the pattern repeat itself - there are many more possibilities you can put in there). But they also change into more of a simplified pattern, or a simple pattern (which is an example of the pattern do). In other words, the pattern repeat can change itself very rapidly between these levels of complexity.\nRepeat these three \"in\" lines at a time\nIn: \u00a0-10100011\nOut: \u00a0-0408000\nYou're pretty much done! You've completed the first chapter of the pattern repeat tutorial, and in doing so, you've learned all about pattern repeating techniques. \u00a0Now, let's take a look at some patterns you can take and incorporate into your next pattern!", "exp_result": "Out: [0240110] [[2244110] [[0330200] [[0032200] [[0000000] [[0000000] [[0000000]"}, {"taskId": "66e6c45b.json", "prompt": "Continue the pattern\nIn: [0000] [[0340] [[0760] [[0000]\nOut: [3004] [[0000] [[0000] [[7006]\nIn: [0000] [[0560] [[0830] [[0000]\nOut: [5006] [[0000] [[0000] [[8003]\nIn: [0000] [[0230] [[0490] [[0000]\nOut: ", "result": "______________________________________________________________________________________.\n\n\nNotes on the Knits: The pattern refers to a pair of garter cables. The pattern suggests that you make one of these cables, making it as easy as possible to follow. The other cable from step 2 provides the ribbing.\n\nSizes: The patterns are for the Adult Sized Size S (UK 8, UK 4.5, US 8). The original pattern was written for a large adult. But these sizes are easy to fit and all the items are very flattering if worn over size S garments. The adult size is slightly less fitted in the front and the sides than the child size. Please choose your size based on what your actual torso measurements make you feel while wearing them. The sizes listed below were taken from my measurement book provided at the beginning of the pattern. I have used size S (medium) in all my projects. These sizes fit comfortably. Most people would find that the adult size is comfortable for daily use.\n\n\nThe size charts below are drawn from this pattern. All size charts are approximate. You should make sure that what you see was in the exact size you requested for your original garment. If in doubt about a size, choose the size that will give you the look that you want.\n\n\nSIZE CHART / SIZING / SIZE CHART / SIZING / SIZE CHART / SIZING / SIZE CHART / SIZING\n\n0 to 48 in\n\n(3 1/2 to 11 1/2 in)\n\n1 to 6 in\n\n(4 to 10 1/2 cm)\n\n1 to 24 1/2 in\n\n(5 4/5 to 7 5/8 cm)\n\n1 to 40 in\n\n(6 to 14 3/8 in)\n\n2 to 6 in\n\n(5 to 11 1/2 cm)\n\n2 to 30 in\n\n(6 to 16 1/2 in)\n\n3 to 6 in\n\n(7 to 9 1/2 cm)\n\n3 to 34 in\n\n(7 to 18 1/2 in)\n\n4 to 6 in\n\n(8 to 11 1/2 cm)\n\n4 to 39 in\n\n(8 to 21 3/4 in)\n\n5 to 6 in\n\n(9 to 12 1/2 cm)\n\n5 to 52 in\n\n(9 to 26 3/4 in)\n\n5 to 60 in\n\n(9 to 32 1/4 in)\n\n6 to 6 in\n\n(10 to 16 1/2 cm)\n\n6 to 78 in\n\n(9 to 42 in)", "exp_result": "Out: [2003] [[0000] [[0000] [[4009]"}, {"taskId": "68b67ca3.json", "prompt": "Continue the pattern\nIn: [202010] [[000000] [[201000] [[000000] [[300000] [[000000]\nOut: [221] [[210] [[300]\nIn: [300020] [[000000] [[800080] [[000000] [[001000] [[000000]\nOut: [302] [[808] [[010]\nIn: [100000] [[000000] [[002000] [[000000] [[600060] [[000000]\nOut: [100] [[020] [[606]\nIn: [303040] [[000000] [[700010] [[000000] [[700010] [[000000]\nOut: ", "result": "\u00a0In: \u00a0Out: \u00a0In:\nIn: [80010] [[900]\nOut: \u00a0In:\nIn: [20000]\nOut: \u00a0Out: \u00a0Out:\nIn: \u00a0Out:\nIn: [220000]\nOut: \u00a0In:\nIn: [300020]\nOut: \u00a0In:\nOut: [01]\nOut: [2]\nOut: [1000]\nIn: [100000]\nOut: \u00a0Out:\nIn: [2]\nIn, [100000]\nOut: \u00a0Out:\nIn: \u00a0Out:\nIn: \u00a0Out:\nIn, [200000]\nOut: \u00a0Out:\nIn, [2]\nIn, [20000]\nOut, \u00a0Out:\nIn: \u00a0Out:\nIn: [2]\nIn: \u00a0In:\nOut, \u00a0Out:\nWhen you try to put your pattern together, remember this.\nThere are three pieces in a pattern and it is not \"one\", it is \"n\" and it is like \"b\" and the middle piece, like \"l\". You have to be very careful about the \"l\".\nThis is why I am in the \"1\" section, there are four pieces in the pattern, the piece inside of the \"1\" and the piece above the \"1\" and the piece below the \"1\". The only way to see these pieces is to \"b\" together.\nAnd finally, if you put what you made into the chart, do not use the same letters to make them. You have to put the pieces in with numbers. So for example, if I am making the \"4-0-4\" pattern for my pattern, I won't put \"4-\", I will put \"3-\", put \"4-\".\nNow that you have your pattern, please don't sell it. It doesn't belong to you or to you that it's your pattern. You should take it home and use it to make your own pattern.\nIt's not really that simple, is it?\nA lot can happen while you are making your pattern. When you are making a pattern, you can also learn from it. We will go more in detail about learning pattern, learning pattern from patterns, as well as other pattern making skills.\nThe most important part, I think is that you make it, you don't make it without learning to make it.\nDon't try things you don't know how to do, if you find that they don't work, change them and try another.\nIt's not that simple. I mean, I don't know the first thing about pattern making either. But I am sure I don't want to go to the trouble to do this, because I do not have the necessary skill to make them.\nThis is why I am writing this article. With what little I do know, I have put some hints, but you have to decide for yourself how to deal with them.\nFor now, let me tell you that I did not come up with this pattern with any real understanding. After all, pattern-making is not like programming or computer science, which everyone really knows and does know from experience.\nIt is like art.\nYou can make patterns from scratch in a reasonable amount of time, and there are lots of patterns on the internet. You can ask a skilled pattern maker for advice or try, and you will likely like it, but if you try and don't like how you turn it out, change it and try something else.\nI have tried, and I have learned from each one of my patterns. You could, too.\nWhen you are making something like this, if you really look at it, what you will see is a lot of different little things that you can deal with.\nI will tell you about some of them, too. It will help you to see them, and not ignore them.\nLet's go to the first one.\nPatterns from scratch\n\"Piece of pattern\" means that when you are making a pattern from memory, you don't know what the pattern will be when you", "exp_result": "Out: [334] [[701] [[701]"}, {"taskId": "695367ec.json", "prompt": "Continue the pattern\nIn: [333] [[333] [[333]\nOut: [000300030003000] [[000300030003000] [[000300030003000] [[333333333333333] [[000300030003000] [[000300030003000] [[000300030003000] [[333333333333333] [[000300030003000] [[000300030003000] [[000300030003000] [[333333333333333] [[000300030003000] [[000300030003000] [[000300030003000]\nIn: [88] [[88]\nOut: [008008008008008] [[008008008008008] [[888888888888888] [[008008008008008] [[008008008008008] [[888888888888888] [[008008008008008] [[008008008008008] [[888888888888888] [[008008008008008] [[008008008008008] [[888888888888888] [[008008008008008] [[008008008008008] [[888888888888888]\nIn: [2222] [[2222] [[2222] [[2222]\nOut: [000020000200002] [[000020000200002] [[000020000200002] [[000020000200002] [[222222222222222] [[000020000200002] [[000020000200002] [[000020000200002] [[000020000200002] [[222222222222222] [[000020000200002] [[000020000200002] [[000020000200002] [[000020000200002] [[222222222222222]\nIn: [44444] [[44444] [[44444] [[44444] [[44444]\nOut: ", "result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nBONUS ITEM!! \u00a0\u00a0\u00a0\u00a0\u00a0These are used for a little bit of extra'shoe-gasm' so feel free to add these to the [00] section so the pattern doesn't end up too much like a giant foot-stomp in the middle of the back of your knees. \u00a0\u00a0\u00a0\u00a0\u00a0(The pattern is slightly different, but the purpose is the same)\nCORE \u00a0\u00a0\u00a0\u00a0Using the 5 stitches you made in the first [CORE] as a pattern, create the same pattern as [00]. Then, take the back and front stitches of the same back and front of the pattern and do the same thing with those, repeating that pattern again and again until you have 7 ( 7 ) loops for the CORE section. \u00a0\u00a0 \u00a0\u00a0\nDo this around the outside of the foot until you like it a little more or until it is the right colour after all the loops are used.\nRepeat the process around the inside of the foot, creating the same pattern as [00].\u00a0Then, take the back and front stitches of the same back and front of the pattern and do the same thing with those, repeating that pattern again ( 7) times. \u00a0\u00a0\nOnce you have the entire 7-loops pattern and the CORE section you've made, move into the outermost section, using the same pattern as [00].\nAgain, do this around the outmost half of the foot until you like it more or until it is the right colour after all the loops are used.\nOnce you have finished the last of the seven patterns, I highly recommend that you put these together, so you can build a very solid heel.\n(The above pattern will work fine, with a single yarn, for a shoe and an insole.)\nIt is best to test the design as you knit them, having the stitches to keep your heel from being so thick that it hurts.\nTo test any heel pattern or stitch patterns I also highly recommend creating your own simple heel pattern.\nInclude 2 1/2-4 stitches per foot, including one or two extra stitches at the top. \u00a0 For the insole use 1 to 2 extra stitches per foot.\nIf you need to, you can even turn the pattern upside down, starting from the back (front) of the heel and counting right down until you have the right length of pattern. I have also seen several patterns like this, with a stitch count of 1 to 1 3/4, then switching to 2 to 1. \u00a0\u00a0\nWhen putting a 2-3-2, or 3-3-3 stitch count heel pattern together, I strongly recommend that you start, as well as end, with a stitch count that keeps the heel in place. \u00a0\n(And again, for your help and feedback, I feel you will really get a kick out of this)\nAnd before anyone asks, YES, you can get 2 foot-loops in a foot, and even", "exp_result": "Out: [000004000004000] [[000004000004000] [[000004000004000] [[000004000004000] [[000004000004000] [[444444444444444] [[000004000004000] [[000004000004000] [[000004000004000] [[000004000004000] [[000004000004000] [[444444444444444] [[000004000004000] [[000004000004000] [[000004000004000]"}, {"taskId": "6ea4a07e.json", "prompt": "Continue the pattern\nIn: [800] [[080] [[000]\nOut: [022] [[202] [[222]\nIn: [003] [[030] [[300]\nOut: [110] [[101] [[011]\nIn: [500] [[550] [[500]\nOut: [044] [[004] [[044]\nIn: [555] [[005] [[000]\nOut: [000] [[440] [[444]\nIn: [080] [[080] [[800]\nOut: [202] [[202] [[022]\nIn: [808] [[080] [[080]\nOut: [020] [[202] [[202]\nIn: [300] [[333] [[003]\nOut: ", "result": "\u00a0[333]\nIn: [000]\nOut: [000]\nIn: \u00a0[000]\nOut:\nIn: \u00a0[000]\nOut: \u00a0[000]\nIn: \u00a0[000]\nOut: \u00a0[000]\nIn: \u00a0[000]\nOut: [000]\nOut:\nIn: \u00a0[000]\nOut:\nIn: \u00a0[000]\nOut:\nIn: \u00a0[000]\nOut:", "exp_result": "Out: [011] [[000] [[110]"}, {"taskId": "7953d61e.json", "prompt": "Continue the pattern\nIn: [4191] [[1914] [[9146] [[4166]\nOut: [41911466] [[19149146] [[91461911] [[41664194] [[66144914] [[64191191] [[41916419] [[19146641]\nIn: [6262] [[6655] [[1112] [[5121]\nOut: [62622521] [[66556512] [[11122611] [[51216615] [[12155166] [[21111162] [[55662156] [[26261252]\nIn: [6776] [[7166] [[9166] [[9161]\nOut: [67766661] [[71667666] [[91667111] [[91616799] [[16199976] [[66191117] [[66176667] [[67761666]\nIn: [4918] [[8418] [[4881] [[1118]\nOut: [49188818] [[84181181] [[48819481] [[11184841] [[81111484] [[18841849] [[81481811] [[81948188]\nIn: [1121] [[6676] [[7621] [[1626]\nOut: [11211616] [[66762722] [[76211666] [[16261671] [[62611761] [[12676661] [[67662272] [[12116161]\nIn: [4644] [[4644] [[7679] [[9497]\nOut: ", "result": "\u00a0[4644]\nIn: [1409] [[140914] [[4644] [[6774]\nOut: \u00a0[21416]\nOut:\nIn: [3743] [[3843] [[5943]\nOut: \u00a0[37431719] [[36343183] [[59431615] [[44172915] [[91908511]\nIn: [946] [[946] [[94617]\nOut: \u00a0[9464517]\nIn: \u00a0[988] [[988]\nOut: \u00a0[988]\nOut\nIn: \u00a0[1409] [[140914]\nOut: \u00a0[14091218]\nOut: \u00a0[61414]\nOut:\nIn: [1409] [[140914]\nOut:\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 767 \u00a0 \u00a0 1222\nIn: [6675] 763 664 567 812 2222 624 2434\nOut:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1345 821\nIn: [6675] 683 575 882\nOut:\nIn: \u00a0 \u00a0[1409]\nOut:\n\u00a0 \u00a0[1409]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 488\nOut: \u00a0 \u00a0566\nIn: [1409]\nOut: \u00a0 \u00a0[140914]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 674\nIn: [6675] 764 763\nOut: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\nOut: \u00a0 \u00a0[1409]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 763\nOut: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\nIn: \u00a0 566\nOut: \u00a0 \u00a0464\nOut:\nIn: \u00a0 \u00a0[1409]\nOut:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 765\nOut: \u00a0 \u00a01222\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1225\nIn: \u00a0[1409] 572 733 675 832\nOut: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\nIn: \u00a0[1409]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 786\nOut: \u00a0\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1020\nIn: [6675] \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 816\u00a0\nOut: \u00a01491\nIn: [6675] \u00a0\u00a0 546\nOut: 1621\nFor example, on the left side, \u00a0this is the pattern, written right to left as shown.\nOn the right side, the pattern is a very simple 2-row, back and forth, pattern.\n4:\n4:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 863 \u00a0 \u00a0 \u00a0\u00a0 \u00a0 832 \u00a0 \u00a0 \u00a0\u00a0 \u00a01222\n4/4 is 4 in the pattern, and 1 in the border.\nIn: 3:\n5:\n5:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 474\u00a0\u00a0\u00a0\u00a0 \u00a01491\n5/8 is 5/8 in the pattern, and 1 in the border.\nIn: 4:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 464 \u00a0\u00a0 \u00a0 \u00a0 832\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 3/4\nIn: 4:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 472 \u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 832\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2/4\nIn: 4: 3:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 474 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0 \u00a0 1222\n", "exp_result": "Out: [46444497] [[46444479] [[76796664] [[94974479] [[79499744] [[97674666] [[44649744] [[44647944]"}, {"taskId": "8719f442.json", "prompt": "Continue the pattern\nIn: [050] [[555] [[050]\nOut: [000000050000000] [[000000555000000] [[000000050000000] [[000000555000000] [[000000555000000] [[000000555000000] [[050555555555050] [[555555555555555] [[050555555555050] [[000000555000000] [[000000555000000] [[000000555000000] [[000000050000000] [[000000555000000] [[000000050000000]\nIn: [050] [[550] [[005]\nOut: [000000050000000] [[000000550000000] [[000000005000000] [[000000555000000] [[000000555000000] [[000000555000000] [[050555555000000] [[550555555000000] [[005555555000000] [[000000000555050] [[000000000555550] [[000000000555005] [[000000000050000] [[000000000550000] [[000000000005000]\nIn: [500] [[050] [[005]\nOut: [000500000000000] [[000050000000000] [[000005000000000] [[500555000000000] [[050555000000000] [[005555000000000] [[000000555000000] [[000000555000000] [[000000555000000] [[000000000555500] [[000000000555050] [[000000000555005] [[000000000500000] [[000000000050000] [[000000000005000]\nIn: [050] [[050] [[505]\nOut: ", "result": "000000000000000000000000000000000000000000000000000000000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000\nIn: 000000000000000000000000000020000000000000000000000\nOut: 00000000000000808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080\nOut: 00000000000000000000000000000000000000000000000000000000\nIn: [0000] 000000000000000000000000000000000000000000000000000000000000000000000000000000\nOut: 0000000000000000000000000000000000000000000000000000000000000000000000\nIn: [01] 0000000000000000000000000000000000000000000000000000000000000000000000\nOut: 000000000000000000000000000000000000000000000000000000000000000000000000000000\nIn: [00000] 00000000000000000000000000000000000000000000000000000000000000000000\nOut: 000000000000000000000000000000000000000000000000000000000000000000000000\nIn: [00] 00000000000000000000000000000000000000000000000000000000000101010101000\nOut: 000000000000000000000000000000000000000000000008\nIn: [00] 00000000000000000000000000000000000000000000000000000000000000000000\nOut: 00000000000000000000000000000000000000000000000000000000000\nOut: 000000000000000000000000000000\nIn: [0000] 000000000000000000000000000000000000000000000000100000\nOut: 00000000000000000000000000000000000000000000000000000000200000000\nIn: [001] 00000000000000000000000000000000000000000000000000000000000000000000000080080\nOut: 0000000000000000000000000000000000000000000000000000000000000009\nIn: [001] 00000000000000000000000000000000000000000000000000000000000000000000010\nOut: 000000000000000000000000000000000000000000000000000000000000000000000040\nIn: [001] 00000000000000000000000000000000000000000000000000000000000000000000000\nOut: 0000000000000000000000000000000000000000000000000000000000000000000000000\nOut: 0000000000000000000000000000000000000000000000000000000000000101\nIn: [0001] 000000000000000000000000000000000000000000000000000000000\nOut: 000000000000000000000000000000000000000000000000000001111100003\nIn: [0001] 0000000000000000000000000000000000100000\nOut: 00000000000000000000000000000000000000000001\nIn: [0002] 000000000000000000000000000000000000000000000000000000\nOut: 00000000000000000000000000000000000000010000\nIn: [0002] 000000000000000000000000000000000000000000000000000000\nIn: [0004] 0000000000000000000000000000000000000000000000000050000\nOut: 00000000000000000000000000000000000000000000000000000101000000\nIn: 000000000000000000000000000000000000000000011111000000\nIn: [0004] 00000000000000000000000000000000000000000001\nOut: 0000000000000000000000000000000000000001\nIn: [0004] 000000000000\nIn: [00] 00000000000000000000000000000000000000000000000010\nIn: [00] 000000000000000000000000000000000000000000000000100\nOut: 0000000000000000000000000000000000000000000000000000115501001011111\nIn: [00] 000000000010000011111\nIn: 0000000000000000000000000000000000000000\nIn: [0004] 0000000000000000000000000000000000000000\nIn: [0001] 0000000000000000000000000000000000000000\nOut: 00000000000000000000000000000000000000000000010100000000\nIn: [0001] 00000000000000000000000000000000000000000000000\nOut: 00000000000000000000000000000000000000000001010100000000000\nIn: [0004] 0000000000000000000000000000000000000000\nIn: 00000000000000000000000000000000000000000000000000000\nOut: 000000000000000000000000000000000000000000000040\nIn: 0000000000000000000000000000000000000000000000010101001011111\nIn: [00000000] 00000000000000000000000000000000000101010101100100010001010111111\nIn:", "exp_result": "Out: [000000050000000] [[000000050000000] [[000000505000000] [[000000555000000] [[000000555000000] [[000000555000000] [[000000555000000] [[000000555000000] [[000000555000000] [[050555000555050] [[050555000555050] [[505555000555505] [[000050000050000] [[000050000050000] [[000505000505000]"}, {"taskId": "8b28cd80.json", "prompt": "Continue the pattern\nIn: [000] [[040] [[000]\nOut: [404444444] [[404000004] [[404044404] [[404040404] [[404040404] [[404000404] [[404444404] [[400000004] [[444444444]\nIn: [000] [[500] [[000]\nOut: [555550505] [[000050505] [[555050505] [[505050505] [[505050505] [[005050505] [[555050505] [[000050505] [[555550505]\nIn: [030] [[000] [[000]\nOut: [303030303] [[303000303] [[303333303] [[300000003] [[333333333] [[000000000] [[333333333] [[000000000] [[333333333]\nIn: [000] [[008] [[000]\nOut: [808080888] [[808080800] [[808080808] [[808080808] [[808080808] [[808080800] [[808080888] [[808080000] [[808088888]\nIn: [007] [[000] [[000]\nOut: [707070707] [[707070700] [[707070777] [[707070000] [[707077777] [[707000000] [[707777777] [[700000000] [[777777777]\nIn: [000] [[000] [[006]\nOut: ", "result": "\u00a0[077] [077]\nOut: \u00a0[0607] [0607]\nOut: \u00a0[1213] \u00a0[1213]\nIn: [000] [[007]\nOut: [00] [00]\nIn: [000] [[07]\nOut: [000] [000]\nOut: [005] [00]\nIn: [000] [[006]\nOut: [00]\nIn: [000] [[007]\nOut: [00]\nOut: [0] [0]\nOut: [00] [00]\nIn: \u00a0[000] [000]\nIn: \u00a0[000] [000]\nOut: [00] [00]\nIn: \u00a0[000]\nOut: \u00a0[0001] \u00a0[0001]\nOut: \u00a0[000]\nOut: \u00a0[000]\nOut: \u00a0[002] [002]\nOut: [00]\nIn: [000]\nOut: \u00a0[005]\nIn: [(00001)] [00]\nIn: [000] [000]\nOut: [00]\nIn: [000] [000]\nOut: \u00a0[0001] \u00a0[0001]\nOut: [00]\nIn: \u00a0[000] [000]\nOut: [00]\nIn: \u00a0[000] [000]\nOut: \u00a0[00]\nIn: \u00a0[000]\nOut: [00] [00]\nAs an example, this is the pattern that results\nIn: [000] [[040] [[00]\nOut: \u00a0[0443] [[00]\nIn: \u00a0[000] [[050]\nOut: [00]\nIn: \u00a0[000] [[050]\nOut: \u00a0[0000] [[00]\nIn: [000] [[040] [[00]\nOut: \u00a0[02] [[00]\nIn: \u00a0[000] [[080]\nOut: [00]\nIn: \u00a0[000] [[040] [[00]\nOut: \u00a0[0222] [[00]\nOut: \u00a0[00] [00]\nIn: \u00a0[000] [[040]\nOut: [00]\nIn: \u00a0[000] [000]\nOut: [01] [00]\nIn: \u00a0[0001]\nOut: \u00a0[000] [[056]\nOut: [00]\nOut: \u00a0[00] [00]\nIn: \u00a0[000]\nOut: \u00a0(00)] [00]\nOut: [00] [00]\nIn: \u00a0[000] [[000]] [00]\nOut: [00]\nOut: [00] [00]", "exp_result": "Out: [606666666] [[606000000] [[606066666] [[606060000] [[606060666] [[606060600] [[606060606] [[606060606] [[606060606]"}, {"taskId": "8ba14f53.json", "prompt": "Continue the pattern\nIn: [044466666] [[040460006] [[044460006] [[000066666]\nOut: [400] [[666] [[666]\nIn: [777000000] [[707708888] [[700708008] [[777708888]\nOut: [777] [[880] [[000]\nIn: [999905555] [[900905005] [[990905055] [[099905550]\nOut: [999] [[555] [[000]\nIn: [333301110] [[300301010] [[300301010] [[333301110]\nOut: [333] [[300] [[110]\nIn: [888066600] [[808060600] [[888066600] [[000000000]\nOut: [800] [[600] [[000]\nIn: [777088800] [[707080880] [[707080080] [[777088880]\nOut: [770] [[888] [[000]\nIn: [444000777] [[404440707] [[400040777] [[444440000]\nOut: ", "result": "\u00a0[[444] [000000]\nOut: \u00a0[[444] [[444]\nOut: \u00a0[[444] [[444]\nOut: \u00a0[[4000]\nIn: \u00a0[[000000]\nOut: \u00a0[[444]\nOut: \u00a0[[444]\nCaveat: The above tutorial isn't fully functional, and likely doesn't work on any modern phone. But I'm going to take a stab at trying to write a code which does an approximation of this.\nThe algorithm is really simple. Consider all possible numbers starting from 0 using the formula. \u00a0The idea is to take each digit of the number and add it to the previous digit of the number, and repeat the process for all the remaining digits. This gives us the same number in one step.\nThis technique works with any number in any order, so to avoid duplicating we do step by step until we can fit them all into a number. So if you multiply the first letter of the first number with the next letter of the second number, add 3 to the second, 1 to the third, 1 to the fifth, and so on.\nThis will give us a number in each of those cases, like\n[4,4,4] [4,4,4] [6,6,6] [7,7,7] [8,8,8] [9,9,10] [11,11,11]\n...but note that the letters aren't evenly distributed in the pattern; at the end we need to use all the letters we've got instead of shuffling them all together.\nThe above might not seem very efficient, but it means we can go one level deeper into our numbers and produce more and bigger numbers with less memory. This is called a depth first search. \u00a0It takes only few instructions (it might even be in one!), and it's one of the fundamental algorithms in computer science.\nWith this solution, we have something like\u00a0\n[4,6,6] [6,7,7] [8,9,9] [11,12,12] [12,25,25] [9,26,26]\n[7] [7] [7] [7] [7] [7] [4,7,9] [4,7,9] [4,6,6] [4,7,7] [4,7,7] [2,5,6] [7]\nSo how does\u00a0 the\u00a0 algorithm get all these numbers?\nTo get to the first three digits, we need to look at the next two digits in reverse order. The problem is that we don't need to put the next two digits in first, but we do need to put the 3rd and 4th. \u00a0And since we are able to look at the 3rd and 4th digits from below anyway, they get put over. \u00a0This is actually the second level of depth first search.\nSince the next two digits cannot be less than 32 bits wide, and since 32 bits is enough to store 2^32 numbers, we pick a value of. This value depends on the length of the number in question. So if, then we pick the third digit of the 3rd and 4th into the base, and the fourth digit of the 5th into -3. Since all these are between -3 and 3, we pick them as -32, -31, -30, -29, etc. \u00a0The size of the number in the last step comes from the maximum size that can be computed with a 32 bit word. \u00a0For example:\na=3 b=1 c=4", "exp_result": "Out: [444] [[400] [[700]"}, {"taskId": "8e2edd66.json", "prompt": "Continue the pattern\nIn: [990] [[009] [[090]\nOut: [000000009] [[000000990] [[000000909] [[009009000] [[990990000] [[909909000] [[009000009] [[990000990] [[909000909]\nIn: [880] [[088] [[080]\nOut: [000000008] [[000000800] [[000000808] [[008000000] [[800000000] [[808000000] [[008000008] [[800000800] [[808000808]\nIn: [707] [[777] [[070]\nOut: [000070000] [[000000000] [[000707000] [[000000000] [[000000000] [[000000000] [[070000070] [[000000000] [[707000707]\nIn: [110] [[010] [[101]\nOut: ", "result": "\u00a0[000] [[0100]\nin: \u00a0[00000000]\nOut: \u00a0[000000000000]\nIn: [000]\nOut: \u00a0[00000003]\nIn: [0000009]\nOut: \u00a0[00009999] \u00a0The following is the complete pattern:\nIn: \u00a001400019001 0110101100101010101010000000008 000009010008 000000000009010008 00000000 00000000000090000\nOut: \u00a001400010\nIn: \u00a000000000000000\nOut: \u00a000000007\nIn: \u00a008000000\nOut: 00001001 [00000000999999] \u00a0The following is the complete pattern:\nIn: \u00a001000000\nOut: 00000\nIn: \u00a000000001\nOut: 00000000\nIn: \u00a0000000000000\nOut: \u00a000000\nIn: \u00a099991\nOut: \u00a000000000000000\nOut: \u00a000000000\nIn: \u00a000000000\nOut: \u00a00000009\nIn: \u00a098001\nOut: \u00a000000101000000\nOut: \u00a000000101000000\u00a099991\nIn: \u00a099990000\nOut: \u00a000000000\nIn: \u00a000000000\nOut: \u00a000000007 [00]\nIn: \u00a001000000\nOut: 01900001\nOut: \u00a000000000000000\nOut: \u00a0000100001\nOut: \u00a000000101000000 [000000200]\nIn: \u00a000000101000000 \u00a000100011000\nOut: \u00a00010001000\nIn: \u00a099990000 [00]\nIn: \u00a001000000\nOut: 011000000\nOut: 1010100001\nOut: \u00a000000000000000 1000\nOut: \u00a000000100\nIn: \u00a0000100001 [0000008000] [0000002000] [0000000000]\nThe following is the complete pattern:\nIn: \u00a001000000\nOut: 00010100010001011\nOut: 0010000000\nIn: \u00a0000100001 [000000001000000] [0000000000]\nOut: \u00a000000100 [000000001000000]\nOut: 00001000\nIn: \u00a00010001000\nOut: \u00a0000000001000000 [000000000] [0000000] [000000000] [0000010002000000]\nIn: \u00a001000000\nOut: 0000000001001000\nOut: 0010000000 [0000009]\nIn: \u00a001000000\nOut: 0010001000\nOut: \u00a0000000001000000 [000000000] [0000000] [000000000]\nIn: \u00a0000000010100001\nOut: 0100001000\nOut: \u00a0000000001000000 [000000000] [0000000] [000000000] [0000000]\nIn: \u00a000000000000000010 [000000000]\nOut: 01900001\nOut: \u00a0000000001000000 [000000000]\nIn: \u00a0010000000100001\nOut: 10100100000\nOut: \u00a0000000001000000 [000000000] [0000000] [000000000] [0000000] [000000000]\nIn: \u00a0000100001\nOut: \u00a00000010000000\nOut: \u00a000000000000000\nOut: \u00a01000000011100001\nOut: \u00a000000000000000\nOut: \u00a00111010010010101011\nOut: \u00a012000001000100090400\nIn: \u00a0000001001010110100001110110002001000110110001010101001\nOut: \u00a00100000008\nIn: \u00a01010100000111110000011000100100000010110000010\nOut: \u00a010110010001100010000000110001010001010010000000001110101100010110110011000101000000011111\n", "exp_result": "Out: [000000001] [[000000101] [[000000010] [[001000001] [[101000101] [[010000010] [[000001000] [[000101000] [[000010000]"}, {"taskId": "9110e3c5.json", "prompt": "Continue the pattern\nIn: [0410016] [[0010000] [[1100110] [[0100011] [[0010020] [[1010107] [[1110410]\nOut: [008] [[880] [[080]\nIn: [2002205] [[0220002] [[0100000] [[0000209] [[0900002] [[0021008] [[2002200]\nOut: [000] [[888] [[000]\nIn: [0400413] [[3343037] [[3000103] [[0030300] [[3003303] [[3030303] [[3330423]\nOut: [088] [[080] [[080]\nIn: [1010700] [[1191010] [[0011020] [[0000301] [[0401001] [[0010208] [[0010731]\nOut: [008] [[880] [[080]\nIn: [0303530] [[0033000] [[8000003] [[3439303] [[0093133] [[0333030] [[0000003]\nOut: [088] [[080] [[080]\nIn: [0002202] [[0229220] [[0502460] [[2000092] [[0002200] [[8029063] [[0202024]\nOut: [000] [[888] [[000]\nIn: [0020153] [[0029020] [[2224200] [[0202720] [[2200226] [[0220200] [[5042022]\nOut: [000] [[888] [[000]\nIn: [0081101] [[5110110] [[0101001] [[1020060] [[6011500] [[0030005] [[0100201]\nOut: ", "result": "??????\nIn: [0410800] [[0081101] [[8030204] [[1000111] [[0100011] [[0040010] [[2000011] [[2000112]\nOut:???????\nIn: [0410018] [[0002420] [[000] [[809908]\nOut: [041001] [[2000122] [[8030301] [[1003302] [[0011003]\nOut:???????\nIn: [0321020] [[0033000] [[8000003] [[3439306]\nOut: [0501056] [[0033004] [[8000003]\nOut: [0510001] [[0810112] [[8011023] [[2000121] [[0101000]\nOut:???????\nIn: [0407100] [[100] [[80]\nIn: [0403105] [[20]\nOut:???????\nIn: [0408100] [[100] [[100]\nIn: [0408100] [[100] [[00]", "exp_result": "Out: [008] [[880] [[080]"}, {"taskId": "a59b95c0.json", "prompt": "Continue the pattern\nIn: [979] [[967] [[766]\nOut: [979979979] [[967967967] [[766766766] [[979979979] [[967967967] [[766766766] [[979979979] [[967967967] [[766766766]\nIn: [344] [[333] [[344]\nOut: [344344] [[333333] [[344344] [[344344] [[333333] [[344344]\nIn: [821] [[183] [[213]\nOut: [821821821821] [[183183183183] [[213213213213] [[821821821821] [[183183183183] [[213213213213] [[821821821821] [[183183183183] [[213213213213] [[821821821821] [[183183183183] [[213213213213]\nIn: [777] [[722] [[772]\nOut: [777777] [[722722] [[772772] [[777777] [[722722] [[772772]\nIn: [232] [[332] [[221]\nOut: [232232232] [[332332332] [[221221221] [[232232232] [[332332332] [[221221221] [[232232232] [[332332332] [[221221221]\nIn: [432] [[214] [[312]\nOut: ", "result": "~~[[211231422] ~~\nIn: [521] [[18]\nOut: [212]\nOut: ~~[[210] ~~\\\nIn: [1235] [[212] ~~\nOut: ~~[20]\nOut: ~~[161377] ~~\nIn: [33] [[1621] ~~\nOut: [33333] ~~\nIn: [1636] ~~\nOut: [5221] ~~\nOut: ~~|\nIn: [9]\nOut: ~~\nOut: ~~|\n[...]\nThe output of the following is the number of occurrences of that pattern (plus one). A repetition of pattern 10 is called a prefix. It's easy to see the effect of prefixes. The first four iterations of prefixes produce all three numbers, and the fifth iteration only produces the first two numbers.\nIn: 1069 ~~\\ 619 ~~10 ~~1066 ~~814 ~~632 ~~\nIn: [827] ~~| 1147 ~~| 1433 ~~| 1666 ~~| 1712 ~~|\n...\nIn: [2857] ~~| 3247 ~~| 3566 ~~| 4369 ~~| 4793 ~~|\n[...]\nThe pattern with a prefix, if repeated enough, will add every other value into the string. If the last element (the end of the string), is not a numerical value (as expected by regex), the pattern repeats with its prefix as the last pattern and a new value is added to the string.\nIt's very useful, for example, to have a string that contains a random number between 0 and 9 (which, if we just use the ASCII range of 0 to 255, is 1-255). To make this happen, we can construct this string at some point in the string by writing 1n999.\nBut that's too complicated, so let's simplify. This string is the alphabet. An alphabet, as you might recall, is a collection of 1-3 characters. But let's look first at the letters in which there are 4 characters.\nIn: aa ab ac acb ad\nIn:, af, ag an, \u00a0agb anac afa, agb\nIn: aa, ab, ac, bb, ad, ag, \u00a0aga, ai anag ab,, \u00a0ab aa ac abac, aa acb, af, \u00a0ag ai anac,, ai agb anac,, \u00a0agb\nIn: a, e, b, c, d, ee, bd, ab,, \u00a0ae, ee, bf, ag,, e ee ee, b,, \u00a0bc,, ee ae eb ebf,,, \u00a0bf ae aeaf,,, \u00a0ae\nIn: aa, f, ab, ad, af, ad, bb, ef, ad,, ef aa ef aeaf,,,, af, ee ee\nIn: aa,", "exp_result": "Out: [432432432432] [[214214214214] [[312312312312] [[432432432432] [[214214214214] [[312312312312] [[432432432432] [[214214214214] [[312312312312] [[432432432432] [[214214214214] [[312312312312]"}, {"taskId": "a8610ef7.json", "prompt": "Continue the pattern\nIn: [888000] [[008808] [[080000] [[880088] [[808888] [[000088]\nOut: [555000] [[002202] [[020000] [[520055] [[502252] [[000055]\nIn: [880880] [[808880] [[008888] [[080088] [[880808] [[800808]\nOut: [250250] [[205250] [[005522] [[050022] [[250205] [[200205]\nIn: [080888] [[888880] [[808080] [[088808] [[880880] [[880008]\nOut: [020552] [[225220] [[502050] [[052505] [[220220] [[520002]\nIn: [088008] [[888000] [[888080] [[808808] [[880000] [[888880]\nOut: [052005] [[225000] [[252050] [[202505] [[220000] [[552550]\nIn: [000808] [[888088] [[888808] [[800088] [[080008] [[888088]\nOut: ", "result": "\u00a0[[002222] [[200205] [[242200] [[000200] [[222222]\nOut: [444444] [[333333] [[383333] [[283333] [[484848] [[343434] [[484848]\nOut: [4000000] [[40000000] [[40000000] [[000088] [[500088] [[333333]\nOut: [484444] // [[444444] // [[444444] // [[444444] // [[444444] // [[444444] //\nOut: [283333] // [[588888] // [[588888] // [[1118189] // [[588888]\nOut: \u00a0[[002222] [[205250]\nIn: \u00a0[[000188]\nOut: 0000000000001000!\n[[]] [[]] [[]] [[]] [[]] [[]] [[]] [[]] [[]] [[]] [[]] [[]] [[]]\nIn: \u00a0[[002222] [[200205]\nOut: \u00a00 // //\nOut: //\n[[]] [[]] [[]] [[]] [[]] [[]] [[]] [[]] [[]] [[]] [[]] [[]] [[]]\nIn: \u00a0[[000188]\nOut: 00000000000000000!\nIn: \u00a0[[000188]\nOut: 000000000018!\nIn: \u00a00000000000000000!\nIn: \u00a0[[000200]\nOut: \u00a0(?{$2 = 6})(?{$1 = 3}){$2 = 6}\nIn: \u00a0[[000200]\nOut: 00000000000000000!\nIn: \u00a0[[002222]\nIn: 00000000000000000!\nIn: \u00a0[[002222]\nOut: 00000000000000000!\nIn: \u00a0[[002222]\nOut: 00000000000000000!\nIn: 00000000000000000!\nIn: \u00a0[[000200]\nOut: 00000000000000000!\nIn: \u00a0[[002222]\nOut: 00000000000000000!\nIn: \u00a0[[002222]\nIn: 00000000000000000!\nIn: \u00a0[00000000]\nIn: 00000000000000000!\nIn: \u00a0[000000]\nIn: \u00a0[000000]\nIn: \u00a0[000000]\nIn: \u00a0[000000]\nIn: \u00a0[000000]\nIn: \u00a0[000000]\nOut: \u00a0[000000]\nIn: \u00a0[000000]\nIn: \u00a0[000000]\nIn: \u00a0[000000]\nIn: \u00a0[000000]\n[/font]\nThe final line in both files has an \"saved\" field, allowing for a new color to be selected for the next round. This is done by changing the first number value in the \"Saved\" section up to the next number value. If the number is larger than the number of frames that the file has, it will be saved when the next file is generated!\n[/font]\nNext Steps\nBelow are further steps to take:\n1. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Download both files (either one or both!) and open in your favorite drawing program. Save as PNGs. A simple text in either file is enough to make the change and we're all set!\n2. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Create a new layer, name your layer \"cubic\" and set the fill to a bright grey. Then add the following code", "exp_result": "Out: [000802] [[828082] [[288802] [[200082] [[020002] [[888082]"}, {"taskId": "aa18de87.json", "prompt": "Continue the pattern\nIn: [00030000] [[00303000] [[03000300] [[30000030]\nOut: [00030000] [[00323000] [[03222300] [[32222230]\nIn: [04000400] [[00404000] [[00040000]\nOut: [04222400] [[00424000] [[00040000]\nIn: [080000000800] [[808000008080] [[000800080008] [[000080800000] [[000008000000]\nOut: [082222222800] [[828222228280] [[000822282228] [[000082800000] [[000008000000]\nIn: [10000000] [[01000001] [[00100010] [[00010100] [[00001000]\nOut: [10000000] [[01222221] [[00122210] [[00012100] [[00001000]\nIn: [006000006] [[060600060] [[600060600] [[000006000]\nOut: ", "result": "???????????????????????\nIn: [00006000] [[00009000]\nOut: [00009000] [[10000]\nOut:????????????????\n- The following pattern gives the first 3 bytes of the hexadecimal value 00000100 (hex-encoded): 00000100 00000000 00000000 00000000 00000100 00000000 00000000\n- The following pattern gives the first 4 bytes of the hexadecimal value 03060000: 03060000 11111111 11111111 11111111 11111111 11111111\n- The following pattern gives the first 8 bytes of the hexadecimal value 04060000: 04060000 11111111 11111111 11111111 11111111 11111111\n- The following pattern gives the first 16 bytes of the hexadecimal value 046110000: 046110000 11111111 11111111 11111111 11111111 11111111\n- The following pattern gives the first 32 bytes of the hexadecimal value 0461100: 0461100 11111111 11111111 11111111 11111111 111111111\n- The following pattern gives the first 64 bytes of the hexadecimal value 04611500: 04611500 11111111 11111111 11111111 1111111111 1111111111\n- The following pattern gives the first 128 bytes of the hexadecimal value 04611200: 04611200 11111111 11111111 1101111111 1111111111111 111111111\n- The following pattern gives the first 256 bytes of the hexadecimal value 04611400: 04611400 11111111 11111111 11111111 1111111111 11111111110\n- The following pattern gives the first 512 bytes of the hexadecimal value 04611800: 04611800 11111111 11111111 1111111111 11111111111111 111111111111\n- The following pattern gives the first 1,024 bytes of the hexadecimal value 04612000: 04612000 11111111 11111111 1101111111 1111111111111 11111111110\nIn: [00400000] [[0001]\nIn: [00030000] [[0031000]\nOut: [00030000] [[00322000] [[03000300]\nOut: [10000000] [[00100010]\nOut: [006000006] [[060600060]\nOut:????????????????????????\nIn: [00006000] [[00000001]\nOut: [00000000]\nOut:????????????????????????????????????????\nIn: [00000001] [[00001000]\nOut: [00001000] [[00000]\nOut:????????????????????????????????????????\nIn: [00001000] [[00000]\nOut:????????????????????????????????????????????????\nIn: [00000] [[00000]\nOut:????????????????????????????????????????????????\nIn: [00000] [[00000]\nOut:????????????????????????????????????????????????\nIn: [00000] [[00000]\nOut:????????????????????????????????????????????????\nThese three patterns correspond to:\n- 00000100 002020101 002072020 0031051101 0031041101 0031051101 0031051101 0031051101 0031051101 0031051101 002041100 002115000 00260000??????????????????????????????????????????????????\n- 002020101 002072020 0031051101 00", "exp_result": "Out: [006222226] [[062622260] [[622262600] [[000006000]"}, {"taskId": "ad7e01d0.json", "prompt": "Continue the pattern\nIn: [501] [[520] [[555]\nOut: [501000000] [[520000000] [[555000000] [[501000000] [[520000000] [[555000000] [[501501501] [[520520520] [[555555555]\nIn: [10501] [[02220] [[50505] [[02220] [[10501]\nOut: ", "result": "??????\nIn: [05] [[10] [[20] [[30] [[42] [[50]\nOut:??????\nIn: [01] [[05]\nOut: [01000000]\nIn: [00]\nOut:\nIn: [10000000]\nOut:\nOut:", "exp_result": "Out: [0000000000105010000000000] [[0000000000022200000000000] [[0000000000505050000000000] [[0000000000022200000000000] [[0000000000105010000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[1050100000105010000010501] [[0222000000022200000002220] [[5050500000505050000050505] [[0222000000022200000002220] [[1050100000105010000010501] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000105010000000000] [[0000000000022200000000000] [[0000000000505050000000000] [[0000000000022200000000000] [[0000000000105010000000000]"}, {"taskId": "ad7e01d0.json", "prompt": "Continue the pattern\nIn: [251] [[050] [[251]\nOut: [000251000] [[000050000] [[000251000] [[000251000] [[000050000] [[000251000] [[000251000] [[000050000] [[000251000]\nIn: [10501] [[02220] [[50505] [[02220] [[10501]\nOut: ", "result": "\u00a0[000050000]\nIn: \u00a0[50505] [[02120] [[50205] [[02120] [[51000] \u00a0\nOut: \u00a0[02120]\n\u00a0 \u00a0\nIn: [1201]\n\u00a0 \u00a0\nOut: \u00a0[50205]\n\u00a0 \u00a0\nIn: \u00a0[50215] \u00a0\nOut: \u00a0[003500]\nIn: [20]\n\u00a0 \u00a0\nOut: \u00a0[50505]\n\u00a0\nIn: [01]\n\u00a0 \u00a0\n\u00a0 \u00a0\nOut: [00022000]\n\u00a0 \u00a0\nIn: [0250]\n\u00a0 \u00a0\n\u00a0Out: [003500]\nIn: [0010200]\nOut: \u00a0[2511]\n\u00a0\nOut: \u00a0[20]\n\u00a0 \u00a0\nOut: \u00a0[51000]\n\u00a0 \u00a0\nIn: [1250]\n\u00a0 \u00a0\nOut: \u00a0[50205]\n\u00a0\nIn: [01]\n\u00a0 \u00a0\nOut: [22200]\nOut: \u00a0[50205]\n\u00a0 \u00a0\nIn: [51000]\n\u00a0\u00a0\u00a0\n\u00a0Out: [22200]\n\u00a0 \u00a0\nOut: \u00a0[50205]\n\u00a0 \u00a0\n\u00a0Out: [003500]\n\u00a0In:\n\u00a0Out:\n\u00a0Out: [4250]\n\u00a0\u00a0\u00a0\nOut: [2500]\n\u00a0Out: \u00a0\nIn: [0001]\n\u00a0 \u00a0\nOut:\n\u00a0 \u00a0\nIn: \u00a0 \u00a0 Out:\n\u00a0 \u00a0\nOut:\n\u00a0In: \u00a0 \u00a0 Out:\n\u00a0 \u00a0\n1: [2510] \u00a0 3: [2510] \u00a0 7: [2500]\n\u00a0\u00a0\u00a0\nOut: \u00a0\nIn: \u00a0 \u00a0 Out: \u00a0 \u00a0 Out: \u00a0 \u00a0 \u00a0 \u00a0", "exp_result": "Out: [0000000000105010000000000] [[0000000000022200000000000] [[0000000000505050000000000] [[0000000000022200000000000] [[0000000000105010000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[1050100000105010000010501] [[0222000000022200000002220] [[5050500000505050000050505] [[0222000000022200000002220] [[1050100000105010000010501] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000105010000000000] [[0000000000022200000000000] [[0000000000505050000000000] [[0000000000022200000000000] [[0000000000105010000000000]"}, {"taskId": "ae58858e.json", "prompt": "Continue the pattern\nIn: [00000000] [[22000220] [[02200220] [[00000022] [[00000000] [[02220000] [[00000200] [[00220000] [[20220022] [[20000000]\nOut: [00000000] [[66000660] [[06600660] [[00000066] [[00000000] [[02220000] [[00000200] [[00660000] [[20660022] [[20000000]\nIn: [000000000000] [[222000200000] [[022000220000] [[022200220020] [[000000000020] [[000002000000] [[020022000222] [[000000000222] [[002000020020] [[000002200000]\nOut: [000000000000] [[666000600000] [[066000660000] [[066600660020] [[000000000020] [[000002000000] [[020022000666] [[000000000666] [[002000020060] [[000002200000]\nIn: [220002] [[220002] [[000200] [[020000] [[000202] [[022200]\nOut: [660002] [[660002] [[000200] [[020000] [[000602] [[066600]\nIn: [000000000] [[022000000] [[002000220] [[000002200] [[000000000] [[000200000] [[022000000] [[000000020] [[000000020] [[000200000]\nOut: [000000000] [[022000000] [[002000660] [[000006600] [[000000000] [[000200000] [[022000000] [[000000020] [[000000020] [[000200000]\nIn: [00002220] [[22000000] [[02200220] [[02000220] [[00000000] [[20220002]\nOut: ", "result": "00000000000000000000000000000000\nThe end result of the pattern is to generate the following pattern:\nOut: 00000000000000000000000000000000\n[00000022]\n[02220000]\n[00002220]\n[00002220]\nIn: 00000000000000000000000000000000\nWith C/C++, that pattern corresponds to the following expression:\nchar * p = malloc ( sizeof ( char )) // malloc overwrites previous'malloc' call with 'new'. printf ( \"%s\n\n\", p ); // printf outputs \"\\0\". malloc ( sizeof ( str ) / 8 );\n[2700] \u00a0\nOut: 00000000000000000000000000000000\n[000000]\n[02220000]\n[00002022]\n[00002022]\nIn: 00000000000000000000000000000000\nIn: 00000000000000000000000000000000\nYou are still able to run these programs. \u00a0\nIn: 00000000000000000000000000000000\nOut: 00000000000000000000000000000000\nIn: 00000000000000000000000000000000\nYou are not able to create an allocation in memory which is a valid pointer to char, and you have no opportunity to create a memory which is a valid pointer to char and the result will be undefined. To prevent this, you should make sure the pointer you use to write data into the pointer goes from the memory pointed to by the pointer, not the other way around. \u00a0\nYou should also check that you will not get a crash when using malloc from a non-portable language because a pointer will always be written from the portable language to the address, and the address will always be in memory in a non-portable language.\nThe output from my test program:\nIn: 00000000000000000000000000000000\n[00000022] \u00a0 [222222] \u00a0 [222222] \u00a0 [222222]\nIn: 00000000000000000000000000000000\nOut: 00000000000000000000000000000000\n[222222]\n[222222]\nOut: 00000000000000000000000000000000\nHowever, in my test program, the address is not in memory while it should be. The correct code would look like this:\nchar * ptr = str ; void * p = malloc ( sizeof ( char )) \u00a0 malloc ( sizeof ( str ) / 8 );\nvoid* \u00a0 p = p ; \u00a0 ptr = malloc ( sizeof ( char ) / 8 );\nAs you can see, the pointer you used to point the pointer, is not in memory, but the pointer is still writing to it. \u00a0 This is why I made an attempt to create an allocation for some strings. \u00a0\nIn: 00000000000000000000000000000000\n[222222] \u00a0 [222222] \u00a0 [222222] \u00a0 [222222] \u00a0 [222222]\nOut: 00000000000000000000000000000000\n[222222]\n[222222]\nIn: 00000000000000000000000000000000\nOut: 00000000000000000000000000000000\n[222222]\n[222222]\nIn: 00000000000000000000000000000000\nOut: 00000000000000000000000000000000\n[222222]\nIn: 00000000000000000000000000000000\nOut: 00000000000000000000000000000000\n[222222]", "exp_result": "Out: [00002220] [[66000000] [[06600660] [[06000660] [[00000000] [[20220002]"}, {"taskId": "b1fc8b8e.json", "prompt": "Continue the pattern\nIn: [000800] [[008880] [[080880] [[888000] [[088000] [[000000]\nOut: [08008] [[88088] [[00000] [[08008] [[88088]\nIn: [888800] [[888888] [[088088] [[088000] [[000000] [[000000]\nOut: [88088] [[88088] [[00000] [[88088] [[88088]\nIn: [000800] [[088880] [[888880] [[088000] [[000000] [[000000]\nOut: [08008] [[88088] [[00000] [[08008] [[88088]\nIn: [008800] [[888800] [[888888] [[008888] [[000000] [[000000]\nOut: [88088] [[88088] [[00000] [[88088] [[88088]\nIn: [000800] [[088800] [[888080] [[088880] [[000000] [[000000]\nOut: [08008] [[88088] [[00000] [[08008] [[88088]\nIn: [008800] [[888800] [[880880] [[088880] [[088000] [[000000]\nOut: ", "result": "??????????\nIn:???????????\nIn:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nIn:???????????\nOut:???????????\nIn:???????????\nOut:???????\nIn:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????????\nOut:???????\nIn:??????\nOut:???????\nOut:???????\nOut:???????\nOut:???????\nOut:???????\n\u00a0 \u00a0 \u00a0 \u00a0 I wonder what this one is.", "exp_result": "Out: [88088] [[88088] [[00000] [[88088] [[88088]"}, {"taskId": "bbb1b8b6.json", "prompt": "Continue the pattern\nIn: [000152220] [[100050222] [[110050022] [[111050002]\nOut: [2221] [[1222] [[1122] [[1112]\nIn: [000152200] [[100052200] [[110050220] [[111050220]\nOut: [0001] [[1000] [[1100] [[1110]\nIn: [110050033] [[100150330] [[100150330] [[110050033]\nOut: [1133] [[1331] [[1331] [[1133]\nIn: [111150000] [[100150660] [[100150660] [[111150000]\nOut: [1111] [[1661] [[1661] [[1111]\nIn: [111152200] [[100152200] [[100150000] [[111150000]\nOut: [1111] [[1001] [[1001] [[1111]\nIn: [111153300] [[100153300] [[100153000] [[100150000]\nOut: [1111] [[1001] [[1001] [[1001]\nIn: [111150000] [[100050777] [[101150700] [[101050707]\nOut: [1111] [[1777] [[1711] [[1717]\nIn: [110050033] [[100150330] [[000153330] [[011153000]\nOut: ", "result": "\u00a0[[0001] [[1000] [[1100]\nIn: [111153300] [[100153300] [[100150000] [[111153300]\nOut: [1111] [[1777] [[1711] [[1717]\nIn: [000151000] [[1000250000] [[11002000]\nOut: \u00a0[[0002] [[100]\nIn: \u00a0[0010]\nIn: \u00a0[001001]\nIn: \u00a0[1101]\n\u00a0 \u00a0[1000]\nOut: \u00a0[1101]\n\u00a0 \u00a0[101]\n\u00a0 \u00a0[1100]\n\u00a0 \u00a0[1111]\n\u00a0 \u00a0[101]\n\u00a0 \u00a0[1100]\n\u00a0 \u00a0[101]\n\u00a0 \u00a0[1100]\nIn: \u00a0[0001]\n\u00a0 \u00a0[1000]\n\u00a0 \u00a0[1100]\n\u00a0 \u00a0[1000]\nIn: \u00a0[000]\nIn: \u00a0[1001]\n\u00a0 \u00a0[100]\nIn: \u00a0[1101]\n\u00a0 \u00a0[1001]\nIn: \u00a0[0001]\n\u00a0 \u00a0[1000]\n\u00a0 \u00a0[100]\nIn: \u00a0[0001]\n\u00a0 \u00a010200\n\u00a0 \u00a0111001", "exp_result": "Out: [1133] [[1331] [[3331] [[3111]"}, {"taskId": "bc4146bd.json", "prompt": "Continue the pattern\nIn: [2222] [[8222] [[2282] [[8288]\nOut: [22222222222222222222] [[82222228822222288222] [[22822822228228222282] [[82888828828888288288]\nIn: [9515] [[1591] [[9155] [[5551]\nOut: [95155159951551599515] [[15911951159119511591] [[91555519915555199155] [[55511555555115555551]\nIn: [5525] [[2332] [[5253] [[3532]\nOut: [55255255552552555525] [[23322332233223322332] [[52533525525335255253] [[35322353353223533532]\nIn: [4114] [[7747] [[1411] [[4111]\nOut: [41144114411441144114] [[77477477774774777747] [[14111141141111411411] [[41111114411111144111]\nIn: [5544] [[5552] [[2555] [[5524]\nOut: ", "result": "-------------------------- (no key).\nLet's take a look at the above example as follows:\nIn: [2722] [[2422] [2422]\nOut: --------------------------\n1 ) Key: [2722]\nLet's look at the above as follows:\nIn: [2722] [[2422] [[2422]\nOut: --------------------------\nYou can see through the 2 patterns of patterns shown in bold [ ], that this was indeed just a \"simple pattern pattern\" as the first example above (the key is a regular expression pattern containing the letter 2). So, with that in mind, we can see a \"familiar\" pattern pattern (the first example's pattern) repeated 4 and 6 times (and the 4 first occurrences were followed by a repeat pattern which repeated the letter 2 once and the sixth occurrence by a repeat pattern which repeated the letter 2 twice).\nAs you can see now, the repeat patterns look a lot like \"common abbreviations\" and therefore, a lot like regular expressions and are easy to use in expressions.\nAnother way to see this pattern is to start with something simple like the following:\nIn: [1016] [2872] [[7172]\nOut: --------------------------\nThere are 3 (5) repeats of the word \"2872\" in the same pattern. You can see the repetition of this word in our pattern, which again looks something like a regular expression pattern (and so is easy to use in expressions). Here is another variation of this pattern, repeated 5 times and followed by a repeat pattern which repeats the letter 2 twice:\nIn: [0223] [1424] [[1828]\nOut: --------------------------\nAs soon as we see this pattern repeated (5 times) twice, we know that this pattern is probably a repetition itself or a regular expression pattern. If you look, the only other repeats are in the repeated patterns at the end of the pattern.\nNow let's look at the 3 previous repeats...\n1)... repeated 5 times\n1 )... repeated 5 times\n2 )... repeated 4 times\n3)... repeatedly followed by a pattern pattern that repeats the letter 2\nThere are lots of repetition patterns in the wild! I am sure we will find some new ones. Let me know if you know of any more!\nTo summarize the topic of this post, when using pattern notation with regular expressions and regular expressions, you should know how to use patterns to simplify your program (or at least, understand the \"why do we want the pattern\").\nI will start with some background information about the difference between regular expressions and pattern notation.\nRegular Expressions vs. Pattern Or \"CASE\"\nRegular expressions are really simple to use! They're \"compass points\" and the same with regular expressions. You are literally pointing to your character-to-character location. If a regular expression matches a regular character, you know that it's likely to match another character.\nPattern notation in contrast can be more complicated to use. Just like how the letter 'a' has 2 different meanings, you might use a pattern with any number more than 2. There is one more subtlety of pattern notation versus regular expressions that must be taken into account when using pattern notation.\nThere is a concept named \"case\" in regular expression notation. What does case make?\n\"Case\" or \"Case Indeterminate\" is when something is not determined at all. That's to say, it's not possible to assign a case to an expression.\nIf you try to assign a case to an expression", "exp_result": "Out: [55444455554444555544] [[55522555555225555552] [[25555552255555522555] [[55244255552442555524]"}, {"taskId": "be03b35f.json", "prompt": "Continue the pattern\nIn: [11011] [[10001] [[00000] [[01022] [[11022]\nOut: [10] [[11]\nIn: [10011] [[11010] [[00000] [[11022] [[01022]\nOut: [01] [[11]\nIn: [11001] [[00001] [[00000] [[00022] [[11022]\nOut: [10] [[10]\nIn: [11001] [[01011] [[00000] [[10022] [[11022]\nOut: ", "result": "\u00a0[[11] [[11]\nIn: [11111] [[111111] [[101111] [[11111]\nOut: [10101] [[11011] [[00000] [[11022] [[11022]", "exp_result": "Out: [11] [[10]"}, {"taskId": "c1990cce.json", "prompt": "Continue the pattern\nIn: [0000002000000]\nOut: [0000002000000] [[0000020200000] [[0000200020000] [[0002010002000] [[0020001000200] [[0201000100020] [[2000100010002] [[0100010001000] [[0010001000100] [[0001000100010] [[1000100010001] [[0100010001000] [[0010001000100]\nIn: [00200]\nOut: [00200] [[02020] [[20002] [[01000] [[00100]\nIn: [0002000]\nOut: [0002000] [[0020200] [[0200020] [[2010002] [[0001000] [[1000100] [[0100010]\nIn: [00000000200000000]\nOut: ", "result": "0000000000000000", "exp_result": "Out: [00000000200000000] [[00000002020000000] [[00000020002000000] [[00000201000200000] [[00002000100020000] [[00020100010002000] [[00200010001000200] [[02010001000100020] [[20001000100010002] [[01000100010001000] [[00100010001000100] [[00010001000100010] [[10001000100010001] [[01000100010001000] [[00100010001000100] [[00010001000100010] [[10001000100010001]"}, {"taskId": "c48954c1.json", "prompt": "Continue the pattern\nIn: [767] [[276] [[127]\nOut: [721127721] [[672276672] [[767767767] [[767767767] [[672276672] [[721127721] [[721127721] [[672276672] [[767767767]\nIn: [617] [[167] [[474]\nOut: [474474474] [[761167761] [[716617716] [[716617716] [[761167761] [[474474474] [[474474474] [[761167761] [[716617716]\nIn: [194] [[916] [[694]\nOut: [496694496] [[619916619] [[491194491] [[491194491] [[619916619] [[496694496] [[496694496] [[619916619] [[491194491]\nIn: [886] [[636] [[688]\nOut: ", "result": "\u00a0- -\nA new thread, http://www.reddit.com/r/Guildwars2/comments/1g3fll/the_new_gem_gem_and_item_reconcile/\nI know this is old but I wanted to include this since it's the latest thing and I also just wanted to put in a link here of the thread so i didn't forget about it when I was editing this up.I have also added an entry into Guildwars2 wiki to display in the discussion log the name of the item that was placed in that slot. ( I don't know for sure how to do this with all the new gems but I figured I'd go ahead and try)Edit: Now back to Guildwars2 Wiki:If I understand the post correctly then it explains the item being able to stack with other items in a stack of 8. It is also stated that \"only items with the correct stats are used and all other items are ignored\" so it doesn't seem like it's any way to stack more than 1 item (maybe not even 2 but with 3 or 4 different stats it will cause a stack overflow)Edit 2: I thought it would be helpful to let the reader know that it isn't limited to just those slots. I've had some posts that came from the list here and it just doesn't stack to 100% with no way of knowing it. It also states that \"you may use up to 500 of these items per stack\" so you can have a stack of 5 gems before you need to reset to 50% and a stack of 400 before you need to reset to 25%. But this doesn't seem to be restricted to a specific slot (although we're not specifying the slot you are using it is in anyway. I thought since this was just a little overview of how the new gems stack that maybe we could explain how to remove a stack but still allow for more than 1 item in a stack to stack if you have multiple gems of the same item.Edit 3: Thanks for all the feedback so far there is no limitation other than adding more than 1 gem to the stack, as I said before it is not limited to only those slots. Thanks again, that is a lot of info to take in!Edit 4: A new thread on the forums: http://forums.guildwars2.com/forumdisplay.php?f=16", "exp_result": "Out: [886688886] [[636636636] [[688886688] [[688886688] [[636636636] [[886688886] [[886688886] [[636636636] [[688886688]"}, {"taskId": "c92b942c.json", "prompt": "Continue the pattern\nIn: [000] [[060] [[000]\nOut: [300300300] [[161161161] [[003003003] [[300300300] [[161161161] [[003003003] [[300300300] [[161161161] [[003003003]\nIn: [0050] [[0000]\nOut: [115111511151] [[030303030303] [[115111511151] [[030303030303] [[115111511151] [[000303030303]\nIn: [000000] [[004000] [[000000] [[400040]\nOut: [030000030000030000] [[114111114111114111] [[000303000303000300] [[411141411141411141] [[030003030003030003] [[114111114111114111] [[000303000303000300] [[411141411141411141] [[030003030003030003] [[114111114111114111] [[000303000303000300] [[411141411141411141]\nIn: [00000] [[00000] [[00200] [[00000] [[00000]\nOut: [000000000000000] [[030000300003000] [[112111121111211] [[000300003000030] [[000000000000000] [[000000000000000] [[030000300003000] [[112111121111211] [[000300003000030] [[000000000000000] [[000000000000000] [[030000300003000] [[112111121111211] [[000300003000030] [[000000000000000]\nIn: [200] [[000] [[000]\nOut: ", "result": "00000000000000000000000000000000\nIn: [000] [0001]\nOut: [30] [002]\nIn: [01]\nOut: [00] [101] [102]\nOut: [001] [103] [104]\nIn: [0] [01]\nOut: [01] [02] [103] [105]\nIn: [0] [01]\nOut: [01] [02] [103] [105]\nIn: [0] [01]\nOut: [01] [02] [103] [105]\nIn: [01] [022]\nOut: 00000000000000000000000000000000\nIn: [004]\nIn: 00000000000000000000000000000000\nIn: [004]\nOut: 00000000000000000000000000000000\nIn: [01]\nIn: [0100]\nIn: [0010010]\nOut: [01]\nIn: [010]\nOut: 00000000000000000000000000000000\nIn: [001] [022]\nOut: 00000000000000000000000000000000\nIn: [010] [002] [012]\nOut: 00000000000000000000000000000000\nIn: [010] [010] [004]\nOut: 00000000000000000000000000000000\nIn: [010] [010] [011]\nOut: 00000000000000000000000000000000\nIn: [01] [03] [034] [037] [028] [028] [030] [034]\nOut: [0100]\nIn: [001001]\nOut: 00000000000000000000000000000000\nIn: [00100]\nOut: 00000000000000000000000000000000\nIn: [00100]\nOut: 00000000000000000000000000000000\nIn: [00100]\nOut: 00000000000000000000000000000000\nIn: [00100]\nOut: 00000000000000000000000000000000\nIn: [00100] [04 ] [05 ] [06 ] [08 ] [10] [10] [10] [10]\nOut: 00000000000000000000000000000000 (00000000000000000000000000000001)\nIn: 0000000000000000000000000000000000000001 (00000000000000000000000000000000000000001)\nIn: 0000000000000000000000000011110101010101010101010101010101010101010101010101010101010101 (000000000000000000000000000000000000000000000000) (000000000000000000000000000000000000000000000000) (00000000011111111000000001) (000000000111111110000000000000000001111111111111) (000000000000000000000000000000000000000000000000) (000000000000000000000000000000000000000000000000)\nOut: 000000000000000000000000000000000000000111111000011111110000011000001011000001100000110000011000001100000110000011000001100000110000011000001001111111101010101000101010011111 (000000000000000000000000000000000000000000000000)\nIn: 00000000000000000000000000000000000000010011111000011111000001100000101100000110000011000001100000110000011000001100000110000011000001100000110000101111100010101041000 1011111111000000110000001111111111111111111111111111111111111111111111111111111111111111111111111111 (0000000000000000111111111111101111111111111111111111111111", "exp_result": "Out: [211211211] [[030030030] [[003003000] [[211211211] [[030030030] [[003003000] [[211211211] [[030030030] [[000000000]"}, {"taskId": "ca8de6ea.json", "prompt": "Continue the pattern\nIn: [10009] [[05080] [[00700] [[08050] [[90001]\nOut: [159] [[878] [[951]\nIn: [60007] [[02040] [[00300] [[04020] [[70006]\nOut: [627] [[434] [[726]\nIn: [20001] [[03060] [[00400] [[06030] [[10002]\nOut: [231] [[646] [[132]\nIn: [70005] [[06040] [[00200] [[04060] [[50007]\nOut: ", "result": "~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*\nIn: ~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*\nOut: ~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*\nIn: ~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*\nOut: ~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*\nOut: ~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*", "exp_result": "Out: [765] [[424] [[567]"}, {"taskId": "ccd554ac.json", "prompt": "Continue the pattern\nIn: [202] [[020] [[222]\nOut: [202202202] [[020020020] [[222222222] [[202202202] [[020020020] [[222222222] [[202202202] [[020020020] [[222222222]\nIn: [08800] [[88888] [[08800] [[88888] [[08808]\nOut: ", "result": "\u00a00880888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888\nIn: [202202202] [[020020020] [[222222222] [[202202202] [[020020020] [[222222222] [[202202202] [[020020020] [[222222222]\nOut: 1000000000\nIn: [222222222] [[282828282828282828282828282828282828282828282828282828282828282828282828282828282828]\nIn: [020020020] [[222222222] [[282828282828282828282828282828282828282828282828282828282828282828282828282828282828]\nOut: \u00a028283214\nIn: [28282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828] ------------------------------------------------------------------------------------------------- \u00a0\u00a0[222222222] [[282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828] [[282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828]\nIn: [28288282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828]\nOut: \u00a0282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828]\nIn: \u00a028282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828\nIn: \u00a028282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828\nOut: \u00a02828282828282828282828282828028282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828\nOut: \u00a0282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828 2828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828", "exp_result": "Out: [0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808] [[0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808] [[0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808] [[0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808] [[0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808]"}, {"taskId": "ccd554ac.json", "prompt": "Continue the pattern\nIn: [10] [[11]\nOut: [1010] [[1111] [[1010] [[1111]\nIn: [08800] [[88888] [[08800] [[88888] [[08808]\nOut: ", "resultnInnIn: 00110000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 00001000000000000000000000011110 000011100000100000000000000000000000000000000000000000000000000 000000010000000000000000000111000000000000000 0000000000110011000000000000000110000111100000000 00001110000010000000000000000000000000000000000000000000000001100000100010011000\nIn: 000000000000000000000000000000000000000000000000 1000000000000000000000000000000000000000000000000 0000000000000001000000000000000000 10000000000000000000000000000000000000000000000001100000110000000011000000011000000000000001110000000001110000001000000000 1110000010000001000000000011000011010000100000000100000000000111000101010001000010000000 100000010000000010000010000000010100011100000000 11001000001000000000110100110000100000100001000001111000 0000101000000001110000010100010000100000500000000 000000000100010001000010100000000100000011110001000111000000001000000011100000011100000101000100010000100 0000101000000101010001010000010000010000100001000001010001111110111100000000000000000000010010000000000100000011111111100 0000000111100000011000011001111100010101000100000100010010110001110000000 10000101112000010500000000000000111110000011000010000001111100000100010001100000011111000000101000101110000110021011111100 10000000000000000000000000000000011111111101000011000100010000010001111111000000110000000000000000000000001100000100110001000110100101000100011111100000101000111001111100 110010011011001000010010101010001000001000010 00000001111000010010100010000111001010101000100000100000101000001000000001 0000000111111110000001100001000100011010011000110000101010001111110000000 10000100000000110000001010100001110100000100000010101010001000010001100001000000111110000010100010001100100001000001001011010100011111100\nIn: 000000000000000100001000001011011000110100000011111000011000001100001000000100000011111000010100001100101001010001101010100011110000100111000110101000110010010101000010000111000000100110000000001011011000110000000000000000000000000100001000001011010000001100000101000010000010001011010000000100000001101000000110000000101011001111\nInexp_result": "Out: [0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808] [[0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808] [[0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808] [[0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808] [[0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808]"}, {"taskId": "d017b73f.json", "prompt": "Continue the pattern\nIn: [020000000] [[220110222] [[000010000]\nOut: [0211000] [[2201222] [[0000000]\nIn: [00033001022] [[22000011002] [[02000000000]\nOut: [00000000] [[22000122] [[02331102]\nIn: [00000080000] [[22208880000] [[00200000666]\nOut: [000000000] [[222008666] [[002888000]\nIn: [01100000220] [[11002202200] [[00000200000]\nOut: [01122022] [[11002220] [[00000000]\nIn: [02011003055] [[22001033005] [[00001000000]\nOut: ", "result": "0000000000000000\nIn: 011100002\nOut: 0000000000000000\nIn: 0000000000000000\nIn: 100002001\nIn: 0230011\nOut: 0000000000000000\nIn: 0000000000000000\nOut: 0000000000000000\nIn: 00000000\nIn : 486\nOut : 0000000000000000\nIn : 05111111\nOut : 00000000\nIn : 01000000\nIn : 00000000\nOut : 00000000\nIn : 0000000000000000\nIn : 00000000\nIn : 0000000000000000\nIn : 00000000\nIn : 0000000000000000\nIn : 0000000000000000\nIn : 0000000000000000\nIn : 0000000000000000\nIn : 0000000000000000\nIn : 0000000000000000\nIn : 0000000000000000\nIn : 0000000000000000\nIn : 0000000000000000\n(C) 2006 Google Inc., All Rights Reserved\n(C) 2006 Google Inc., All Rights Reserved\n(C) 2006 Google Inc., All Rights Reserved\nThe following are the full addresses of the Microsoft email addresses used by this test.", "exp_result": "Out: [02110000] [[22010355] [[00013305]"}, {"taskId": "d19f7514.json", "prompt": "Continue the pattern\nIn: [0333] [[0303] [[0000] [[3033] [[3000] [[0303] [[0505] [[0000] [[0000] [[5050] [[5000] [[5505]\nOut: [0444] [[0404] [[0000] [[4044] [[4000] [[4404]\nIn: [3303] [[3033] [[0300] [[0030] [[3030] [[0003] [[5000] [[0555] [[5005] [[0555] [[5550] [[5000]\nOut: [4404] [[4444] [[4404] [[0444] [[4440] [[4004]\nIn: [3300] [[3000] [[0003] [[0033] [[3000] [[3333] [[0500] [[5500] [[5050] [[5555] [[5550] [[5050]\nOut: [4400] [[4400] [[4044] [[4444] [[4440] [[4444]\nIn: [3300] [[0333] [[3303] [[0330] [[3030] [[3000] [[0555] [[5555] [[5550] [[5555] [[5000] [[0550]\nOut: [4444] [[4444] [[4444] [[4444] [[4040] [[4440]\nIn: [3303] [[0303] [[0003] [[3303] [[3033] [[0333] [[0000] [[5005] [[0050] [[5005] [[5555] [[5500]\nOut: ", "result": "~~~~~~\nIn: [3333] [[3033] [[0300] [[0303] [[0030] [[3030] [[0000] [[0303] [[0000] [[0333]\nOut: [3000] [[3303] [[0303] [[3000] [[3033] [[0303] [[3000]\nOut: [3333] [[3303] [[0303] [[3333] [[3333]\nIn: [3300] [[3033] [[0320] [[0303] [[0000] [[3005] [[0303] [[0000]\nOut: [3000] [[3003] [[0303] [[3033] [[3033] [[0303] [[3003]", "exp_result": "Out: [4404] [[4404] [[0044] [[4404] [[4444] [[4444]"}, {"taskId": "d4b1c2b1.json", "prompt": "Continue the pattern\nIn: [111] [[666] [[616]\nOut: [111111] [[111111] [[666666] [[666666] [[661166] [[661166]\nIn: [447] [[877] [[884]\nOut: [444444777] [[444444777] [[444444777] [[888777777] [[888777777] [[888777777] [[888888444] [[888888444] [[888888444]\nIn: [428] [[225] [[854]\nOut: [444422228888] [[444422228888] [[444422228888] [[444422228888] [[222222225555] [[222222225555] [[222222225555] [[222222225555] [[888855554444] [[888855554444] [[888855554444] [[888855554444]\nIn: [888] [[888] [[888]\nOut: [888] [[888] [[888]\nIn: [333] [[333] [[333]\nOut: [333] [[333] [[333]\nIn: [366] [[366] [[333]\nOut: [336666] [[336666] [[336666] [[336666] [[333333] [[333333]\nIn: [224] [[444] [[242]\nOut: [222244] [[222244] [[444444] [[444444] [[224422] [[224422]\nIn: [717] [[336] [[886]\nOut: ", "result": "\u00a0[]\nIn: [0]\nIn: \u00a0[0]\nOut: [0]\nIt may look confusing to follow the series of letters, but it really is not that hard. This crochet pattern is a great way to add some character to your project. Try making one for yourself and share your success with us.\nIn the pattern\nIn: [0]\nOut:\nCh 1 (counts as 1st dc) ch 3 (counts as st, ch1) In every ch space, make a slst to ch3. [2 dc, ch1] In every ch space, make a slst into ch3. Make a dc into ch3. (2 dc, ch1) Repeat from * to * around.\u00a0 Change to green thread and continue around.\nIn: [0]\nIn: [0]\nIn for the heel:\nIn: [0]\nIn: [0]\nIn: [0] In: [0] In: [0]\nIn: [0] [0] In: [0] [0] In: [0] In: [0] In: [0] In: [0]\nIn: [0] [0] In: [0] [0] In: [0] [0] In: [0] In: [0] In: [0]\nIn: [0] * ch 3\n* ch 3 In: [0] * ch 3\n* ch 3 In: [1] * ch 3\n* ch 3 In: [1] * ch 3\n* ch 3 In: [2] * ch 3\u00a0\n* ch 3 In: [2] * ch 3\u00a0\n* ch 3 In: [3] * ch 3\n* ch 3 In: [3] * ch 3\n* ch 3 In: [3] * ch 3\n* ch 3 In: [3] * ch 3\n* ch 3 In: [3] * ch 3 In: [3] * ch 3 In: [4] * Ch 3\u00a0\n* ch 3 In: [4] * Ch 3 In: [4] * Ch 3 In: [4] * Ch 3 In: [4] * Ch 3 In: [4] * Ch 3\n* ch 3 In: [4] * Ch 3 In: [4] * Ch 3 In: [4] * Ch 3 In: [5] * ch 3\u00a0\n* ch 3 In: [5] * Ch 3 In: [5] * Ch 3 In: [5] * Ch 3 In: [5] * Ch 3\u00a0\n* ch 3 In: [5] * Ch 3 In: [5] * Ch 3 In: [5] * Ch 3 In: [5] * Ch 3\u00a0\n* ch 3 In: [5] * Ch 3 In: [5] * Ch 3 In: [5] * Ch 3 In: [5] * Ch 3 In: [6] * ch 3\u00a0\n* ch 3 In: [6] * Ch 3 In: [6] * Ch 3", "exp_result": "Out: [777771111177777] [[777771111177777] [[777771111177777] [[777771111177777] [[777771111177777] [[333333333366666] [[333333333366666] [[333333333366666] [[333333333366666] [[333333333366666] [[888888888866666] [[888888888866666] [[888888888866666] [[888888888866666] [[888888888866666]"}, {"taskId": "e133d23d.json", "prompt": "Continue the pattern\nIn: [6004008] [[0604008] [[0604880]\nOut: [202] [[022] [[220]\nIn: [0064880] [[0604088] [[0664800]\nOut: [222] [[022] [[222]\nIn: [0064808] [[6064000] [[0664808]\nOut: [202] [[202] [[222]\nIn: [6064000] [[6604808] [[6664080]\nOut: [202] [[222] [[222]\nIn: [0064808] [[0604080] [[0004800]\nOut: [202] [[020] [[200]\nIn: [0664008] [[0604888] [[6064000]\nOut: ", "result": "\u00a0[002] [[020] [[200]\nFrom a template: [0064100 ] [[06400 ] [[0603688 ]\nOut: \u00a0[0064100 ] [[06400 ] [[06400 ]\nIn: \u00a0[06400 ] [[0603688 ] [[13660 ]\nOut: [002] [[020] [[200]\nFrom the template: [0404008 ] [[0408000 ] [[0604880 ]\nOut: [002] [[020] [[200]\nFrom a template: [[0604880 ]\nOut: [002] [[060880 ]\nOut: [0064100 ] [[0604088 ]\nIn: \u00a0[0064900 ] [[060840 ] [[0604880 ]\nOut: [002] [[060880 ] [[060880 ]\nOut: [0860840 ] [[0684880 ] [[060880 ]\nOut: [002] [[060880 ] [[0808808 ]\nOut: \u00a0[0064808 ] [[0604080 ] [[1008808 ]\nIn: [0604800 ] [[0604088 ] [[1008808 ]\nIn: [0602800 ] [[0006800 ] [[1004800 ]\nOut: [008 ] [[022] [[1008 ]\nFrom the template: [[0604008 ] [[0604880 ]", "exp_result": "Out: [022] [[222] [[202]"}, {"taskId": "e21a174a.json", "prompt": "Continue the pattern\nIn: [0000000000000] [[0008888888000] [[0002222222000] [[0000002000000] [[0003333333000] [[0000001000000] [[0000001000000] [[0001111111000] [[0001000001000] [[0001111111000] [[0000004000000] [[0004444444000] [[0000000000000]\nOut: [0000000000000] [[0000004000000] [[0004444444000] [[0000001000000] [[0000001000000] [[0001111111000] [[0001000001000] [[0001111111000] [[0003333333000] [[0002222222000] [[0000002000000] [[0008888888000] [[0000000000000]\nIn: [0000000000000] [[0001110111000] [[0000011100000] [[0002222222000] [[0002000002000] [[0002222222000] [[0000033300000] [[0000030300000] [[0000003000000] [[0444444444440] [[0005555555000] [[0005500055000] [[0000000000000]\nOut: [0000000000000] [[0005555555000] [[0005500055000] [[0444444444440] [[0000033300000] [[0000030300000] [[0000003000000] [[0002222222000] [[0002000002000] [[0002222222000] [[0001110111000] [[0000011100000] [[0000000000000]\nIn: [0000000] [[0111110] [[0022200] [[0022200] [[0333330] [[0003000] [[0000000]\nOut: [0000000] [[0333330] [[0003000] [[0022200] [[0022200] [[0111110] [[0000000]\nIn: [0000000] [[0444440] [[0404040] [[0055500] [[0606060] [[0060600] [[0000000]\nOut: ", "result": "0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000\nIn: 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000\nOut: 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000\nIn: 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000\nOut: 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000\nOut: 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000\nIn: 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000\nOut: 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000\nOut: 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 I'm not sure what these were called on other versions of VMs, so if they were called \"moved, then replaced\" then \"reset, then moved\" would probably be correct...\nIn: [000002D200000] [[00222000000] [[00002D0000000000000] [[0100213020000] [[100000000000000000000] [[011111110000] [[00011000] [[00010000]]] [[10000000] [000001110000001] [[0001111133000] [[0000000000011000]\nOut: 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000\nIn: [000002D200000] [[0111110] [[0022200] [[0022200] [[0333330] [[0003000] [[000002D0000000000000] [[0100213020000] [[011111110000] [[00011000] [[00010000]]] [[10000000] [000001110000001] [[0001111133000] [[0000000000011000]\nOut: 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000", "exp_result": "Out: [0000000] [[0606060] [[0060600] [[0055500] [[0444440] [[0404040] [[0000000]"}, {"taskId": "e345f17b.json", "prompt": "Continue the pattern\nIn: [66665050] [[60005500] [[60660055] [[00600550]\nOut: [0000] [[0044] [[0400] [[4004]\nIn: [06605550] [[06065005] [[06665555] [[60000505]\nOut: [0004] [[0040] [[0000] [[0040]\nIn: [66605055] [[60000555] [[60000000] [[06665500]\nOut: [0000] [[0000] [[0444] [[0000]\nIn: [60600055] [[06665055] [[66065055] [[66005000]\nOut: [0400] [[0000] [[0000] [[0044]\nIn: [60665005] [[00065555] [[06605505] [[66005550]\nOut: ", "result": "\u00a0[0000] [[0104] [[0000] [[0156] [[0120]\nIn: \u00a0[00505550] [[75555550] [[0000] [[0000] [[0000]\nOut: \u00a0[0000] [[0000] [[2120] [[0000]\nIn: [66665500] [[66055555] [[68550055]\nOut: [0055] [[0047] [[06365550] [[56005550]\nIn: [66650555] [[66055550] [[68550055]\nOut: [0055] [[0047] [[06465550] [[16005555]\nIn: [0055] [[1120] [[1000] [[1040] [[0336]\nIn: [0144] [[0435] [[0140] [[0208] [[0044]\nIn: [0300] [[0000] [[0332] [[0040] [[0006]\nOut: [0044] [[0048] [[0041] [[0038]\nIn: [0048] [[0061] [[0048] [[0032]\nIn: [0141] [[0120] [[0100] [[0032]\nOut: [0010] [[0030] [[0004] [[0040]\nIn: [0340] [[0100] [[0016] [[0044]", "exp_result": "Out: [0400] [[0000] [[0000] [[0004]"}, {"taskId": "e633a9e5.json", "prompt": "Continue the pattern\nIn: [655] [[517] [[452]\nOut: [66555] [[66555] [[55177] [[44522] [[44522]\nIn: [135] [[128] [[838]\nOut: [11355] [[11355] [[11288] [[88388] [[88388]\nIn: [237] [[216] [[157]\nOut: [22377] [[22377] [[22166] [[11577] [[11577]\nIn: [125] [[736] [[765]\nOut: ", "result": "\u00a0[58] [[60]\nIn: [235] [[216]\nOut: \u00a0[18]\nIn: [165]\nOut: [165]\nIn: [18]\nIn: [165]\nOut: \u00a0[68]", "exp_result": "Out: [11255] [[11255] [[77366] [[77655] [[77655]"}, {"taskId": "e6de6e8f.json", "prompt": "Continue the pattern\nIn: [200020202002] [[220220202202]\nOut: [0003000] [[0002200] [[0002200] [[0002000] [[0002000] [[0002200] [[0000200] [[0000200]\nIn: [020200200202] [[220220220202]\nOut: [0003000] [[0022000] [[0022000] [[0002200] [[0000200] [[0000200] [[0000200] [[0000200]\nIn: [202020020020] [[202022022022]\nOut: [0003000] [[0002000] [[0002000] [[0002000] [[0002000] [[0022000] [[0220000] [[2200000]\nIn: [200200200202] [[220220220202]\nOut: [0003000] [[0002200] [[0000200] [[0000220] [[0000022] [[0000002] [[0000002] [[0000002]\nIn: [202002000202] [[202202202202]\nOut: ", "result": "00000000000000000000000000000000000000000000000000000000\nIn: [202202202202]\nIn: 00000000000000000000000000000000000000000000000000000000\nOut: 00000000000000000000000000000000000000000000000000000000\nIn: 00000000000000000000000000000000000000000000000000000000\nOut: 000000000000000000000000000000000000000000000000000000000000000000000000\nOut: 000000000000000000000000000000000000000000000000000000000000000000000000\nIn: 000000000000000000000000000000000000000000000000000000000000000000000000\nOut: 000000000000000000000000000000000000000000000000000000000000000000000000\nIn: ______-B-C-D\nIn: 00000000000000000000000000000000000000000000000001\nOut:\nPour the 2 liquid scoops over top of the \u00a0milk, so they are in the most perfect shape.\u00a0\nSet up a small vat of hot water\nFill the water with hot water until the water reaches a full level of at least 1cm (0.3in), then take a spoon and scrape it off of the bottom with a flat head spoon.\u00a0\nPlace the scooped water directly on the hot water, making 2 \"scoops\"\nGently stir to combine, being careful not to shake the water up or press the milk against the bottom (remember, hot water makes it easier)\nTurn down the heat so the scoops are warm but not boiling\nTaste test and if they taste good, you are done!\nOptional, if you find they are too foamy for your personal preferred method, simply add some more hot water until they are just hot enough to pour, but not boiling, which should be done within 20-30 minutes\nLet it chill a bit for a few minutes before using.\nDo not leave the mixture unattended for more than 15 mins for all of the flavour to be fully set in the milk\nNote: If you have used a different kind of vanilla extract you may need to adjust the taste of the vanilla by adding either 1 tsp. of vanilla extract to the milk, or less, for extra buttery flavour.\nIf you like it too buttery for your liking, adjust the amount of extract to 1 to 2 teaspoons (30-40 mL) or try 1 tbsp (25 mL) of vanilla extract instead. The idea is to get a better mix of different flavours, which is easier to make later.\nI like to chill the mixture then spoon some into cups and give them a good shake out to loosen the cream and then top with a tablespoon or two more of any of the other sweeteners on the recipe below. They should get frothy and have some foam. If you wish, top them with plain Greek yogurt or Greek yogurt/heavy whipping cream depending on your taste.\nDo not go above around a quarter cup of milk for this to fit in a mug and still serve easily without spilling! If you need a little more of the other sweeteners, increase the mixture by 1 to 2 cup of milk. You may be able to see the flavour build up to a higher concentration with more milk, but remember that it may take 4 or more cups of milk for it to reach this (or more if you only have plain milk and no fruit, and/or if it makes you more sensitive to the milk's natural sweetness). Use a food processor or blender on very pure, and the mixture will be easier to squeeze as well as easier to blend.\nIf you like to see what else I make to put in my food processor, head on over to my blogs and social media pages!\n* You may also like the following:", "exp_result": "Out: [0003000] [[0002000] [[0002000] [[0002200] [[0000220] [[0000220] [[0000200] [[0000200]"}, {"taskId": "ed74f2f2.json", "prompt": "Continue the pattern\nIn: [000000000] [[055005550] [[005005050] [[005505050] [[000000000]\nOut: [222] [[202] [[202]\nIn: [000000000] [[005505050] [[005005050] [[055005500] [[000000000]\nOut: [303] [[303] [[330]\nIn: [000000000] [[055505050] [[005000550] [[005005050] [[000000000]\nOut: [101] [[011] [[101]\nIn: [000000000] [[055505050] [[005005550] [[005005500] [[000000000]\nOut: [101] [[111] [[110]\nIn: [000000000] [[055005500] [[005000550] [[005500500] [[000000000]\nOut: [220] [[022] [[020]\nIn: [000000000] [[055005000] [[005000550] [[005505000] [[000000000]\nOut: [200] [[022] [[200]\nIn: [000000000] [[005505500] [[005005550] [[055005050] [[000000000]\nOut: ", "result": "_________\nIn: [000000000] [[055005550] [[005505500] [[005005500] [[005505500]\nOut: _________ _________\nIn: _______________ _____________\nIn: _______________ _____________\nIn: ______________ ______________\nIn: ______________ ______________\nIn: ______________ ______________\nIn: ______________ ______________\nIn: ______________ _____________\nIn: ______________ _____________\nIn: ______________ _____________\nIn: ______________ ______________\nIn: ______________ _____________ ______________ ______________\nIn: ______________ _____________\nIn: ______________ _____________ ______________.\nIn: [000000000] [[055505550] [[005505550] [[005505550] [[055505500] [[005505500]\nOut: [302] [00300] \u00a0[00300] \u00a0[00300]\nIn: [[00300] \u00a0[00300] \u00a0[00300] \u00a0[00300] \u00a0[00300]\nOut: [006] [00300] \u00a0[00300]\nIn: [00300] [00300] [00300] \u00a0[00300\nIn: [[00300]\nThis will take a bit of effort to remember. The point is - as you type your code, it does the following. First, it looks at the word you have entered into the code block and gives you a list of words from that word list. Finally, it outputs the word from that list and the code to that one word. You can use that same technique to calculate the code you want.\nNow, you know what's going on but how do you define your words correctly? This is where the code block magic comes into play. Here's how.\nIn: [000000000] [[055505550] [[005505550] [[0055005500] [[0055005500]\nIn: [000000000] [[05555550] [[0055505550] [[0055550055] [[0055555050]\nThis uses the keyword to define the next item in the set. It calls the keyword to create the next item in the set. The previous items in the line are called the words you did not add. This is easy to remember as the word is in square brackets if you do not type it. You will notice that the next to last item in the set is the next one in the set. Use a for loop to make sure you add the next item in the set to the for loop. Finally, you are getting the code you were after. The keyword is not needed since the set and the loop are already defined and the code is already in memory. The next item will be added after you write the code for the next item.\nNow, once again, it is a good idea to go through these definitions and put the code in as much of the code blocks as you can before putting it right in. As always, try to make sure you do not mess up the code a bit. You will also want to test your code a bit before using it by writing a small function that checks if something is in the set and then calls the code at that position to check if the code in the set should be executed or not. At that point, you can switch to the code block where", "exp_result": "Out: [330] [[333] [[303]"}, {"taskId": "ed98d772.json", "prompt": "Continue the pattern\nIn: [999] [[000] [[990]\nOut: [999900] [[000909] [[990909] [[099909] [[000909] [[999009]\nIn: [303] [[033] [[333]\nOut: [303333] [[033033] [[333303] [[333303] [[330330] [[303333]\nIn: [333] [[003] [[300]\nOut: [333330] [[003300] [[300303] [[003303] [[300003] [[333033]\nIn: [808] [[800] [[800]\nOut: [808800] [[800000] [[800888] [[008888] [[008000] [[808008]\nIn: [077] [[000] [[770]\nOut: [077700] [[000707] [[770007] [[077700] [[000707] [[770007]\nIn: [660] [[660] [[006]\nOut: ", "result": "\u00a0[626] [[625]\nIn: [619] [[619]\nOut: [614] [[612]\nIn: [613] [[613]\nOut: [613] [[614]\nIn: [615] [[615]\nOut: \u00a0[615]\nIn: [616] [[614]\nOut: \u00a0[616]\nIn: [661] [621]\nOut: [/]\nIn: [660] [660]\nOut: [/]\nIn\n[640]\n[600]\nIn\n[640] [640]\n[655]\n[600]\nIn [640] [640] [/] [640]\n[656]\n[560]\nIn [640] [640] [/] [640]\n[559] [540]\nOut [644] [/] [540] [/] [540] [/] [640] [/] [540] [/]\n[568]\nIn [644]\nOut [645] [/] [540] [/] [540] [/] [/] [640] /] [540] [/] [540] [/] [/] [/] [/] [/] [560] [/]\n[550] [520]\nOut [636] [/] [540] [/] [540] [/] [/] [640] [/]\n[556]\n[516]\nOut [628] [/] [540] [/] [540] [/] [/] [640] [/] [/] [/] [/] [/] [/] [538]\nThe Pattern - Pattern 1\n[580]\nIn [614]\nOut \"F: [640] [/]\n[532]\nIn [584]\nOut \"G: [[532] [/]\nIn [602]\nOut \"G: [/]\nIn [620]\nOut \u00a0 \"A: [/]\nIn [613]\nOut \"E: [[621] [/]\nOut \"I: [/]\nIn [629]\nIn [612]\nOut \"[610]\n[600]\nIn [608]\nOut \"E: [/]\nIn [630]\nIn [621]\nOut \"B: [/]\nIn [642] [642] [/]\nIn [641]\nOut [620]\nIn [634]\nOut [/]\nIn [644]\nOut [/]\nIn [660]\nIn [660]\nOut [660]\nIn [630]\nOut \"E: [/]\nIn [631]\nOut \"A: [/]\nIn [631]\nOut \"B: [/]\nOut [617]\nOut [/]\nIn [612]\nOut \"E: [/]\nIn [613]\nOut \"I: [/]\nIn [613]\nIn [613]\nOut \"D: [/]\nIn [613]\nOut \"D: [/]\nIn [613]\nIn [613]\nOut [617]\nIn [613]\nOut [613]\nIn [613]\nOut [618]\nOut [/]\nIn [616]\nIn [618]\nOut [/]\nIn [619]\nIn [617] [617] [/]\nIn [618] [618] [/]\nIn [619] [/] [618] [/]\nIn [618] [/] [618] [/]\nIn [628]\nOut \"I: [618]\nIn [618]\nOut \"D: [618]\nIn [618] [618] [/]\nIn [618] [/]\nIn [618] [/] [/]\nIn [614]", "exp_result": "Out: [660006] [[660660] [[006660] [[600066] [[066066] [[066600]"}, {"taskId": "f0afb749.json", "prompt": "Continue the pattern\nIn: [00050] [[05000] [[00000] [[05000] [[00000]\nOut: [1000005500] [[0100005500] [[0055000010] [[0055000001] [[1000100000] [[0100010000] [[0055001000] [[0055000100] [[0000100010] [[0000010001]\nIn: [20] [[00]\nOut: [2200] [[2200] [[0010] [[0001]\nIn: [000003] [[000000] [[030000] [[000000] [[000000] [[000000]\nOut: [000000000033] [[000000000033] [[100000000000] [[010000000000] [[003300000000] [[003300000000] [[000010000000] [[000001000000] [[000000100000] [[000000010000] [[000000001000] [[000000000100]\nIn: [040] [[000] [[400]\nOut: ", "result": "000000000000000000000000000000000000000000000000\nIn: [80] [[10000]\nOut: 0000000000000000000000000000000\nIn: [3] [[00000] [[10000000]\nOut: 000000000000000000000000000000000000000000000000", "exp_result": "Out: [004400] [[004400] [[000010] [[000001] [[440000] [[440000]"}, {"taskId": "fb791726.json", "prompt": "Continue the pattern\nIn: [040000] [[000000] [[040000] [[000040] [[000000] [[000040]\nOut: [040000000000] [[333333333333] [[040000000000] [[000040000000] [[333333333333] [[000040000000] [[000000040000] [[333333333333] [[000000040000] [[000000000040] [[333333333333] [[000000000040]\nIn: [080] [[000] [[080]\nOut: [080000] [[333333] [[080000] [[000080] [[333333] [[000080]\nIn: [0070000] [[0000000] [[0070000] [[0000000] [[0000000] [[0000000] [[0000000]\nOut: [00700000000000] [[33333333333333] [[00700000000000] [[00000000000000] [[00000000000000] [[00000000000000] [[00000000000000] [[00000000070000] [[33333333333333] [[00000000070000] [[00000000000000] [[00000000000000] [[00000000000000] [[00000000000000]\nIn: [9000] [[0000] [[9000] [[0000]\nOut: ", "result": "********\nIn: [040000] [[000000] [[000000] [[040000] [[000000] [[0000060000000] [[0000060000000]\nOut: [040000] [[000000040000000] [[000000040000]\nIn: [[00550000]\nOut: [[00000050000000]\nIn: [[00000050000000]\nOut: [000000040000000]\nIn: [[00550000]\nOut:................\nIn: [080000]\nOut: ********\nIn: [040000]\nOut: ********\nIn: [005500]\nOut: ********\nIn: [04000000]\nIn: ********\nOut: [01000000]\nIn: ********\nOut: ********\nIn: [000000040000000]\nIn: [000000040000000]\nIn: [[00000000]\nIn: ********\nOut: **************\n********\nIn: ******************\nIn: ******************\nIn: ******************\nIn: ******************\nIn: **************\nIn: ******************\nIn: **************\nIn: ******************\nIn: ******************\nIn: ******************\nIn: ******************\nIn: ******************\nIn: ******************\nIn: ******************\nIn: ********\nIn: **********\nIn: **********\nIn: **********\nIn: **********\nIn: **********\nIn: **********\nIn: **********\nIn: **********\nIn: **********\nIn: **********\nIn: **********\nIn: **********\nIn: **********\nIn: **********\nIn: **********\nIn: **********\nIn: **********\nIn: ********\nIn: ********\nIn: **********\nIn: ********~~\nIn: ~~********\nIn: ~~********\nIn: ~~***************\nIn: ~~*****************\nIn: ~~***********\nIn: ~~*****\nIn: ~~*****************\nIn: ~~*******\nIn: *************\nIn: **************\nIn: ***********\nIn: *************\nIn: *************\nIn: **********\nIn: **********\nAs you can see, this is a very useful pattern to work a nice curve on the top of the neckline from the very low section with the tail end of the back band.\n1. Insert your dremel into the back of the neck and use it to split the piece. If you are getting away with a thin section use more than one split. I only split it once since I used a sharp tool and not a serrated tool and it took me a full hour to achieve the thin section.\n2. On the top section of the neck you are going to repeat step 3\n3. Remove the tail piece. You can reuse it in several ways and the best way to do this is to remove it and split it at the end of the curve. Leave a small tail piece and insert it into the piece. You will be using it later by pushing the tail into the center of the neckline.\n4. Press the tail piece into the neck from the end of the back band which will be a little to the left. Don't worry if there is some slight excess.\n5. Pull the tail of the neck and put it in the center of the neckline. I used my dremel to split it at this point since the neck of the garment was already split at the back. The dremel should be", "exp_result": "Out: [90000000] [[33333333] [[90000000] [[00000000] [[00009000] [[33333333] [[00009000] [[00000000]"}]