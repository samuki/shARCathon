[{"prompt": "\nIn: [86] [[64]\nOut: [868686] [[646464] [[686868] [[464646] [[868686] [[646464]\nIn: [79] [[43]\nOut: [797979] [[434343] [[979797] [[343434] [[797979] [[434343]\nApply the patterns from the above examples:\nIn: [32] [[78]\nOut: ", "result": "\u00a0[12]\nAs we can see in the last example, the patterns in each of the cases will be used to combine the \"in\", \"out\", and the \"in-out\", but not the final patterns we want.\nUsing the Patterns\u00b6 For those that want to create their own patterns using this method, we should add two additional arguments to their call (which I've defined for you in the above example), in this case: pattern = Pattern () pattern. add_patterns ([ 'in', 'out' ]) pattern. add_pattern ( 'in-out', [ 'out' ]) pattern. add_pattern ( 'in' ) pattern. add_pattern ( 'in-out' )\nAdd Patterns to Pattern Context\u00b6 The second pattern attribute is the new string that will be applied to the in, out or in pattern in the original list of PatternContext objects. If you're using the PatternContext's add method, you can also add those new attributes to the parent Context objects that are used to build the pattern. For example: def in_out ( context, pattern ): \u00a0 print ( pattern ) \u00a0 for item in pattern. items (): \u00a0 print ( item ) In the above example, the in-out pattern was added to the in pattern context: \u00a0 \u00a0 \u00a0< pattern context=\"\" > \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0...and the in-out pattern was added to the pattern context: \u00a0 [\u00a0in,\u00a0out,\u00a0\u00a0 in,\u00a0in-out]\nPatternContext.add([ 'in', 'out' ])\nPatternContext.add([ 'in-out', 'out' ])\nPatternContext.add( 'in-out', [ 'out' ])\nPatternContext.add( 'in-out', [ 'out' ])\nFor the PatternContext.add() method to work, both the new pattern and the parent context (which is the new pattern name) have to be passed, and that's not something you can do using a keyword argument. But by doing so, you will now be able to invoke any method on a pattern that can be invoked as a pattern object. This means that you will now have access to pattern.find(), pattern.find_all() and so on, in the same way you have now access to the Pattern and Context methods:\nPatternContext.find( ''' ) If instead you want to invoke pattern.find() with a String, use PatternContext.find_all() as follows: PatternContext. find ( ''' )\nPerl's pattern syntax\u00b6 All of the pattern attributes are a syntactic sugar for the regular Python pattern syntax. Using the regular Python regex syntax is quite straightforward: [[{1,2}],[{1,5}, {1,3}, {2,4}, {2,3}], [{1,3}],[{1,5}, {1,3}, {2,4}, {2,3}], [{1,6},{1,7}], [[{1,8},{1,3},{2,3}, {2,4}, {2,3}], [[{1,9},{1\\d{2}-1\\d{2}},{1,8},{1,3},{2,4},{2,3}], [{1,10},{1\\d{2}-1\\d{2}},{1,6},{1\\d{2}-1\\d{2}},{1,7},{1}}], [[{13},{12}],[{12,13},{12,13}]]]\nPatternContext.add([< pattern context=\"\" />], [('2,4'),])\nUse the pattern syntax in pattern context and not in pattern context\u00b6 PatternContext.add({'2,4', '1,5'}) will result in: PatternContext.add({'2,4','1,5'}) In the above example, the context is the same Context as the \"in\", \"out\", \"in-out\" and \"out-in\" patterns. You can do things like: def in_out ( context ): \u00a0 print ( pattern ) for item in pattern. items (): \u00a0 print ( item )", "exp_result": "Out: [323232] [[787878] [[232323] [[878787] [[323232] [[787878]"}, {"prompt": "\nIn: [070] [[777] [[070]\nOut: [000707000] [[000000000] [[000707000] [[707707707] [[000000000] [[707707707] [[000707000] [[000000000] [[000707000]\nIn: [006] [[060] [[600]\nOut: [000000660] [[000000606] [[000000066] [[000660000] [[000606000] [[000066000] [[660000000] [[606000000] [[066000000]\nIn: [440] [[004] [[004]\nOut: [004004000] [[440440000] [[440440000] [[000000004] [[000000440] [[000000440] [[000000004] [[000000440] [[000000440]\nApply the patterns from the above examples:\nIn: [003] [[330] [[030]\nOut: ", "result": "\u00a0[000505000] [[300000500] [[340000060]\nIn: [026] [[050] [[060] [[070]\nOut:\nIn: [0601] [[080] [[060] [[070]\nOut:\nIn: [011] [[040] [[040] [[040] [[010]\nOut: \u00a0[001105000] [[00000010]\nIn: [010]\nOut: [000000000] [[000000000] [[000111000] [[000000001] [[000000010]\nApply the pattern from the pattern\nIn: [006]\nOut: [000704000]\nIn: [08006000]\nOut: [00540000]\nIn: \u00a0[004]\nOut: {'c': 'e'}\nIn: [011]\nOut: [000000000]\nIn: [0010]\nOut: \u00a0[0010]\nIn: [010]\nOut: [000001000]\nIn: [0015]\nOut: [0015]\nIn: [0801]\nOut: [0019]\nIn: [010]\nOut: [000000000]\nIn: \u00a0[0180]\nOut: [009]\nOut: [014]\nIn: [010]\nOut: [0003]\nIn: \u00a0[010]\nOut: [0003]\nIn: \u00a0[001]\nOut: \u00a0[0010]\nIn: [010]\nOut: [000001]\nIn: [0014]\nOut: [0141]\nIn: \u00a0[0100]\nOut: \u00a0[1101]\nIn: [0120]\nIn: [0014]\nIn: [0135]\nThe above example can be viewed via\u00a0 a \u00a0YouTube screencast.\nIn: \u00a0{'c': 'e', 'e': 't'}\nIn: {}\nIn: [1101]\nIn: \u00a0{'c':'s'}\nIn: [1101]\nIn: \u00a0{'c': 'e', 'e': 't'}\nIn: {'c':'s'}\nIn: [1]\nIn: \u00a0{'c':'s'}\nIn: [1]\nIn: \u00a0{'c':'s'}\nIn: \u00a0[2]\nIn: \u00a0{'c':'s'}\nIn: [2]\nIn: \u00a0{'c':'s'}\nIn: [3]\nIn: [4]\nIn: [2]\nIn: \u00a0{'c':'s'}\nIn: \u00a0[4]\nIn: \u00a0{'c':'s'}\nIn: [5]\nIn: \u00a0{'c':'s'}\nIn: [6]\nIn: \u00a0{'c':'s'}\nIn: \u00a0[7]\nIn: \u00a0{'c':'s'}\nIn: [8]\nIn: \u00a0{'c':'s'}\nIn: [9]\nIn: \u00a0{'c': 'e'}\nIn: \u00a0[10]\nIn: \u00a0{'c': 'e'}\nIn: [11]\nIn: \u00a0{'c': 'e'}\nIn: [12]\nIn: \u00a0{'c': 'e'}\nIn: [13]\nIn: \u00a0{'c': 'e'}\nIn: [14]\nIn: \u00a0{'c': 'e'}\nIn: [15]\nIn: \u00a0{'c': 'e'}\nIn: \u00a0[16", "exp_result": "Out: [000000330] [[000000003] [[000000303] [[330330000] [[003003000] [[303303000] [[000330000] [[000003000] [[000303000]"}, {"prompt": "\nIn: [6242] [[2266] [[6424]\nOut: [42466424] [[66222266] [[24266242] [[24266242] [[66222266] [[42466424]\nIn: [5599] [[9555] [[5757]\nOut: [75755757] [[55599555] [[99555599] [[99555599] [[55599555] [[75755757]\nIn: [3355] [[5858] [[8858]\nOut: [85888858] [[85855858] [[55333355] [[55333355] [[85855858] [[85888858]\nApply the patterns from the above examples:\nIn: [8578] [[7788] [[5585]\nOut: ", "result": "0000000000000000\nHowever, the pattern above would be \"In, Out, In, In, Out, In.\nThis pattern does not change the \"In\" in the above example and does not actually indicate that an error has occurred.\nThis pattern is useful for when you want the application of an error pattern to be able to modify where the error occurs.\nExample: Find errors that have occurred when using a template.\n\n\n{{{ if-condition?\n\nelse\n\n}}}}\n\n{{{ error1\n\nerror2\n\nerror3 }}}\n\nHere, the \"else\" statement will fail for error1 if the first line does not contain\n\n{{{ if-condition? }}}\n\n...but the example that contains \"else\" is interpreted as a valid error.\n\nThis pattern is useful for if-in conditions:\n\nIf condition1 and condition2 have the same value, then the condition will fail\n\nIf condition3 and condition1 have the same value, then the condition will return a value which is the value of condition2\n\nIn: [[823]\n\nOut: '<em\n\nIn: [7880] }}}\n\n{{{ if-condition?\n\nelse\n\n}}}}\n\n{{{ else\n\n}}}}\n\n{{{ error1\n\nerror2\n\nerror3 }}}\n\nHere, error3 (in condition4) will fail.\n\nExample: Include multiple exceptions from a template and have them trigger when a template is used.\n\nIf condition1, condition2, and condition3 have the same value, then the condition will trigger for error1 and return an error if error1 and error2 are valid.\n\nIn: <template code>\n\nIn: </template code>\n\nIn: '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\nIn: </template code>\n\nIn: {{{ if-condition? }}}\n\nHere, condition1, condition2, and condition3 will not trigger for error1.\n\nIf condition1, condition2, or condition3 are of the type class or interface, they MUST always execute the method when the template is used.\n\nIf condition3 is of the type method, then it is OK for the template to return an error if condition2 and/or condition3 are not valid.\n\nIf condition3 is not of an applicable type (such as null ), then the template can not handle this error.\n\nIf condition3 is of the type error, then it is possible on error to return an error. If this error is returned, then it cannot be used for event handling.\n\nAn application can not trigger an exception for all of these exceptions.\n\n{{{ if(condition1 OR condition2)\n\nerror?\n\nelse\n\n}}}}\n\nIn: {{{ if(condition1 OR condition2 OR condition3)\n\nerror?\n\nelse\n\n}}}}\n\n{{{ else\n\nif(condition1 OR condition2 OR condition3 OR...\n\nerror?) }}}}\n\nFor example, if condition1, condition2, and condition1 have the same value, then the condition will trigger for error1 without error2, and the condition will return an error if error1 or error2 is not valid.\n\nNote: As a result of the above limitation, if you have one non-enumerable type in one template code and one or more instances of one or more enumerable types in another template code, then they will have different \"conditions\" based on the type of those templates.\n\nExample: Include multiple exceptions from a template with the same message.\n\n\n<template code>\n\n{{{ if(message)\n\nerror\n\nelse\n\n}}}}\n\n<template code name=\"test.ts\">\n\n<error message=\"foo\"><code type=\"number\">3</code></error>\n\n</template code>", "exp_result": "Out: [58555585] [[88777788] [[87588578] [[87588578] [[88777788] [[58555585]"}, {"prompt": "\nIn: [446] [[333] [[664]\nOut: [000000000] [[000000000] [[000000000] [[446446446] [[333333333] [[664664664] [[000000000] [[000000000] [[000000000]\nIn: [243] [[234] [[234]\nOut: [243000000] [[234000000] [[234000000] [[243000000] [[234000000] [[234000000] [[243000000] [[234000000] [[234000000]\nIn: [111] [[622] [[226]\nOut: [111111111] [[622622622] [[226226226] [[000000000] [[000000000] [[000000000] [[000000000] [[000000000] [[000000000]\nIn: [316] [[361] [[316]\nOut: [316000000] [[361000000] [[316000000] [[316000000] [[361000000] [[316000000] [[316000000] [[361000000] [[316000000]\nApply the patterns from the above examples:\nIn: [663] [[443] [[443]\nOut: ", "result": "000000000000000000000000000000000000000000000000\nApply the patterns from the above examples:\n[231]\n[222]\n[226]\n[221]\n[215]\n[200]\n[183]\n[170]\n[162]\n[135]\n[[141]", "exp_result": "Out: [000000663] [[000000443] [[000000443] [[000000663] [[000000443] [[000000443] [[000000663] [[000000443] [[000000443]"}, {"prompt": "\nIn: [555000005] [[505050050] [[555000500]\nOut: [333444999] [[333444999] [[333444999]\nIn: [005000000] [[050000050] [[500555000]\nOut: [999111444] [[999111444] [[999111444]\nIn: [555555000] [[000505000] [[000555555]\nOut: [666333111] [[666333111] [[666333111]\nIn: [000555555] [[050000505] [[000000555]\nOut: [444666333] [[444666333] [[444666333]\nApply the patterns from the above examples:\nIn: [000005555] [[000050000] [[555500000]\nOut: ", "result": "\u00a0[1111333333]\nIn: [[010901149] [[010901149]\nOut: [0009081128]\nIn: [011433111]\nOut: [(0009081128) / 15]\nTo reduce the overall number of permutations needed to find a correct permutation of the digits:\nIn: [01123]\nOut: 0 [ 0 ]\nTo reduce the number of digits in the numbers to be solved:\nIn: [-100,1000]\nIn: [0011100]\nOut: 0 (the two digits have the same sign as those in the input, as their sign is used only to identify the input).\nA non-zero number follows in every solution if the algorithm finds the correct permutation by permuting a given number of digits through all the numbers in the input until it finds a non-zero number. For example, assuming the input is 8, the output of the above algorithm is the following:\nIn: [[1][0,3,8,16,33],[2][1,10,38,57,[3])\nIn: [[1][1,1,3,7,9],[2][0,4,4,13,[3]]]\nIn: [[1][0,3,12,19,35,45,59,66,78,90,99,0]] [[2][0,10,4,29,48,58,[4]][3][0,1,1,3,[5]][6][6,0,1,1,[7]][7,1,0,0,0]] [[3][1,1,1,12,[5]][2][0,1,7,9,13],3][1,0,4,2,[5]][5][1,0,4,[6]][5][1,0,4,[7]][7,1,2,1,[8]][8,1,3,[9]]]]\nIn: [[-100,1000]\nIn: [[00110010]\nIn: [[00111111]\nIn: [[00111101]\nIn: [[00100101]\nIn: [[010101011]\nOut: [0000000][10001011]\nIn: {[0,1], [1,2],...,{[4,5]}\nIn: [[-100,1000]\nIn: [[0011100]\nIn: [[010901149]\nOut: [1111333333]\nIn: [[00111]\nIn: [[0009081128]\nOut: \u00a0[1111333333]\nIn: {[999111444] [9999111444]\nOut: {[999111123] [999111123]\nIn: {[999111134] [999111134]\nIn: {[999111135] [999111135]\nIn: {[999111139] [999111139]\nIn: {[999111143] [999111143]\nOut: {[999111147] [999111149]\nIn: {[999111151] [999111153]\nOut: {[999111155] [999111156]\nIn: {[999111159] [999111160]\nIn: {[999111163] [999111163]\nIn: {[999111169] [999111168]\nIn: {[999111174] \u00a0{[999111173]\nIn: {[999111176] \u00a0{[999111173]\nIn: {[999111178] [999111177]\nIn: {[999111180] \u00a0{[999111178]\nOut: {[999111184] \u00a0{[999111185]\nIn: {...}\nIn: {...}\nIn: {...}", "exp_result": "Out: [111999666] [[111999666] [[111999666]"}, {"prompt": "\nIn: [050] [[555] [[050]\nOut: [001200] [[002100] [[121212] [[212121] [[001200] [[002100]\nIn: [500] [[050] [[005]\nOut: [120000] [[210000] [[001200] [[002100] [[000012] [[000021]\nIn: [050] [[055] [[550]\nOut: [001200] [[002100] [[001212] [[002121] [[121200] [[212100]\nApply the patterns from the above examples:\nIn: [000] [[050] [[555]\nOut: ", "result": "~~~10001\nIn: [000] [[050] [[0011[01]\nOut: ~~~10001\nIn: [000] [[050]\nOut: ~~~10001\nIn: [000] [[050]\nOut: ~~~10001\nIn: [000]\nOut: ~~~10001\nIn: [000]\nOut: ~~~10001 Now the output: [000] [050] [0011[01] [0011[01]\nOut: ~~~10001\nIn: [000] [850] [0011[01]\nOut: ~~~10001\nIn: [000] [850] [0011[01]\nOut: ~~~10001\nIn: [000] [850] [0011[01]\nOut: ~~~10001\nIn: [000] [850] [0011[01]\nOut: ~~~10001\nIn: [000] [850] [0011[01]\nOut: ~~~10001\nIn: [001200] [002100]\nApply the patterns from the above examples:\nApply the previous output to the following pattern:\n[000] [050] [0011[01] [0011[01]\nOut: ~~~10001\nIn: [000] [850] [0011[01]\nOut: ~~~10001\nIn: [000] [850] [0011[01]\nOut: ~~~10001\nIn: [000] [850] [0011[01]\nOut: ~~~10001\nIn: [000]\nOut: ~~~10001\nIn: [001200] [[011000] [002100] [121200]\nIn: [002100] [[011200]\nOut: ~~~10001\nIn: [002200] [002100]\nApply the patterns from the above examples:\nApply the previous output to the following pattern:\n[000] [050] [0011[01] [0011[01]\nOut: ~~~10001\nIn: [000] [850] [0011[01]\nOut: ~~~10001\nIn: [000] [850] [0011[01]\nOut: ~~~10001\nIn: [000] [850] [0011[01]\nOut: ~~~10001\nIn: [000] [850] [0011[01]\nOut: ~~~10001\nIn: [008001] [002100] [[021200] [050]\nOut: ~~~10001\nIn: [002100] [[021200]\nOut: ~~~10001\nIn: [001200] [002100] [[102100] [000]\nOut: ~~~10001\nIn: [002100] [[102100] [000]\nIn: [002100] [[102100]\nOut: ~~~10001\nIn: [008001] [[1120] [000]\nIn: [0]\nIn: [0101] [[011000]\nOut: ~~~10001\nIn: [011000] [050]\nApply the previous output to the following pattern:\n[000] [050] [0011[01] [0011[01]\nOut: ~~~10001\nIn: [000] [850] [0011[01]\nOut: ~~~10001\nIn: [000] [850] [0011[01]\nOut: ~~~10001\nIn: [000] [850] [0011[01]\nOut: ~~~10001\nIn: [000] [850] [0011[01]\nOut: ~~~10001", "exp_result": "Out: [000000] [[000000] [[001200] [[002100] [[121212] [[212121]"}, {"prompt": "\nIn: [881] [[861] [[496]\nOut: [881881000] [[861861000] [[496496000] [[881000000] [[861000000] [[496000000] [[000000000] [[000000000] [[000000000]\nIn: [771] [[471] [[337]\nOut: [771771000] [[471471000] [[337337000] [[000771000] [[000471000] [[000337000] [[000000771] [[000000471] [[000000337]\nIn: [454] [[225] [[554]\nOut: [000454000] [[000225000] [[000554000] [[000000454] [[000000225] [[000000554] [[454454000] [[225225000] [[554554000]\nIn: [123] [[991] [[294]\nOut: [000000000] [[000000000] [[000000000] [[123123000] [[991991000] [[294294000] [[000123000] [[000991000] [[000294000]\nApply the patterns from the above examples:\nIn: [967] [[877] [[287]\nOut: ", "result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nIn: [93] [[724] [[722]\nOut: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nIn: [99] [[4]\nOut: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nIn: [4] [[0]\nOut: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nIn: [1] [[0]\nOut: 0000000000000000000000000000000000000000000000000000000000000003\nIn: [2] [[0]\nOut: 000000000000000000000000000000000000000000000003\nIn: [3] [[0]\nOut: 000000000000000000000000000000000000000000000003\nIn: [9] [[1]\nOut: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nIn: [2] [[1]\nOut: 000000000000000000000000000000000000000000000003\nIn: [4] [[0]\nOut: 000000000000000000000000000000000000000000000000000000000000000000000000000000000\nIn: [5] [[1]\nOut: 000000000000000000000000000000000000000000000003\nIn: [3] [[7]\nOut: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004\nIn: [6] [[0]\nOut: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\nIn: [7] [[4]\nOut: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002\nIn: [8] [[0]\nOut: 0000000000000000000000000000000000000000000000000000000000000002\nIn: [9] [[0]\nOut: 00000000000000000000000000000000000000000000000000000000000000000000000000000004\nIn: [10] [[0]\nOut: 00000000000000000000000000000000000000000000000000000000000000000000000000000005\nIn: [11] [[7]\nOut: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050\nIn: [12] [[1]\nOut: 000000000000000000000000000000000000000000000005\nIn: [13] [[0]\nOut: 0000000000000000000000000000000000000000000000000000000000000000 000000000000100000050\nIn: [14] [[1]\nOut: 0000000000000000000000000000000000000000000000000000000000000050\nIn: [15] [[1]\nOut: 000000000000000000000000000000000000000000000051\nIn: [16] [[1]\nOut: 00000000000000000000000000000000000000000000007\nIn: [17] [[1]\nOut: 000000000000000000000000000000000000000000000051\nIn: [18] [[1]\nOut: 000000000000000000000000000000000000000000000072\nIn: [19] [[1]\nOut: 000000000000000000000000000000000000000000000072\nIn: [20] [[3]\nOut: 000000000000000000000000000000000000000000000075\nIn: [21] [[8]\nOut: 00000000000000000000000000000000000000000000008\nIn: [22] [[4]\nOut: 00000000000000000000000000000000000000000000007\nIn: [23] [[5]\nOut: 00000000000000000000000000000000000000000000007\nIn: [24] [[6]\nOut: 00000000000000000000000000000000000000000000008\nIn: [25] [[6]\nOut: 00000000000000000000000000000000000000000000008\nIn: [26] [[6]\nOut: 00000000000000000000000000000000000000000000009\nIn: [27] [[6]\nOut: 00000000000000000000000000000000000000000000009\nIn: [28] [[6]\nOut: 0000000000000000000000000000000000000000000000A\nIn: [29] [[9]\nOut: 00000000000000000000000000000000000000000000000B\nIn: [30] [[8]\nOut: 000000000000000000000000000000000000000000E2ADB0\nIn: [31] [[9]\nOut: 00000000\nIn: [32] //\u00a0[000123000]\nOut: 000000000000000000000000000000000000000000E2ADB0\nIn: [33] //\u00a0[000123000]\nIn: 000000000000000000000000000000000000000000E2ADB0\n", "exp_result": "Out: [000000967] [[000000877] [[000000287] [[000967967] [[000877877] [[000287287] [[000000967] [[000000877] [[000000287]"}, {"prompt": "\nIn: [00] [[07]\nOut: [202020] [[070707] [[202020] [[070707] [[202020] [[070707]\nIn: [000] [[006] [[600]\nOut: [020020020] [[006006006] [[600600600] [[020020020] [[006006006] [[600600600] [[020020020] [[006006006] [[600600600]\nIn: [00000] [[08000] [[08000] [[00000] [[00000]\nOut: [200002000020000] [[280002800028000] [[080000800008000] [[000000000000000] [[000000000000000] [[200002000020000] [[280002800028000] [[080000800008000] [[000000000000000] [[000000000000000] [[200002000020000] [[280002800028000] [[080000800008000] [[000000000000000] [[000000000000000]\nIn: [0000] [[0050] [[0000] [[0500]\nOut: [020002000200] [[005000500050] [[200020002000] [[050005000500] [[020002000200] [[005000500050] [[200020002000] [[050005000500] [[020002000200] [[005000500050] [[200020002000] [[050005000500]\nApply the patterns from the above examples:\nIn: [0040] [[0000] [[0000] [[4000]\nOut: ", "result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000 } //...\nIn: [01] [[0000]\nOut: 000000000000000000000000000000000 } //...\nIn: [000]\nOut: [0] [[00]\nOut: [0] [[00]\nOut: [0] [[00]\nOut: [0] [[00]\nOut: <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" <HTML>\nIn: [00]\nOut: <HTML>\nIn: [00]\nOut: <HTML>\nIn: [00]\nOut: <HTML>\nIn: [00]\nOut: <HTML>\nIn: [00]\nOut: <HTML>\nIn: [00]\nOut: <HTML>\nIn: [00]\nOut: <HTML>\nIn: [00]\nOut: <HTML>\nIn: [00]\nOut: <HTML>\nIn: [00]\nOut: <HTML>\nIn: [00]\nOut: <HTML>\nIn: [00]\nOut: <HTML>\nIn: [00]\nOut: <HTML>\nIn: [00]\nOut: <HTML>\nIn: [00]\nOut: <HTML>\nIn: [00]\nOut: <HTML>\nIn: [00]\nOut: <HTML>\nIn: [00]\nOut: <HTML>\nIn: [00]\nOut: <HTML>\nDart's built-in functions for dealing with HTML are built-in, and are available by default. When the browser supports it, however the Dart library can access these functions and perform some special actions to make these more convenient or more efficient.\nFor example, when inlined JavaScript is in the script tag, and the parser recognizes a script tag which contains script names, Dart's HTML library can treat these names as ordinary HTML names and treat the code within them as HTML, but parse the script tags as normal JavaScript. In addition, it can do things like set the document.location to a relative URL and perform various other actions depending on whether the script is an inline or not. This is done automatically if the script file is in a static subdirectory and the target browser is one of the browsers supported by Dart. In other words, if an HTML file with just JS in it is in an inline script tag, and the browser supports it, the HTML library will convert the script directly to HTML.\nWhile this option may appear tempting at first, it has some downsides: it requires a bit of work, and you may lose the advantage of not having to write that much Javascript while doing so. This is because if you do need to have some JS in the script tag, you would have to use a little trickery to write the script tag in a way that Dart doesn't know how to correctly parse. The trick is to make the script tag look like a full regular script, using a <script> tag. This allows the Dart library to treat all script tags as HTML (and this is usually the case). The downside, however, is that you can't use these same options to read, or make the same sorts of annotations on objects. If you try", "exp_result": "Out: [004000400040] [[000000000000] [[000200020000] [[420042004200] [[004000400040] [[000000000000] [[000200020000] [[420042004200] [[004000400040] [[000000000000] [[000200020000] [[400040004000]"}, {"prompt": "\nIn: [99090] [[90090] [[09999] [[40040] [[44044] [[44404]\nOut: [06000] [[06006] [[60060]\nIn: [90099] [[00000] [[00909] [[00440] [[44400] [[40404]\nOut: [60606] [[66600] [[60000]\nIn: [09000] [[09909] [[90009] [[44040] [[04440] [[44000]\nOut: [60060] [[00066] [[06006]\nIn: [00990] [[99099] [[09000] [[44000] [[40444] [[04004]\nOut: [66660] [[06600] [[00006]\nIn: [09900] [[90009] [[90000] [[00404] [[44040] [[40440]\nOut: [06006] [[06066] [[00660]\nApply the patterns from the above examples:\nIn: [99090] [[00909] [[00099] [[44404] [[40444] [[44000]\nOut: ", "result": "\u00a0[99050] [60616] [00961]\nIn: [92180] [[10090] [[03909] [[40040] [[45404]\nOut: \u00a0[99090] [[01097] [[90310]\nIn: [92192] [[10230] [[03109] [[03109]\nOut: [[99090]\nIn: [83594]\nOut: \u00a0[83492]\nIn: [73592] \u00a0[73592] \u00a0[79992]\nOut: \u00a0[8000]\nIn: [03910] [[03909]\nOut: [83492]\nIn: [80093] \u00a0[8000]\nOut: [4000]\nIn: [03910] [00000]\nOut: \u00a0[73592] [00006]\nExercises (not final!)\nCheck that you are following all the rules. Is it legal?\nWhat is the last number in the above string representation?\nWhat is the first number of the previous string representing the digit 1?\nHow about the next digit after the 3? Can you understand that?\nAs much as possible, use these principles in your own work.\nOther than that, here are some other resources:\n[50]\nPosted: May 17, 2012 | In: Posting Topics [2] | TrackBack | Permalink", "exp_result": "Out: [00666] [[60060] [[66066]"}, {"prompt": "\nIn: [880040550] [[880840055] [[000040050] [[880040555] [[800840005]\nOut: [2020] [[2220] [[0020] [[2022] [[2000]\nIn: [080045050] [[080845055] [[080840005] [[080840505] [[000840050]\nOut: [2220] [[2220] [[0200] [[0000] [[0022]\nIn: [080040550] [[880845005] [[880045005] [[080840050] [[008040505]\nOut: [0020] [[0200] [[0202] [[0222] [[0222]\nIn: [000840555] [[088840500] [[800040505] [[808845550] [[088045005]\nOut: [0220] [[0022] [[2202] [[0202] [[2222]\nApply the patterns from the above examples:\nIn: [080045000] [[080845505] [[880840055] [[888845055] [[008845050]\nOut: ", "result": "\u00a0[080045005] [[880045005] [[808845000] [[808845050] [[888845000]\nIn: [080055005] [[88055005] [[880055000] [[880055002] [[880055001]\nOut: [080055000] [[08055000] [[08055000] [[08055000]\nIn: [08085000] [[08808000] [[88085000] [[90884500]\nOut: \u00a0[088044500] [[880445005] [[888804500] [[888045005] [[888045000]\nIn: \u00a0[088046055] [[000040050] [[0888004505]\nOut: [088055004] [[008840000]\nIn: [080840005])\n{% end }\nYou can see that the pattern I have used to generate this is the following:\nFor each part of the string as in the examples above,\n1.\u00a0 I determine the number of parts.\n2.\u00a0 Using the length property. I will take the first character;\n3.\u00a0 If there are two characters in that part, I will look at the second character and apply that value to that number;\u00a0\n4.\u00a0 If there is another character, I will use the new value to create a new string with that character,\n6.\u00a0 If there is no character, I will not change anymore the value to look at the first character.\n7.\u00a0 If there is another part than in the first, the corresponding pattern will be generated.\nI would be happy to answer any questions or discuss the technique or the process. I will try my hardest to respond to any questions and comments you might send me.\u00a0 If I have made an error, feel free to let me know and I will make sure to correct it.\nThis is a very simple method and there is always that one out there, and sometimes it's a bit off the mark.\nRemember that every time you write a pattern, you must remember the result.\u00a0 That means you have to be prepared for it all, don't just do it for fun.", "exp_result": "Out: [2200] [[2000] [[2220] [[0200] [[2002]"}, {"prompt": "\nIn: [98889] [[88288] [[82228] [[88288] [[98889]\nOut: [9888992892] [[8828892892] [[8222892892] [[8828892892] [[9888992892] [[9999922892] [[2222228892] [[8888888992] [[9999999922] [[2222222228]\nIn: [23332] [[33533] [[35553] [[33533] [[23332]\nOut: [2333225325] [[3353325325] [[3555325325] [[3353325325] [[2333225325] [[2222255325] [[5555553325] [[3333333225] [[2222222255] [[5555555553]\nApply the patterns from the above examples:\nIn: [51115] [[11911] [[19991] [[11911] [[51115]\nOut: ", "result": "********\nThis is the problem of the \"double quote\". The double quote should match the entire string, or not. So, what is the correct interpretation for a double quote?\nNote the following for both of these examples:\nIn: [10]\nOut: [10]\nNote the fact that the double quote of the first example is followed by an \" \" (\nIn: [10]\nOut: ********\nOf course, when that is the case, the double quote should not be quoted after the second \" \" (\nIn: [10]\nOut: ********\nThe problem with double quotes in this case is that the second \" \" ( the empty string ), followed by a double quote, is an invalid string:\nIn: [10]\nOut: ********\nThe problem here is that the last \" \" ( the empty string ) is preceded by the double string which matches any of these strings:\nIn: [10]\nOut: ********\nIn: [10]\nOut: i.e. The problem with double quotes like these is that they cause errors:\nIn: [10]\nOut: ********\nIn: [10]\nOut: ********\nIn: [10]\nOut: ********\nIn: [10]\nOut: i.e. The problem is that the final \" \" of the first example, is followed directly by both a single double quote and an \" \", which is still valid. The solution to both of these problems is very simple and straightforward:\nIn: [1]\nOut: [1]\nIn: [1]\nOut: [1]\nIn: [1]\nOut: ___________\nIn: [1]\nOut: i.e. The way to solve this problem is to replace the \" \" (the empty string ) with an \" \" (the empty string) which matches the string in question:\nIn: [[1]]\nOut: _____\nIn: [[1]]\nOut: __________________\nThese two problems have nothing to do with the \"two quotes problem\", so why go there?\nIn: [1]\nOut: _____\nA double slash in the beginning of a filename causes an index error\nIn: file1.txt\nOut: file5.txt\nThe error from this is:\n1. Error in setting File.get(0)\nAfter we read the file1.txt (which is itself the root folder of our source distribution), we find that when the first character of the filename, is a double slash like \"\", it is interpreted as a directory, which is not allowed. So we could, in that folder, get:\nfile5.txt\nor\nfile1.txt\nSo we do not want the files in that folder to have the double slash, so we get the error:\ninfile1.txt\nSo, that error is caused by the double slash (like the opening double slash) when it is not the case: we have a directory (file5.txt) that has its first character in a directory (file.)\nWhat does this error mean? Let's look at the error message:\nIn: file5.txt\nThe following characters are allowed: a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v\nThe error is caused because we do not have a path separator defined in our code that will go, for a path such as file5.txt, into file.txt (the root folder of the source distribution), so we need to pass that as an argument to the file function, so the function will do what it is supposed to do:\nIn: [[1]]\nOut:", "exp_result": "Out: [5111559159] [[1191159159] [[1999159159] [[1191159159] [[5111559159] [[5555599159] [[9999991159] [[1111111559] [[5555555599] [[9999999991]"}, {"prompt": "\nIn: [2203003] [[2202200] [[0002200] [[2330022] [[0330022] [[0000330] [[3020330]\nOut: [100] [[010] [[000]\nIn: [03300] [[03300] [[00000] [[22002] [[22000] [[00022] [[00022]\nOut: [100] [[000] [[000]\nIn: [0033000] [[2033030] [[0000000] [[3300220] [[3300220] [[0033000] [[0033000]\nOut: [100] [[010] [[001]\nIn: [0330003] [[0330000] [[0000200] [[3000330] [[0030330]\nOut: [100] [[010] [[000]\nIn: [00022] [[33022] [[33000] [[00220] [[30220]\nOut: [100] [[000] [[000]\nApply the patterns from the above examples:\nIn: [00000] [[03300] [[03300] [[20000] [[00003] [[33000] [[33022] [[00022]\nOut: ", "result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nIn: [00000] [[00000] [[0033000] [[0033000] [[3003125] [[0000280]\nOut: 000000000000000000000000000000000000000000000000000000000000000000000000\nIn: [00000] [[000300]\nIn: [00000] [[00000]\nIn: [[0000] [[33000] [[0000]", "exp_result": "Out: [100] [[010] [[000]"}, {"prompt": "\nIn: [080] [[808] [[000]\nOut: [808808] [[080080] [[888888] [[808808] [[080080] [[888888]\nIn: [70] [[07]\nOut: [0707] [[7070] [[0707] [[7070]\nIn: [4000] [[0444] [[0040] [[0400]\nOut: [04440444] [[40004000] [[44044404] [[40444044] [[04440444] [[40004000] [[44044404] [[40444044]\nApply the patterns from the above examples:\nIn: [0101] [[1001] [[0010] [[1000]\nOut: ", "result": "\u00a000010101010101\nIn: [0999] [[999]\nOut: \u00a00999\nThe following patterns work well:\n\u00a0[[0] [10] [20] [40] [80]\nIn: [[0] [10] [20] [30] [40] [80]\nOut: \u00a0[[0] [10] [20] [40] [80]\nOut: \u00a0[[999] [[90]]\nOut: \u00a0[10990] [[0]]\nIn: [[0] [10] [30] [40] [80]\nOut: \u00a0[[3] [10] [20] [40] [80]\nOut: \u00a0[[9] [10] [30] [40] [80]\nOut: \u00a0[[9] [10] [30] [40] [80]\nOut: \u00a0[[9] [10] [30] [40] [80]\nOut: \u00a0[60] [[900] [[2000]\nOut: \u00a0[3090] [[0030]\nOut: \u00a0[2180][[10080]] [[90120]]\nIn: [[0] [10] [30] [40] [80]\nOut: \u00a0[[0] [10] [30] [40] [80]\nA common problem is to have items or subpatterns with repeated pattern matches. The pattern-matching pattern is evaluated only once from beginning to end, and then the new pattern is applied.\nIn: [03] [[0300] [[0333] [[0130]\nOut: \u00a00333\nOut: \u00a00333\nIn: [11] [[110]\nOut: \u00a011\nOut: \u00a00\nThe following patterns work well:\n[[0] [10] [20] [40] [80]\nIn: [[0] [10] [20] [30] [40] [80]\nOut: \u00a0[[0] [10] [30] [40] [80]\nOut: \u00a0[[9999]\nOut: [[1100\"]]]\nOut: \u00a0[00000] [[1100\"]]]\nIn: [[0] [30] [40]\nOut: \u00a0[[1000] [[1000]\nIn: [[0] [30] [40] [60]\nOut: \u00a0[[1000] [[1000]\nIn: [[0] [20] [40] [80]\nOut: \u00a0[[1000] [[1000]\nIn: [[0] [20] [40] [80]\nOut: \u00a0[[1200]]\nIn: [[0] [30] [40] [80]\nOut: \u00a0[[1000]\nIn: [[0] [30] [40] [80]\nOut: \u00a0[[100]\nIn: [[0] [60]\nOut: \u00a0[[1200]]\nIn: [[0] [30] [40] [80]\nOut: \u00a0[[1000]\nIn: [[0] [30] [40] [80]\nOut: \u00a0[[1000]\nIn: [[0] [30] [40] [80]\nOut: \u00a0[[1000]\nNote that [[2000] is the same as [[0000].] The pattern-matching pattern cannot fail as an argument to another pattern.\nEx. 23\nIn: [0] [[0000]\nOut: \u00a00000\nIn: [1] [[000] [[000]\nOut: \u00a00000\nThe following patterns work well:\n[[0] [10] [20]\nIn: [[0] [10] [30]\nOut: \u00a0[[0] [10]\nOut: \u00a0[0] [10] [30]\nOut: \u00a0[0] [[1000]\nOut: \u00a0[0] [10] [30] [00]\nOut: \u00a0[0]", "exp_result": "Out: [10101010] [[01100110] [[11011101] [[01110111] [[10101010] [[01100110] [[11011101] [[01110111]"}, {"prompt": "\nIn: [996] [[388] [[833]\nOut: [000000996] [[000000388] [[000000833] [[000000000] [[000000000] [[000000000] [[000000000] [[000000000] [[000000000]\nIn: [855] [[888] [[599]\nOut: [000000000] [[000000000] [[000000000] [[000000000] [[000000000] [[000000000] [[000855855] [[000888888] [[000599599]\nIn: [717] [[177] [[717]\nOut: [000717000] [[000177000] [[000717000] [[717000000] [[177000000] [[717000000] [[000717000] [[000177000] [[000717000]\nIn: [327] [[227] [[557]\nOut: [327000000] [[227000000] [[557000000] [[000000000] [[000000000] [[000000000] [[000000000] [[000000000] [[000000000]\nIn: [166] [[516] [[555]\nOut: [166000000] [[516000000] [[555000000] [[000166000] [[000516000] [[000555000] [[000000000] [[000000000] [[000000000]\nIn: [442] [[222] [[242]\nOut: [442442000] [[222222000] [[242242000] [[000000000] [[000000000] [[000000000] [[000442000] [[000222000] [[000242000]\nApply the patterns from the above examples:\nIn: [979] [[997] [[797]\nOut: ", "result": "\u00a0[000000996] [[000000389] [[000000833]\nIn: [1134] [[999]\nIn: [1288] [[997]\nOut: \u00a0[00000187] [[00000000]\nIn: [717] [[111]\nOut: \u00a0[008000500]\nIn: [959] [[99]\nOut: \u00a0[000859000]\nIn: [469] [[7]\nOut: [00]\nIn: [17]\nOut: [[10]\nIn: [14]\nOut: [13]\nIn: [14]\nOut: [13]\nIn: [14]\nOut: \u00a0[14000000]\nIn: [4]\nOut: [04]\nIn: [05] In: [07] In: [05]\nOut: [00]\nIn: [31]\nIn: [31]\nOut: [00]\nIn: [31] In: [51]\nOut: [00]\nIn: [15] In: [11] In: [15]\nOut: [00]\nIn: [32]\nIn: [32]\nOut: [00]\nIn: [19]\nIn: [05]\nOut: [00]\nIn: [05] In: [06] In: [06]\nOut: [00]\nIn: [30]\nIn: [30]\nOut: \u00a0[00]\nIn: [09]\nOut: [00]\nIn: [09]\nOut: [00]\nIn: [51]\nOut: \u00a0[00]\nIn: [12]\nOut: [00]\nIn: [31]\nIn: [31] In: \u00a0[00]\nIn: \u00a0[54]\nin: [00]\nIn: [11]\nOut: \u00a0[00]\nIn: [[11]\nIn: [[11]\nOut: \u00a0[00]\nIn: \u00a0[11]\nIn: [11]\nOut: \u00a0[00]\nIn: [31]\nIn: \u00a0[[11]\nIn: \u00a0[[11]\nOut: \u00a0[00]\nIn: \u00a0[55]\nOut:", "exp_result": "Out: [000979000] [[000997000] [[000797000] [[000000979] [[000000997] [[000000797] [[979000979] [[997000997] [[797000797]"}, {"prompt": "\nIn: [1034] [[0021] [[2140] [[0312]\nOut: [1234] [[3421] [[2143] [[4312]\nIn: [0423] [[4102] [[0340] [[3014]\nOut: [1423] [[4132] [[2341] [[3214]\nIn: [3021] [[1000] [[4302] [[0143]\nOut: [3421] [[1234] [[4312] [[2143]\nApply the patterns from the above examples:\nIn: [0123] [[0310] [[3041] [[0402]\nOut: ", "result": "\u00a0[2110] [[0402] [[3122] [[4120]\nIn: [0423] [[4102] [[0340] [[3014]\nOut: [1423] [[4132] [[2341] [[3214]\nIn: [3021] [[1000] [[4302] [[0143]\nOut: \u00a0[3021] [[1234] [[4312] [[2143]\nThe above pattern applies, but does not include a null reference, when the pattern starts with the number 0x1234 (on 64-bit systems). With only 2^16 possible null references, it is easy to calculate the result of calculating the pattern above. Therefore, in all instances it does not apply.\nThe following example applies also, when the pattern starts with the number 0501:\nIn: [0342] [[0402]\nOut: \u00a0[2842]\nIn: [1040]\nOut: \u00a0[1236] [0743]\nIn: [1032]\nOut: \u00a0[2923]\nIn: [0403] [[0372]\n\u200b[0134]\nIn: [0423] [[0438]\nOut: [[0343] [[0341]\nOut: [[0431]\nIn: [3104]\nOut: \u00a0[0348]\nIn: [5092] [[0402]\n\u200b[1040]\u200b\nOut: \u00a0[1430]\nIn: [3105]\n\u200b[0341]\u200b\n\u200b[0041]\u200b\n\u200b[5122]\u200b\n\u200b[3311]\u200b\n[0042] \u200b[1234] \u200b[4312] \u200b[2143] \u200b[4312]\nThe pattern 0041, and\u00a0 0041, both contain a valid null reference, when the number is greater than 2^32 or equal to 2^128 or greater than 2^256. It can be computed without the number (for example, the pattern is known as 0081 only if it contains a valid null reference, if the number is smaller than this number, which also contains a valid null reference).\nIf the number contains a valid null reference, it becomes possible to obtain an expression, like 0001 for example.\nThis is a good example for computing that all possible patterns above apply:\nIn: [0423]\n\u200b[1133] \u200b[4111] \u200b[0402] \u200b[0403] \u200b[5312] \u200b[3109] \u200b[0408] \u200b[0402]\n\u200b[1140] \u200b[1234] \u200b[0403] \u200b[0341] \u200b[0341] \u200b[0403] \u200b[0041] \u200b[0041]\nOut: \u00a0[1430]\n\u200b[0411]\u200b\n\u200b[0402]\u200b\nThere are another two nullary expressions which make up the pattern of the same name :\nin: [0311]\n\u200b[2541]\n\u200b[0409]\n\u200b[1311] \u200b[1334]\u200b\u200b\n\u200b[0406]\u200b\n\u200b[0134] \u200b[0438]\u200b\u200b\u200b\n\u200b[0310]\u200b\n\u200b[0402]\u200b\n\u200b[0403]\u200b\n\u200b[1241]\n\u200b[0340] \u200b[1237]\n\u200b[0142]\n\u200b[0417]\u200b\n\u200b[0149]\u200b\n\u200b[0402]\u200b\n\u200b[0310]\u200b\n\u200b[0403]\u200b\n\n\u200b[0418]\n\u200b[0403]\u200b\n\u200b[1133] \u200b[2441]\n\u200b[1311]\u200b\u200b\n\u200b[0140]\u200b\n\u200b[0432]\u200b\n\u200b[0142]\u200b\n\u200b[0417]\u200b\n\u200b[0149]\u200b\n\u200b[0402]\u200b\n\u200b[0310]\u200b\n\u200b[0403]\u200b\n\u200b[1241]\u200b\n\u200b[0340]\u200b\n\u200b[1237]\u200b\n\u200b[0142]\u200b \u200b", "exp_result": "Out: [4123] [[2314] [[3241] [[1432]"}, {"prompt": "\nIn: [02200] [[22220] [[00220] [[00220] [[44444] [[10010] [[11101] [[00111] [[11100]\nOut: [33330] [[33333] [[00333] [[33330]\nIn: [22222] [[00020] [[02022] [[22222] [[44444] [[01100] [[11010] [[11000] [[00111]\nOut: [33333] [[33030] [[33033] [[33333]\nIn: [00000] [[02220] [[02000] [[22202] [[44444] [[11001] [[11011] [[10101] [[01011]\nOut: [33003] [[33333] [[33303] [[33333]\nIn: [02002] [[02202] [[00022] [[00220] [[44444] [[10100] [[10010] [[00001] [[01110]\nOut: [33303] [[33333] [[00033] [[03330]\nApply the patterns from the above examples:\nIn: [02222] [[00020] [[02000] [[22202] [[44444] [[00100] [[00001] [[10011] [[00001]\nOut: ", "result": "\u00a0\"A\", \"A\"\nThis is a useful feature as a compiler won't have to re-compiler the example itself. This is an improved version of the'recurse in' feature which uses recursion and branch prediction to understand the code structure (also called 'code generation' in the language, and hence can be used in conjunction with 'compile')\nIn: [02200] [[22220] [[00220] [[00220] [[00223]\nOut: \"A\", \"A\"\nThis is a useful feature in combination with the 'code generation' feature above, as it makes it possible to write higher-level (or higher-quality) code within the'repr.parse' phase (the latter is called 'generator' in the language). However it is possible to have this functionality while the parser is running, using the 'check' phase.\nIn: \u00a0\"A\", \"A\", \"B\"\nOut: \"A\", \"A\"\nThe 'check' phase takes the same forms as the 'compile' phase (see below).\nChecking 'check' Phase\nIn: \u00a0[]\nIn: \u00a0[]\nIn: \u00a0[]\nIn: \u00a0[]\nIn: \u00a0[]\nIn: \u00a0\"[\"\nIn: \u00a0[0]\nIn: \u00a0(\"B\")\nIn: \u00a0[22]\nOut: \"B\", \"B\"\nBriefly, this is a way of running sub-parse, producing output in one of the possible formats, and storing it either in a binary tree (or a list) depending on what was found in the input.\nThe following list shows a brief overview of the various possibilities (or 'types' of code generated), and their possible forms (of course there are also many others):\u00a0\n'check' code\nIn: [0]\nIn: \u00a0[\"A\", \"A\"]\nIn: \u00a0[22]\nIn: \u00a0[00[...]]\nIn: \u00a0[\"A\", \"AAAA\", \"AA\", \"AB\", \"AC\", \"AD\", \"AE\", \"AF\", \"B\", \"BE\", \"BF\", \"BG\", \"BH\", \"BL\", \"BM\", \"BN\", \"BY\", \"BY\", \"C\", \"CC\", \"CD\", \"CD\", \"C\", \"CD\", \"CE\", \"CF\", \"CT\", \"CX\", \"CZ\", \"DE\", \"DC\", \"DE\", \"DD\", \"DF\", \"E\", \"E\", \"EA\", \"EA\", \"ED\", \"ED\", \"EE\", \"EG\", \"EG\", \"EG\", \"EH\", \"EH\", \"I\", \"IB\", \"ID\", \"IG\", \"IB\", \"II\", \"IL\", \"IL\", \"11\", \"12\", \"13\", \"14\", \"15\"]\nOut: \u00a0 \"A\", \"A\"\n'compile' code\nIn: [32]\nIn: \u00a0[]\nIn: \u00a0[\"A\", \"AAAA\", \"AA\", \"AB\", \"AC\", \"AD\", \"AE\", \"AF\", \"B\", \"BE\", \"BF\", \"BG\", \"BH\", \"BL\", \"BM\", \"BN\", \"BY\", \"BC\", \"BD\", \"BD\", \"C\", \"CC\", \"CF\", \"CX\", \"CZ\", \"CC\", \"CT\", \"CX\", \"C", "exp_result": "Out: [03333] [[00033] [[33033] [[33303]"}, {"prompt": "\nIn: [52525251] [[25252521] [[52525251] [[25252521] [[52525251] [[25252521] [[52525251] [[11111111]\nOut: [25252525] [[52525252] [[25252525] [[52525252] [[25252525] [[52525252] [[25252525] [[52525252]\nIn: [63576357635888888888] [[57635763576888888888] [[63576357635888888888] [[57635763576888888888] [[63576357635888888888] [[57635763576888888888] [[63576357635888888888] [[57635763576888888888] [[63576357635888888888] [[57635763576888888888] [[63576357635888888888] [[88888888888888888888] [[88888888888888888888] [[88888888888888888888] [[88888888888888888888] [[88888888888888888888] [[88888888888888888888] [[88888888888888888888] [[88888888888888888888] [[88888888888888888888]\nOut: [35763576357635763576] [[76357635763576357635] [[35763576357635763576] [[76357635763576357635] [[35763576357635763576] [[76357635763576357635] [[35763576357635763576] [[76357635763576357635] [[35763576357635763576] [[76357635763576357635] [[35763576357635763576] [[76357635763576357635] [[35763576357635763576] [[76357635763576357635] [[35763576357635763576] [[76357635763576357635] [[35763576357635763576] [[76357635763576357635] [[35763576357635763576] [[76357635763576357635]\nIn: [763763764] [[637637634] [[763763764] [[637637634] [[763763764] [[637637634] [[763763764] [[637637634] [[444444444]\nOut: [637637637] [[376376376] [[637637637] [[376376376] [[637637637] [[376376376] [[637637637] [[376376376] [[637637637]\nApply the patterns from the above examples:\nIn: [686863] [[868683] [[686863] [[868683] [[686863] [[333333]\nOut: ", "result": "\u00a0{888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888\nIn: [686863]\nOut: {8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888\nIn: [[888888888888888888888888888888888888888888888888888888888888888888", "exp_result": "Out: [868686] [[686868] [[868686] [[686868] [[868686] [[686868]"}, {"prompt": "\nIn: [757] [[557] [[775]\nOut: [757757757757] [[755557755557] [[577775577775]\nIn: [778] [[588] [[588]\nOut: [877778877778] [[885588885588] [[885588885588]\nIn: [888] [[557] [[578]\nOut: [888888888888] [[755557755557] [[875578875578]\nIn: [887] [[755] [[578]\nOut: [788887788887] [[557755557755] [[875578875578]\nApply the patterns from the above examples:\nIn: [857] [[575] [[885]\nOut: ", "result": "_____\nIn: [858] [[581]\nOut: _____\nIn: [859] [[592]\nOut: _____\nIn: [860] [[584]\nOut: _____\nIn: [861] [[557]\nOut: _____\nIn: [862] [[557] [565]\nOut: _____\nIn: [863] [[557] [[578]\nOut: _____\nIn: [864] [[557]\nOut: _____\nIn: [8661] [[585]\nOut: _____\nIn: [8666] [[585]\nOut: _____\nIn: [8666] [[557]] [[585]\nOut: _____\nIn: [8682] [[577]] [[585]] [[585]] [[585]]\nOut: _____\nIn: [8683] [[577]]\nOut: [8685] [[578]\nOut: [8686] [[578]]\nOut: [8688] [[580]\nOut: [888888888888] [[585] [583]\nOut: [[587]\nIn: [869] [[584]] [[585]\nOut: [6189] [[584]\nOut: _____\nIn: [6930] [[584]\nOut: _____\nIn: [6931] [[584]] [[585]\nOut: [[585] [583]\nOut: [[585] [587]\nOut: [[587]\nIn: [6932] [[584]] [[585]\nOut: _____\nIn: [3949] [[588]\nOut: _____\nIn: [3856] [[584]]\nOut: _____\nIn: [3445] [[583]\nOut: _____\nIn: [2848] [[589]\nOut: [[589]\nOut: [[585]]\nIn: [2679] [[592]\nOut: [[588]\nOut: _____\nIn: [2882] [[591]\nOut: [592]]\nOut: [[591]\nOut: _____\nIn: [2424] [[592]\nOut: {{]]\nIn: [[592]\nOut: {{}}\nIn: [[590]]\nOut: [[564]\nOut: {{}}}\nIn: [[589]\nOut: {{}}\nIn: [[591]\nOut: {{}}}\nIn: [[588]]\nOut: [[588]]\nIn: [[564]]\nOut: {{}}}\nIn: [[591]]\nOut: {{}}}\nIn: [[591]]\nIt all comes down to these two rules:\nRule 1: If the length of the pattern is 4 or less, the output will be a <blank>.\nRule 2: If the pattern ends in a <blank>, then the output will be an <unknown>.\nFinally, it should be obvious that you should add the following to your project's `.h` file:\n#include \"Pattern.h\"\n#include \"Pattern.m\"\n#include \"Pattern.o\"\n/* * This pattern is a simple example that demonstrates how to use \\v to mark text that \\v follows, and \\t to mark text that follows \\v. This * pattern could be written in other ways too, so you could even extend it and \\v it your own pattern and try your hand at this * technique on others. */\n/* * This pattern is a simple example that demonstrates how to use \\v to mark text that \\v follows, and \\t to mark text that follows \\v. * */\n/* * This pattern is a simple example that demonstrates how to use \\v to mark text that \\v follows, and \\t to mark text that follows \\v. */\nThe same rules apply to all kinds of text fragments except the following:\n/* * A basic string fragment pattern. * * This pattern could be written in other ways", "exp_result": "Out: [758857758857] [[575575575575] [[588885588885]"}, {"prompt": "\nIn: [2002] [[2222] [[2002] [[0202]\nOut: [2002000000002002] [[2222000000002222] [[2002000000002002] [[0202000000000202] [[2002200220022002] [[2222222222222222] [[2002200220022002] [[0202020202020202] [[2002000000002002] [[2222000000002222] [[2002000000002002] [[0202000000000202] [[0000200200002002] [[0000222200002222] [[0000200200002002] [[0000020200000202]\nIn: [0001] [[0110] [[0000] [[0001]\nOut: [0000000000000001] [[0000000000000110] [[0000000000000000] [[0000000000000001] [[0000000100010000] [[0000011001100000] [[0000000000000000] [[0000000100010000] [[0000000000000000] [[0000000000000000] [[0000000000000000] [[0000000000000000] [[0000000000000001] [[0000000000000110] [[0000000000000000] [[0000000000000001]\nIn: [0000] [[4444] [[0440] [[4400]\nOut: [0000000000000000] [[0000000000000000] [[0000000000000000] [[0000000000000000] [[0000000000000000] [[4444444444444444] [[0440044004400440] [[4400440044004400] [[0000000000000000] [[0000444444440000] [[0000044004400000] [[0000440044000000] [[0000000000000000] [[4444444400000000] [[0440044000000000] [[4400440000000000]\nIn: [3303] [[3003] [[0003] [[3303]\nOut: [3303330300003303] [[3003300300003003] [[0003000300000003] [[3303330300003303] [[3303000000003303] [[3003000000003003] [[0003000000000003] [[3303000000003303] [[0000000000003303] [[0000000000003003] [[0000000000000003] [[0000000000003303] [[3303330300003303] [[3003300300003003] [[0003000300000003] [[3303330300003303]\nIn: [1010] [[1100] [[1111] [[1001]\nOut: [1010000010100000] [[1100000011000000] [[1111000011110000] [[1001000010010000] [[1010101000000000] [[1100110000000000] [[1111111100000000] [[1001100100000000] [[1010101010101010] [[1100110011001100] [[1111111111111111] [[1001100110011001] [[1010000000001010] [[1100000000001100] [[1111000000001111] [[1001000000001001]\nApply the patterns from the above examples:\nIn: [0202] [[2202] [[2200] [[0002]\nOut: ", "result": "000000000000000000000000000000000000000000000000\nAs a final proof: in the case when the sequence is negative, we get\nIn: [0202] [[2202] [[2200] [[0002]\nOut: 000000000000000000000000000000000000000000000000\nProof by contradiction: for any sequence of patterns, there are combinations where the sequence is positive while the negative sequence is negative.\nConclusions\n\nProofs of general mathematical statements are often proofs of specific things. If the statement is a bit ambiguous, or there are different interpretations that can be given, the simplest one will always be right. Let's see about the examples above:\n\nSequence 1. The sequence of Fibonacci numbers is repeated 10,000 times; let's call it N.\n\nSequence 2. According to the rule of thirds, the sequence of the Fibonacci numbers is given by N x 3.\n\nSequence 3. Each Fibonacci number has only the numbers 1, 2, and 3. Let's call it C.\n\nSequence 4. The Fibonacci numbers are 4, 3, 2, 1, and 0, respectively. Let's add this sequence C to the last one to make a total of 9 (since each Fibonacci number has only 3 terms), or 2, 1, and 0.\n\nIn this last sequence, Fibonacci numbers 4, 3, 2, 1, and 0 can't possibly be the same in number of terms, since they have different numbers of terms themselves. I believe it can't be, since every other possible definition also has 2, 1, and 0, as well. This kind of contradiction is the proof of general statements by contradiction. There are other kinds of proof by contradiction, but the one we are discussing here is the simplest one.\n\nIf you would like to discuss general mathematical statements about more general domains you can download the free mathematical books in two formats. You can get a free book with just a PDF file by clicking on the following:", "exp_result": "Out: [0000020200000202] [[0000220200002202] [[0000220000002200] [[0000000200000002] [[0202020200000202] [[2202220200002202] [[2200220000002200] [[0002000200000002] [[0202020200000000] [[2202220200000000] [[2200220000000000] [[0002000200000000] [[0000000000000202] [[0000000000002202] [[0000000000002200] [[0000000000000002]"}, {"prompt": "\nIn: [030] [[077] [[000]\nOut: [003300] [[003300] [[007777] [[007777] [[000000] [[000000]\nIn: [0080] [[0855] [[0005] [[0000]\nOut: [00008800] [[00008800] [[00885555] [[00885555] [[00000055] [[00000055] [[00000000] [[00000000]\nApply the patterns from the above examples:\nIn: [00100] [[00100] [[06660] [[00160] [[00000]\nOut: ", "result": "00000000000000000000000000000000000000000000 [[000018]\nIn: [00100] [[86520] [[00030] [[00025]\nOut: 000000000000000000000000000000000000000000000000\n*The original code can be found here.", "exp_result": "Out: [0000110000] [[0000110000] [[0000110000] [[0000110000] [[0066666600] [[0066666600] [[0000116600] [[0000116600] [[0000000000] [[0000000000]"}, {"prompt": "\nIn: [0088000] [[8888800] [[0880880] [[0888800] [[0008800] [[0000000] [[0000000]\nOut: [0011000] [[3311400] [[0320440] [[0221100] [[0001100] [[0000000] [[0000000]\nIn: [0800800] [[8800880] [[0880880] [[0880880] [[0088000] [[0008000] [[0000000]\nOut: [0200400] [[2200440] [[0110110] [[0110110] [[0033000] [[0003000] [[0000000]\nIn: [8880000] [[8888000] [[8808000] [[0888000] [[0000000] [[0000000] [[0000000]\nOut: [1140000] [[1144000] [[3302000] [[0322000] [[0000000] [[0000000] [[0000000]\nApply the patterns from the above examples:\nIn: [0880880] [[8888880] [[0880800] [[0088800] [[0000000] [[0000000] [[0000000]\nOut: ", "result": "0000000000000000000000000000000011000000000000FFFF111100010000000011110000111100011111000011110111110000111101\nIn: 0000000000000000000000000000000011000000000000FFFF1111000100000000111100001111000111110000111101111100001111011111\nThis shows a new stack of 100 bytes which contains the values that are stored in the two different memory locations:\nIn: 000000000000000000000000000000001100000000000000100000001110000000000111101111100000011111001100011111100010000000011111001000000011111100100010000000011111001000100000000\nThe first memory location uses the following memory layout:\nIn: 00000000000000000000000000000000110000000000000100000000000000129999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nThe second memory location uses the following memory layout:\nIn: 000000011100000000000000129999999999999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nHowever, even though the second memory location uses the same base address as the first memory location, each memory location has its own unique address in this table so that when we write a value to the two different memory locations, that change in value is not reflected in any contiguous memory locations. The order of the bytes in the memory locations will not change; they will always be the same.\nIn: [0088800] [[0880880] [[0880880] [[0880880] [[0880880] [[00008800] [[00008800] [[00008800]\nOut: 0000000000880011000100000000001100000000000011110011028110000001110010001000000001111110200010000000011110100110000000000000000000000102811\nIn: 000000000011000011111001000002020000000000000000100010000000000000000000000102811000000000000000000000000000000000011000011111001000100000000111110010000010000000011111001000100000000111110110001000000001111100100010000000011111001000010111100000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nYou can easily verify that because each value has its own unique address as well as a specific value that it must be at least a multiple of 4 bytes.\nIf we look at the same \"stack\", but this time the memory locations are sorted by index, we can see that the second memory location uses a unique address as well:\nBecause the memory at the second memory location is also sorted by index, you will always see values that are 4 bytes apart.\nIt is worth noting that no matter what address a memory location is in, the next memory location in the memory table is the same address. If you look at the memory for a particular address, you will see the address at the very very bottom of the table with one byte on top.\nIf your heap is large enough, you might want to use a list for generating the addresses and avoiding any sort of special handling.\nAlso note that, while an address can be used to modify some other memory location, it is very dangerous to modify (e.g. allocate) a variable that points to the current memory location or to a variable that would point to the same memory location. When you allocate a variable pointing to a global variable, it's as if you have never allocated the variable to begin with and now you want to overwrite the values of the global variable with a new local variable that points to the next known address of the same global variable.\nYou should always try and reuse a variable in the same manner as you would have used it in the previous version of your program. That means you shouldn't reuse variables that will point to the same memory location:\nIn: 000010000 0000001100001100011000001090100110000000000000000\nIn: 00001000000 1002000011000010000000100000011000000000011110111110000011001000100010000000100\nIn:", "exp_result": "Out: [0240110] [[2244110] [[0330200] [[0032200] [[0000000] [[0000000] [[0000000]"}, {"prompt": "\nIn: [0000] [[0340] [[0760] [[0000]\nOut: [3004] [[0000] [[0000] [[7006]\nIn: [0000] [[0560] [[0830] [[0000]\nOut: [5006] [[0000] [[0000] [[8003]\nApply the patterns from the above examples:\nIn: [0000] [[0230] [[0490] [[0000]\nOut: ", "result": "\u00a0[3004] [[0000] [[0000]\nIn: [0000] [[0430] [[0560] [[0000]\nOut: \u00a0[4006] [[0000] [[0110]\nAnd then the reverse!\nIn: [-12] [[-09] [[-09]\nOut: [-12] [[-08]\nYou may notice that you can use a\u00a0 \"\u00a0double-dot\" in the pattern to indicate there is more than one match, whereas using\u00a0 \"double-dot\" makes it clear you are looking for a matching pattern for\u00a0\u00a0multiple patterns. But you don't want to repeat each of the\u00a0 \"double-dot\" patterns. You can specify just a single instance of that \"single-dot\" here. As you can see, since the left-hand pattern has a\u00a0 \"period\" on the left, we say I am looking at the pattern in\u00a0\u00a0its entirety. Now let's look at a larger pattern.\nIn: [] [[0405] [[0490] [[0000]\nOut: \u00a0[0022]\nIn: [] [[0308] [[0490]\nOut: \u00a0[0022]\nNotice that this pattern only requires one\u00a0 \"\u00a0double-dot\" to be specified. That's because in this pattern the\u00a0 \"period\" part of the pattern is repeated on the left-hand side. Since these left-hand\u00a0 patterns aren't repeated anywhere else, I can simply give a\u00a0 \"double-dot\" for them to use in the pattern. But you may notice that the pattern is repeated 3 times, so I may have to specify other \"double-dot\"s in my pattern to specify it. I could say I wanted 3 repeats for this\u00a0 pattern, and that's fine. As long as I am looking for a single-dot for each new repetition, I'm fine. As long as I don't repeat every pattern I make (which doesn't happen in a\u00a0 normal\u00a0 regex ), my pattern will work well. The code for this pattern can be found in my blog post, from the end of which I created this blog post.\nAnother very common pattern you are unlikely to see used is this one.\nIn: [[:c:(4)]... [[:c:(5)]... [[:c:(6)]... [+ :c]\nWhen you look at this pattern, you see that the pattern looks for a\u00a0 \"short\" or \"long\"\u00a0 line of text. This doesn't mean the line must be long to match. For example, look what the length of this pattern looks for:\n[3:3], [7:1], [6:2] etc.\nBut it could mean that there is only a single line of text. In which case this pattern is not to be used because there is no meaningful meaning to this kind of pattern.\nSo let's look at the following pattern.\nIn: [[:noooooooo]...[:toooooooo]...[:eoooooooooooooooo...c]\nOut: \u00a0[:oooooooo...c...eoooooooooooooooo...c]\nSo how do we know what the meaning of \"c\" can be? That makes it a little tricky because of how we are dealing with all the strings we use it on. We know that \"[:c:]\" and \"[:c:#]\" can be matched at the same time, but not \"[:c:b:\" and \"[:c:b:],\" which make the pattern somewhat harder to guess at.\nIf you'd like to practice on your own before coming back for more practice, here's a very basic, but working, regex pattern for all but the first couple of characters you see in this post.\nIn: [:c:[b:c:]c:c]\nOn the left-hand side, we've \"inverted\"\u00a0 the letters, so it now looks something like\u00a0 \"c:c-c-[b:c:]c:c\"\nSo we can see that if we want a match for a character we can match as either\u00a0 \"c\" or \"b\".\u00a0 A character, when \"c\" is matched against a \"b\" we can see that it makes the pattern look like\u00a0 \u00a0\"b:\"c, but when found as \"c-\" we can see that it makes it look like\u00a0 \u00a0 \"c:c-,c-\"\nOf course the match-all-at-once rule", "exp_result": "Out: [2003] [[0000] [[0000] [[4009]"}, {"prompt": "\nIn: [202010] [[000000] [[201000] [[000000] [[300000] [[000000]\nOut: [221] [[210] [[300]\nIn: [300020] [[000000] [[800080] [[000000] [[001000] [[000000]\nOut: [302] [[808] [[010]\nIn: [100000] [[000000] [[002000] [[000000] [[600060] [[000000]\nOut: [100] [[020] [[606]\nApply the patterns from the above examples:\nIn: [303040] [[000000] [[700010] [[000000] [[700010] [[000000]\nOut: ", "result": "\u00a0[[0001] [0001] [000000] [[00000000]\nIn: [303040] [[000000] [[200010] [000000] [[000000]\nOut: [303040] [[000000] [[00011] [000000] [01000000]\nOut: [303040] [[000000] [[00012] [000000]\nOut:\nIn: [2700040] [[000000] [[0000000]\nOut: [301010]\nIn: [303040] [[000000]\nOut: [303040] [[000000]\nOut:\nIn: [303040] [[000000]\nOut:\nIn: [303040] [[000000]\nOut:\nIn: [303040] [[000000]\nOut: [303040] [[000000]\nOut:\nIn: \u00a0[[000000] [[000000]\nOut:\nIn: [300010]\nOut: [[200010]\nOut: \u00a0[303040] [[00000000]\nOut: \u00a0[[000000] [[0001]\nOut: \u00a0[301010]\nIn: [002000]\nOut: \u00a0[[00000000]\nOut: \u00a0[[000000] [[001000] [[000000]\nOut: \u00a0[[000000] [[00200000]\nOut: \u00a0[[000000] [[0020000] [[000000]\nOut: \u00a0[[000000] [[00040] [0000000]\nOut: \u00a0[000000] [000000]\nOut: \u00a0[[000000] [[0001]\nOut: \u00a0[0111] [000000] [000000]\nOut: [[000000] [[0001] [00000000]\nOut: \u00a0[001000] [[0000000]\nOut: \u00a0[0000] [00000000] [0020000] [002000] [00000]\nOut: [[000000] [010100] [000000] [000000] [000000]\nOut: [[000000] [000000] [[0001]\nOut: \u00a0[001000] [00000000] [000000]\nOut: \u00a0[011100] [0000000] [000000]\nOut: [[000000] [000000] [[0001]\nOut: \u00a0[011100] [[000000]\nOut: \u00a0[001000] [[0000] \u00a0[002000] \u00a0[00000]\nOut: \u00a0[002000] [[00000]\nIn: \u00a0[0000]\nIn: [001000]\nIn: [008005]\nIn: [008005]\nIn: [008005]\nIn: [008005] (This example for example does not include the \"In\" line since it's not the final result since \"In\" would result in the same result as the original line.)\nIn: [008005] [000000] [000000] [0000001] <-- In line 3\nIn: [0001] [0101] [0001] [000000] <-- In line 4\nOut: (Again the patterns in the above list are the same for both of the lists.)\nIn: [00040]\nOut: [0001010]\nIn: \u00a0[011100] (The \"Out\" line will appear in the original output of the previous example, but the example will never output the \"Out\" line. This is because the \"In\" portion of the example will output in the place of the \"In\" portion of the previous example when no \"Out\" line is output.) (Here's a comparison of the output of \"In\" and \"Out\" lines with the example above. Note that the line \"In\" ends up having a lower position in the list than the line \"Out\" does.)\nIn: \u00a0[0001]\nIn: \u00a0[00040] [00100]\nIn: \u00a0[0000]\nIn: \u00a0[0001]\nIn: \u00a0[00040]\nIn: \u00a0[0001010]\nIn: \u00a0[011100] The \"In\" and \"Out\" examples above do not display any data. If you look at the", "exp_result": "Out: [334] [[701] [[701]"}, {"prompt": "\nIn: [333] [[333] [[333]\nOut: [000300030003000] [[000300030003000] [[000300030003000] [[333333333333333] [[000300030003000] [[000300030003000] [[000300030003000] [[333333333333333] [[000300030003000] [[000300030003000] [[000300030003000] [[333333333333333] [[000300030003000] [[000300030003000] [[000300030003000]\nIn: [88] [[88]\nOut: [008008008008008] [[008008008008008] [[888888888888888] [[008008008008008] [[008008008008008] [[888888888888888] [[008008008008008] [[008008008008008] [[888888888888888] [[008008008008008] [[008008008008008] [[888888888888888] [[008008008008008] [[008008008008008] [[888888888888888]\nIn: [2222] [[2222] [[2222] [[2222]\nOut: [000020000200002] [[000020000200002] [[000020000200002] [[000020000200002] [[222222222222222] [[000020000200002] [[000020000200002] [[000020000200002] [[000020000200002] [[222222222222222] [[000020000200002] [[000020000200002] [[000020000200002] [[000020000200002] [[222222222222222]\nApply the patterns from the above examples:\nIn: [44444] [[44444] [[44444] [[44444] [[44444]\nOut: ", "result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000[4] 4 5 0\nIf you want to look up the next number to look at, type the following.\nIn: [44444] [[44444] [[44444]\nOut: 00000000000000000000000000000000000000000000000000000000000000000000000000000000[4] 4 5 0\nNow you can put the numbers into your pattern:\nIn: [222222] [[222222]\nOut: 000000000000000000000023232323230232323232322[4] 4 5 0\nNow you can look up the next number to look at:\nIn: [44444] [[44444] [444][[44444]\nOut: 00000000000000000000002323232323232323232322[4] 4 5 0\nIf you want to look up the next number to look at, type the following.\nIn: [111] [[111]\nOut: 0000000000000000000000060000111111111[4] 4 5 0\nIn: [222222] [8]", "exp_result": "Out: [000004000004000] [[000004000004000] [[000004000004000] [[000004000004000] [[000004000004000] [[444444444444444] [[000004000004000] [[000004000004000] [[000004000004000] [[000004000004000] [[000004000004000] [[444444444444444] [[000004000004000] [[000004000004000] [[000004000004000]"}, {"prompt": "\nIn: [800] [[080] [[000]\nOut: [022] [[202] [[222]\nIn: [003] [[030] [[300]\nOut: [110] [[101] [[011]\nIn: [500] [[550] [[500]\nOut: [044] [[004] [[044]\nIn: [555] [[005] [[000]\nOut: [000] [[440] [[444]\nIn: [080] [[080] [[800]\nOut: [202] [[202] [[022]\nIn: [808] [[080] [[080]\nOut: [020] [[202] [[202]\nApply the patterns from the above examples:\nIn: [300] [[333] [[003]\nOut: ", "result": "\u00a0001] [[000]\nIn: [001] [[030]\nOut: \u00a0001] [[000]\nIn: \u00a0001] [[000] \u00a0001]\nOut: \u00a0001] [000]\nIn: \u00a0001] [[000] \u00a0001]\nOut: \u00a0001] [[000]\nIn: [004] [[000]\nOut: \u00a0000]\nIn: \u00a0001] [[000]\nOut: \u00a0010] [[000]\nApply the above examples:", "exp_result": "Out: [011] [[000] [[110]"}, {"prompt": "\nIn: [4191] [[1914] [[9146] [[4166]\nOut: [41911466] [[19149146] [[91461911] [[41664194] [[66144914] [[64191191] [[41916419] [[19146641]\nIn: [6262] [[6655] [[1112] [[5121]\nOut: [62622521] [[66556512] [[11122611] [[51216615] [[12155166] [[21111162] [[55662156] [[26261252]\nIn: [6776] [[7166] [[9166] [[9161]\nOut: [67766661] [[71667666] [[91667111] [[91616799] [[16199976] [[66191117] [[66176667] [[67761666]\nIn: [4918] [[8418] [[4881] [[1118]\nOut: [49188818] [[84181181] [[48819481] [[11184841] [[81111484] [[18841849] [[81481811] [[81948188]\nIn: [1121] [[6676] [[7621] [[1626]\nOut: [11211616] [[66762722] [[76211666] [[16261671] [[62611761] [[12676661] [[67662272] [[12116161]\nApply the patterns from the above examples:\nIn: [4644] [[4644] [[7679] [[9497]\nOut: ", "result": "\u00a0[46764]\nIn: \u00a0[4674]\nOut: \u00a0[4765]\nIn: \u00a0[4646] [[4673]\nOut: \u00a0[4683]\nIn:\u00a0 [[4749]\nOut: \u00a0[474942]\nIn: [[4748]\nOut: \u00a0[474851]\nOut: [474856]\nIn: \u00a0[474860] [[474861]\nOut: [474867]\nIn: \u00a0[47498]\nOut: \u00a0[4749846]\nIn: [4749847] [[4749848]]\nOut: \u00a0[4749849]\nIn: [047991]\nOut: [047992]\nOut: [047995]\nIn: \u00a0[474991]\nOut: \u00a0[4749947]", "exp_result": "Out: [46444497] [[46444479] [[76796664] [[94974479] [[79499744] [[97674666] [[44649744] [[44647944]"}, {"prompt": "\nIn: [050] [[555] [[050]\nOut: [000000050000000] [[000000555000000] [[000000050000000] [[000000555000000] [[000000555000000] [[000000555000000] [[050555555555050] [[555555555555555] [[050555555555050] [[000000555000000] [[000000555000000] [[000000555000000] [[000000050000000] [[000000555000000] [[000000050000000]\nIn: [050] [[550] [[005]\nOut: [000000050000000] [[000000550000000] [[000000005000000] [[000000555000000] [[000000555000000] [[000000555000000] [[050555555000000] [[550555555000000] [[005555555000000] [[000000000555050] [[000000000555550] [[000000000555005] [[000000000050000] [[000000000550000] [[000000000005000]\nIn: [500] [[050] [[005]\nOut: [000500000000000] [[000050000000000] [[000005000000000] [[500555000000000] [[050555000000000] [[005555000000000] [[000000555000000] [[000000555000000] [[000000555000000] [[000000000555500] [[000000000555050] [[000000000555005] [[000000000500000] [[000000000050000] [[000000000005000]\nApply the patterns from the above examples:\nIn: [050] [[050] [[505]\nOut: ", "result": "\u00a0+[0000005550000] [[00000000055555050]\nThis is the new syntax that will soon be used by the Lua 5.6 release.\nLua 4.0 API Changes\nWith Lua 5, and the Lua 5.2 release, now the APIs have been split into two separate directories ( the \"lua\" directory and the \"lua-engine\" directory ). This will allow the Lua API as of Lua 5.1.18 to be used by either of the following:\nLua 5.2 API for Lua 5.2, with Lua 5.0 and Lua 5.1 (a.k.a. \"The Full Range\")\nLua 5.0 API, which will also be available as the \"Full Range\" version but will be used for all API releases.\nWith Lua 5.1.18, the API is separated from the Lua source files, it's now a separate API project. You will need to install this project to get everything worked out. With the full range of features and performance benefits, this brings us to version 5.1.9 at the time of writing.", "exp_result": "Out: [000000050000000] [[000000050000000] [[000000505000000] [[000000555000000] [[000000555000000] [[000000555000000] [[000000555000000] [[000000555000000] [[000000555000000] [[050555000555050] [[050555000555050] [[505555000555505] [[000050000050000] [[000050000050000] [[000505000505000]"}, {"prompt": "\nIn: [000] [[040] [[000]\nOut: [404444444] [[404000004] [[404044404] [[404040404] [[404040404] [[404000404] [[404444404] [[400000004] [[444444444]\nIn: [000] [[500] [[000]\nOut: [555550505] [[000050505] [[555050505] [[505050505] [[505050505] [[005050505] [[555050505] [[000050505] [[555550505]\nIn: [030] [[000] [[000]\nOut: [303030303] [[303000303] [[303333303] [[300000003] [[333333333] [[000000000] [[333333333] [[000000000] [[333333333]\nIn: [000] [[008] [[000]\nOut: [808080888] [[808080800] [[808080808] [[808080808] [[808080808] [[808080800] [[808080888] [[808080000] [[808088888]\nIn: [007] [[000] [[000]\nOut: [707070707] [[707070700] [[707070777] [[707070000] [[707077777] [[707000000] [[707777777] [[700000000] [[777777777]\nApply the patterns from the above examples:\nIn: [000] [[000] [[006]\nOut: ", "result": "\u00a0[7070703] [[707070697] [[707070707] [[700000000]\nIn: [000] [[006]\nOut: \u00a0[7070703] [[707070697] [[700000000]\nIn: [000] [[006]\nOut: \u00a0[7070703] [[707070697] [[700000000]\nIn: [000]\nOut: \u00a0[73703[777777778] [[000000000]\nIn: [004] [[000]\nOut: [707] [[000000]\nIn: [00]\nOut: \u00a0[77] [000000]\nIn: [005]\nOut: \u00a0[777777778] [[700000000]\nThis way, the initial state of the game is:\n[[80808088]\nOut: \u00a0[00000000]\nNote that the game is reset after the initial state:\nIn: [00000000]\nOut: \u00a0[00000000]\nThis way, the initial state is:\n[[80808088]\nOut: \u00a0[0]\nThis way, the initial state is:\n[[800808088]\nOut: \u00a0[0]\nThis way, the initial state is:\n[[80808088]\nOut: \u00a0[0]\nThis way, the initial state is:\n[[80808088]\nOut: \u00a0[00000000]\nThis way, the initial state is:\n[[80808088]\nOut: \u00a0[0]\nThis way, the initial state is:\n[[80808088]\nOut: \u00a0[00000000]\nThis way, the initial state is:\n[[80808088]\nOut: \u00a0[0]\nAs you can see, it is possible, and even more preferable, to add new patterns to the base pattern list. A more elegant approach to pattern matching is to create a set of variables of the form:\nHere's the same example but this time we match the string with a pattern of the form x:\nin: [00] [0080] [3:00] x: [8080] [[0080] 40:00] x: \u00a0[0080] [[80] [[2] 00:00] x: \u00a0[0080] [[80] [2] 00:00] x: \u00a0[0080]\nNote that both x and x: are variables in the same scope. This behavior can be seen from the preceding example.\nFinally, we can create a new pattern that matches the string only if the start of the string matches any of the given patterns:\nin: [000] [0060] x: [[0060] 0] x: [[0060] 1] x: [[0060] 2] x: [[0060] 3] x: [[0060] 4] x: [[0060] 5]\nAs before, the initial state is the same:\nin: [000] [[0060][[0]][3:00] x: [[0060][1]][3:00]\nHowever,", "exp_result": "Out: [606666666] [[606000000] [[606066666] [[606060000] [[606060666] [[606060600] [[606060606] [[606060606] [[606060606]"}, {"prompt": "\nIn: [044466666] [[040460006] [[044460006] [[000066666]\nOut: [400] [[666] [[666]\nIn: [777000000] [[707708888] [[700708008] [[777708888]\nOut: [777] [[880] [[000]\nIn: [999905555] [[900905005] [[990905055] [[099905550]\nOut: [999] [[555] [[000]\nIn: [333301110] [[300301010] [[300301010] [[333301110]\nOut: [333] [[300] [[110]\nIn: [888066600] [[808060600] [[888066600] [[000000000]\nOut: [800] [[600] [[000]\nIn: [777088800] [[707080880] [[707080080] [[777088880]\nOut: [770] [[888] [[000]\nApply the patterns from the above examples:\nIn: [444000777] [[404440707] [[400040777] [[444440000]\nOut: ", "result": "\u00a0[4000] [[44] [[0] [[00] * 12] [[00] * 20] [[00] * 30]\nIn: [4440000]\nOut: [4000] [[22] [[4] [[6] * 30] [[6] * 40] [[6] * 50]\nIn: [444]\nOut: [[20] [[8] [[12] * 50] [[20] * 60] [[20] * 70]\nIn: [44]\nOut: [[20] [[8] [[12] * 90] [[20] * 100] [[20] * 110]\nIn: [444]\nIn: [[3]\nIn: [2]\nOut: [2]\nIn: [3333]\nOut: [[0]\nIn: [3333]\nIn: [[12]\nIn: [12]\nOut: \u00a0[00]\nIn: [24]\nOut: [8]\nIn: [12]\nIn: [20]\nOut: [00]\nOut: \u00a0[0]\nIn: [[100]\nOut: [[000]\nIn: [[888]\nOut: [[000]\nIn: [888]\nExcel has a built-in chart function. You can generate your own charts, either using the built-in functions or by doing something like this:\nFor the chart below, the input parameter represents the number of observations.\n1 2 3 4 5 6 7 input 1, input 2, input 3, input 4, input 5, input 6, input 7 data1, data2, data3, data4, data5, data6, data7\nThe output chart of the example:\nexp_result": "Out: [444] [[400] [[700]"}, {"prompt": "\nIn: [990] [[009] [[090]\nOut: [000000009] [[000000990] [[000000909] [[009009000] [[990990000] [[909909000] [[009000009] [[990000990] [[909000909]\nIn: [880] [[088] [[080]\nOut: [000000008] [[000000800] [[000000808] [[008000000] [[800000000] [[808000000] [[008000008] [[800000800] [[808000808]\nIn: [707] [[777] [[070]\nOut: [000070000] [[000000000] [[000707000] [[000000000] [[000000000] [[000000000] [[070000070] [[000000000] [[707000707]\nApply the patterns from the above examples:\nIn: [110] [[010] [[101]\nOut: ", "result": "00000000000000000000000000000000\nIn: [010] [[000] [[201]\nOut: 00000000000000000000000000000000 00000000 00000000 00000000\nIn: [010] [[000]\nOut: 00000000000000000000000000000000 00000000 00000000 00000000 00000000\nIn: [000] [[002]\nOut: 00000000000000000000000000000000 00000000 00000000 00000000 00000000\nIn: [000] [[003]\nOut: 00000000000000000000000000000000 00000000 00000000 00000000 00000000\nIn: [000] [[004]\nOut: 00000000000000000000000000000000 00000000 00000000 00000000 00000000 00000000\nIn: [000] [[005]\nOut: 00000000000000000000000000000000 00000000 00000000 00000000 00000000 00000000 00000000\nIn: [000] [[006]\nOut: 00000000000000000000000000000000 00000000 00000000 00000000 00000000 00000000 00000000\nIn: [000] [[007]\nOut: 00000000000000000000000000000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\nIn: [000] [[010]\nOut: 00000000000000000000000000000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\nIn: [000] [[011]\nOut: 00000000000000000000000000000000 00000000 00000000 00000000 00000000 00000000 00000000\nThe output from the above two functions is as follows:\n\"Hello World\"\nFor the next function we apply the following rules: the first two arguments to this function are the two regular expressions that are expected to match the strings that are being matched, the last two arguments of this function, when they must match, are the regex that is actually used to find the character to write the \"Hello\" string.\nIn: [01] [[000]\nOut: 00000000000000000000000000000000000000000000012000000\n\"Hello World\"\nIn: [01] [[000]\nOut: 00000000000000000000000000000000000000000000012000000\nThe last two \"Hello\" strings found with this regex are:\n\"Hello\"\nExample 3\nThis example is a little bit more useful. The idea is to search for a pattern starting \"D\" [ \"N\" + \"T\". In our example we only expect this match to return \"D\" and the string \"P\" because we have a small number of characters and a large number of characters. It is also an example of having a variable that can be modified by both the regular expression and the regex. The expression is based on the following rules: the first string argument should match the first character in the regex that starts with \"D\", then the second string argument, when it matches, must match the second character in the \"D\" string.\nIn: 0000000000000000000000000000000000000000000000\nThe output from the above is:\nThis is really fun and the regex is very useful here. The final example is for finding the \"Hello\" string at the end of a document. Since in general we want to find the last string found when executing these two commands and have to search through these last two strings until we find the 'Hello' string.\nIn this case both regexes are used. The first regex match \"Hello\", the regex for \"D\" does not match because the first character in the \"D\" string is the start of the \"D\" in English. As there is no word to start this regex, we choose the second regex to find the \"D\" string as it is longer. The \"D\" character is in the second position in the \"D\" string and the first character of the \"D\" in Arabic is not present in English and hence does not match the first character of the \"D\" character in English.\nIn:\nIn: [001]\nOut: 000000000000011000001100000111000011000001110011100000111000\nIn: [001]\nOut: 000000000000011000001110011001001011011001111111111111000011100110100001001100100000111100100110010000000000000000\nIn: [000]\nOut: 00000000000000000000000000000000000000 000000000000000000000000000000000111000011111110000110000\nThis is an example of two variations of the common regular expression \"^\".\nHere we have used a regular expression based on a word that does not occur anywhere in the \"Hello", "exp_result": "Out: [000000001] [[000000101] [[000000010] [[001000001] [[101000101] [[010000010] [[000001000] [[000101000] [[000010000]"}, {"prompt": "\nIn: [0410016] [[0010000] [[1100110] [[0100011] [[0010020] [[1010107] [[1110410]\nOut: [008] [[880] [[080]\nIn: [2002205] [[0220002] [[0100000] [[0000209] [[0900002] [[0021008] [[2002200]\nOut: [000] [[888] [[000]\nIn: [0400413] [[3343037] [[3000103] [[0030300] [[3003303] [[3030303] [[3330423]\nOut: [088] [[080] [[080]\nIn: [1010700] [[1191010] [[0011020] [[0000301] [[0401001] [[0010208] [[0010731]\nOut: [008] [[880] [[080]\nIn: [0303530] [[0033000] [[8000003] [[3439303] [[0093133] [[0333030] [[0000003]\nOut: [088] [[080] [[080]\nIn: [0002202] [[0229220] [[0502460] [[2000092] [[0002200] [[8029063] [[0202024]\nOut: [000] [[888] [[000]\nIn: [0020153] [[0029020] [[2224200] [[0202720] [[2200226] [[0220200] [[5042022]\nOut: [000] [[888] [[000]\nApply the patterns from the above examples:\nIn: [0081101] [[5110110] [[0101001] [[1020060] [[6011500] [[0030005] [[0100201]\nOut: ", "result": "--------------- --------------- --------------- --------------- --------------- --------------- --------------- ---------------\nIn: [0081101] [[11000110] [[0101001] [[1020060] [[6011500] [[0030005] [[0100201]\nOut: --------------- --------------- --------------- --------------- --------------- --------------- [0041111] [0081101] # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 29 (defn show-values [num] (if (zerop num) (format nil \"There are %s \" num) num) (format nil \"If there are %s %s %s\" num #:if (#:when #:else #:set-with #:return #:if, #:otherwise num) num))) In: [002] (defn string-to-number [n] (print-number n))) In: [000] (defn string-to-string [[n num ]] (cond (0 n) (println (sub string-to-number (1 n) 0) (format #\\$ \"= \" (length (string-to-number n)) (format \" \" (number-to-numbers (number-to-number n )))))) (defn string-to-sequence [n num] (for [o = 0 #:when #:else #:set-with (string num) #:return] (if #,o #,n (if (= (1 (length o) num)) #,o (add \" \" (length o)) #,o (number-to-numbers (number-to-numbers num))) (if #,o #,n (if (= (1 (length o) num)) [o num] (str n (format #\"\\\\t\" o)))))) (defn string-from-string [[n num ]] (string :start (conj2 (string-to-number n num))) In: [00] (defn string-to-sequence [n num] (for [o = 0 #:when #:else #:set-with (string num) #:return] (if (0 num) #,num (conj2 (conj2 (string-to-number n num))) (if #,o (add \" \" (string-to-numbers #\" \" o)))) (defn string-from-string [[n num ]] (str num #:if (string-from-string n) (str (conj2 (string-to-string n num))) On line 1, the example shows three strings: [000] # \"= \" [00] # \"=2\" [100] # \"3=\") In: [00]\nIn: [000] # \"= \" [00] # \"=2\" [100] # \"3=\") In: [002] # \"=string", "exp_result": "Out: [008] [[880] [[080]"}, {"prompt": "\nIn: [979] [[967] [[766]\nOut: [979979979] [[967967967] [[766766766] [[979979979] [[967967967] [[766766766] [[979979979] [[967967967] [[766766766]\nIn: [344] [[333] [[344]\nOut: [344344] [[333333] [[344344] [[344344] [[333333] [[344344]\nIn: [821] [[183] [[213]\nOut: [821821821821] [[183183183183] [[213213213213] [[821821821821] [[183183183183] [[213213213213] [[821821821821] [[183183183183] [[213213213213] [[821821821821] [[183183183183] [[213213213213]\nIn: [777] [[722] [[772]\nOut: [777777] [[722722] [[772772] [[777777] [[722722] [[772772]\nIn: [232] [[332] [[221]\nOut: [232232232] [[332332332] [[221221221] [[232232232] [[332332332] [[221221221] [[232232232] [[332332332] [[221221221]\nApply the patterns from the above examples:\nIn: [432] [[214] [[312]\nOut: ", "result": "\u00a0[432]\nIn: [716] [[842] [[832]\nOut: \u00a0[716]\nIn: [531] [1228][[222]\nOut: \u00a0[531]\nIn: [124] [[321]\nOut:", "exp_result": "Out: [432432432432] [[214214214214] [[312312312312] [[432432432432] [[214214214214] [[312312312312] [[432432432432] [[214214214214] [[312312312312] [[432432432432] [[214214214214] [[312312312312]"}, {"prompt": "\nIn: [888000] [[008808] [[080000] [[880088] [[808888] [[000088]\nOut: [555000] [[002202] [[020000] [[520055] [[502252] [[000055]\nIn: [880880] [[808880] [[008888] [[080088] [[880808] [[800808]\nOut: [250250] [[205250] [[005522] [[050022] [[250205] [[200205]\nIn: [080888] [[888880] [[808080] [[088808] [[880880] [[880008]\nOut: [020552] [[225220] [[502050] [[052505] [[220220] [[520002]\nIn: [088008] [[888000] [[888080] [[808808] [[880000] [[888880]\nOut: [052005] [[225000] [[252050] [[202505] [[220000] [[552550]\nApply the patterns from the above examples:\nIn: [000808] [[888088] [[888808] [[800088] [[080008] [[888088]\nOut: ", "result": "\u00a0-3000000000\nIn: [8000088] [[880088] [[880088] [[080088] [[800088]\nOut: -2000000000\nIn: [880088] [[8000088] [[880088] [[080088] [[880088]\nOut: 0\nIn: [880088] [[880088] [[880088] [[080088] [[880088]\nOut: 1\nIn: [8000088] [[8000088] [[880088] [[080088] [[888000]\nOut: 2\n\u00a0 \u00a0In: [880088] [[880088] [[880088] [[880088] [[880088]\nOut: 3\n\u00a0 \u00a0In: [888888] [[888888] [[8888] [[888]\nOut: 9\nIn: [888888] [[8888] [[8778] [[888] \u00a0With no whitespace:\nIn: [880088] [[880088] [[880088] [[880880] [[880880]\nOut: 0\n\u00a0 \u00a0In: [880880] [[878808] [[807808] [[800088]\nOut: -3000000000\n\u00a0 \u00a0In: [800088] [[800880] [[880828] [[778829]\nOut: -4000000000\nIn: [005522] [[002050] [[020522] [[020533]\nOut: 2\n\u00a0 \u00a0In: [002050] [[020250] [[020522] [[025000]\nOut: 3\n\u00a0 \u00a0In: [000808] [[880088] [[880088] [[800088]\nOut: 5\nOut: [[808888] [[000088] [[880888] [[860000]\nOut: -2000000000\n\u00a0 \u00a0In: [880088] [[808888] [[880888] [[0080888]\nOut: -8000000000\nIn: [005522] [[002050] [[025202]\nOut: 4\n\u00a0 \u00a0In: [[002050] [[020522]\nOut: 5\n\u00a0 \u00a0In: [[002050] [[022002] [[022052]\nOut: 6\n\u00a0 \u00a0In: [[002050] [[026050] [[028053]\nOut: 7\n\u00a0 \u00a0In: [[002050] [[022250]\nOut: 8\n\u00a0 \u00a0In: [[020522] [[020550]\nOut: 9\n\u00a0 \u00a0In: [[050022]\nOut: 10\n\u00a0 \u00a0In: [[051000]\nOut: 11\n\u00a0 \u00a0In: [[020522]\nOut: 12\n\u00a0 \u00a0In: [[070022]\nOut: 13\n\u00a0 \u00a0In: [[880422]\nOut: 13\n\u00a0 \u00a0In: [[880088]\nOut: 14\n\u00a0 \u00a0In: [[88088]\nOut: 14\n\u00a0 \u00a0In: [[880088]\nOut: 15\n\u00a0 \u00a0In: [[888888]\n\u00a0 \u00a0In: [[008988]\nOut: 14\n\u00a0 \u00a0In: [[002455]\nOut: 15\n\u00a0 \u00a0In: [[080088]\nOut:", "exp_result": "Out: [000802] [[828082] [[288802] [[200082] [[020002] [[888082]"}, {"prompt": "\nIn: [00030000] [[00303000] [[03000300] [[30000030]\nOut: [00030000] [[00323000] [[03222300] [[32222230]\nIn: [04000400] [[00404000] [[00040000]\nOut: [04222400] [[00424000] [[00040000]\nIn: [080000000800] [[808000008080] [[000800080008] [[000080800000] [[000008000000]\nOut: [082222222800] [[828222228280] [[000822282228] [[000082800000] [[000008000000]\nIn: [10000000] [[01000001] [[00100010] [[00010100] [[00001000]\nOut: [10000000] [[01222221] [[00122210] [[00012100] [[00001000]\nApply the patterns from the above examples:\nIn: [006000006] [[060600060] [[600060600] [[000006000]\nOut: ", "result": "\u00a0[06070000] [[060800060] [[600600000]\nOut the pattern above:\n--pattern = (,,{,}) (,){,}) (,){,})\nIn: [00010050] [[0215050] [[0105050] [[0025050] [[0055050]\nOut: \u00a0[[0002] [0002] [000] [000]\nPattern Matching Using Matching Rules\nUsing pattern matching to generate a pattern will result in a match within two rules:\nMatch 1:\nIn: [00010050] [[0215050] [[0105050] [[0025050] [[0055050]\nMatch 2:\nIn: [00010050] [[0215050] [[0105050] [[992] [[00100]\nOut: \u00a0{,} \u00a0{,} \u00a0{,}\nPattern Matching\nOne way to use pattern matching to specify an alternative to a pattern is to match the two patterns and then add a new rule. For example these rules match only the values in the first two values, when the second value is set to a value:\nIn: [00010050] [[0215050] [[0105050] [[992] [[00100]\nOut: \u00a0{,} \u00a0{,} \u00a0{,} {,} {,}\nThe following two rules are equivalent:\nIn: [0002] [02] [0] [3] [5]\nOut: {,} \u00a0{,} \u00a0{,} {,}\nRule 1 -- Match 1\nIn: \u00a0{,} \u00a0{,}\nRule 2 -- Match 2\nIn: \u00a0{,} \u00a0{,}\nOut: \u00a0{,}\nIt is also possible to specify several options to the match command. The options are:\nOption Value Description\nmatch-case-sensitive Match the first two values. If the first match occurs, the second match will also be matched. This is useful if the pattern requires certain cases (eg. if \"Hello World!\" is the first value in the list, and the second is \"Kiddit\", then we want \"Hello World! (Kiddit)\" to be matched, not \"Hello World!\")", "exp_result": "Out: [006222226] [[062622260] [[622262600] [[000006000]"}, {"prompt": "\nIn: [501] [[520] [[555]\nOut: [501000000] [[520000000] [[555000000] [[501000000] [[520000000] [[555000000] [[501501501] [[520520520] [[555555555]\nApply the patterns from the above examples:\nIn: [10501] [[02220] [[50505] [[02220] [[10501]\nOut: ", "result": "~~~ [2102]\nIf you used the same pattern, but changed the order of values, you get the different effects. In both versions you get the same effect, but the other version has the other effect. Here you will find an example.\nIn: [1501] ~~~ 2102 [1501] ~~~2102 [1123] ~~~1123 [1421]\nThe following two sentences are both similar, but which one do you think do you think is more interesting?\nIn: [1123] [1421]\nOut: ~~~ [1501] ~~~ [1421]\nWhich was your favorite? What did you love about both of them? Did you like them in reverse?\nLet's look into these two sentences to see how to write a program that will choose the correct order of terms.\nIn: [1123] [1421]\nIn: [1501] ~~~2102\nWhat was your favorite?\nLet's now write a program that will write the correct name for the pattern for each variable.\nIn: [1123] [1421]\nIn: [1501] ~~~2102 [1501] ~~~2102 [1704]\nLet's see how we can use the string literals to write the name:\nIn: [1123] [1421]\nOut: ~~~1 [1123] [1421]\nThis program will have a string that will look like this:\n5 2 2 2 5 5 4 3 1 1\nNow create a new file and copy it to the right place with a file name of one.txt. This is the file containing the correct name:\n1 2 3 4 5 6 7 8 9 10 11\nEdit the code to add this line under the last statement:\nIn: [1501] [1704]\nIn: [1501] [1704] [2102]\nAfter this change we want the correct list of patterns and they need to be saved. Here is the modified file:\nnWe are interested in the new file and this is the information we want in the new file.\nWrite a program to do some searching. First, we will see if the name exists.\nIn: [1501] [1704]\nOut: ~~~ 1\nWe don't have any variable. Instead you can read the definition of {%variable name%}.\nWe can add a variable by using a value which appears in the {%variable name%} expression in the first place.\nIn: [1123] [1421]\nIn: [1501] [1704] ~~~ 1 [1123] [1421] ~~~18 [1501] [1704]\nLet's put these two files into a folder with the suffix '_patterns'. Then open the folder and move the file to the first directory, 'c:'. You should get a message like this:\n\\The following strings were found in: c:\\_patterns\\1.txt\\test.txt\\1\\test.txt (\\_patterns\\1.txt\\test.txt)\\1\\The following strings were found in: C:\\_patterns\\1421\\test.txt\\1\\test.txt\\1\\test.txt\\1\\Test.txt\\test.txt\\1421\nSo our first variable is called 'test.txt', and our first line is: '1' and '1' is another variable 'test", "exp_result": "Out: [0000000000105010000000000] [[0000000000022200000000000] [[0000000000505050000000000] [[0000000000022200000000000] [[0000000000105010000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[1050100000105010000010501] [[0222000000022200000002220] [[5050500000505050000050505] [[0222000000022200000002220] [[1050100000105010000010501] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000105010000000000] [[0000000000022200000000000] [[0000000000505050000000000] [[0000000000022200000000000] [[0000000000105010000000000]"}, {"prompt": "\nIn: [251] [[050] [[251]\nOut: [000251000] [[000050000] [[000251000] [[000251000] [[000050000] [[000251000] [[000251000] [[000050000] [[000251000]\nApply the patterns from the above examples:\nIn: [10501] [[02220] [[50505] [[02220] [[10501]\nOut: ", "result": "\u00a0[000502500]\nApply the patterns from the above examples:\nIn: [2501] [[15000] [[30000]\nOut: \u00a0[000416050]", "exp_result": "Out: [0000000000105010000000000] [[0000000000022200000000000] [[0000000000505050000000000] [[0000000000022200000000000] [[0000000000105010000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[1050100000105010000010501] [[0222000000022200000002220] [[5050500000505050000050505] [[0222000000022200000002220] [[1050100000105010000010501] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000000000000000000] [[0000000000105010000000000] [[0000000000022200000000000] [[0000000000505050000000000] [[0000000000022200000000000] [[0000000000105010000000000]"}, {"prompt": "\nIn: [00000000] [[22000220] [[02200220] [[00000022] [[00000000] [[02220000] [[00000200] [[00220000] [[20220022] [[20000000]\nOut: [00000000] [[66000660] [[06600660] [[00000066] [[00000000] [[02220000] [[00000200] [[00660000] [[20660022] [[20000000]\nIn: [000000000000] [[222000200000] [[022000220000] [[022200220020] [[000000000020] [[000002000000] [[020022000222] [[000000000222] [[002000020020] [[000002200000]\nOut: [000000000000] [[666000600000] [[066000660000] [[066600660020] [[000000000020] [[000002000000] [[020022000666] [[000000000666] [[002000020060] [[000002200000]\nIn: [220002] [[220002] [[000200] [[020000] [[000202] [[022200]\nOut: [660002] [[660002] [[000200] [[020000] [[000602] [[066600]\nIn: [000000000] [[022000000] [[002000220] [[000002200] [[000000000] [[000200000] [[022000000] [[000000020] [[000000020] [[000200000]\nOut: [000000000] [[022000000] [[002000660] [[000006600] [[000000000] [[000200000] [[022000000] [[000000020] [[000000020] [[000200000]\nApply the patterns from the above examples:\nIn: [00002220] [[22000000] [[02200220] [[02000220] [[00000000] [[20220002]\nOut: ", "result": "000000000000000000 000000000000000000 000000000000000000 000000000000000000\nIn: 02200220 [222222] 000000000000000000 000000000000000000 000000000000000000 000000000000000000\nIn: 02200220 [222222] 000000000000000000 000000000000000000 000000000000000000 000000000000000000\nIn: 20020002000 [02002222] 000000000000000000 000000000000000000 000000000000000000 000000000000000000\nIn: 201002222 [22220022] [2000000] 000000000000000000 000000000000000000 000000000000000000 000000000000000000\nIn: 21002100 [22002222] 000000000000000000 000000000000000000 000000000000000000 000000000000000000\nIn: 000000000000000000 [220022222] 000000000000000000 0000000000000064 0000000000000064 0000000000000064\nAt this point, make sure you have the correct addresses in your keypool. If not, then go ahead and create a new keypool, using the correct addresses.\nIn: [00000000] [[22002200]\nOut: 000000000000000000 000000000000000000 000000000000000000 000000000000000000\nIn: 000000000000000000 [22002222] 000000000000000000 000000000000000000 000000000000000000 000000000000000000\nIn: [160000] [[230000220]\nOut: 02100000 000000000000000000 000000000000000000 000000000000000000 000000000000000000\nIn: 000000000000000000 [22002222] 000000000000000000 000000000000000000 000000000000000000 000000000000000000\nIn: [0000002] [[230000220]\nOut: 0000000011111111 00000000ffffffff 00000000ffffffff\nIn: 000000000000000000 [22002222] [22002222] 000000000000000000 0000000011111111 000000000000024\nIn: 000000000000000000 [22002222] [22002222] 000000001111111 000000001111111 00000000000032f\nIn: [220000] [[230000220]\nOut: 000000003333333 00000000ffffffff 00000000ffffffff 00000000FFFFFF\nIn: 000000001111111 [22002222] [22002222] 000000000000000000 000000000000000000 000000000000000000 000000000000000000\nIn: 000333333 [22002222] 000000000000000000 000000000000000000 000000000000000000 000000000000ff\nIn: 00000001 [22002222] [20000000] 000000000000000000 0000000000FFFF00 00FFFF00 00FFFF00\nIn: 00000101 [22002222] [20220022] 000000000000000000 00000000FFFFFF01 00FFFFFF00 0000000000000000\nIn: 00000001 [22002222] [20220022] 000000000000000000 00000000FFFFFF01 00FFFFFF00 0000000000000000\nIn: 00000101 [22002222] [20220022] 000000000000000000 00000000FE000000 0000000000000000\nOut: 0000000000001018 0000000000000000 00FFFF00 <--- This should give you the right results, you can check them by testing them in p2pool. Keep in mind, if you're mining with a slow server, it's not that good if you fail to see the correct block every 500 seconds.\nTo add a new block", "exp_result": "Out: [00002220] [[66000000] [[06600660] [[06000660] [[00000000] [[20220002]"}, {"prompt": "\nIn: [000800] [[008880] [[080880] [[888000] [[088000] [[000000]\nOut: [08008] [[88088] [[00000] [[08008] [[88088]\nIn: [888800] [[888888] [[088088] [[088000] [[000000] [[000000]\nOut: [88088] [[88088] [[00000] [[88088] [[88088]\nIn: [000800] [[088880] [[888880] [[088000] [[000000] [[000000]\nOut: [08008] [[88088] [[00000] [[08008] [[88088]\nIn: [008800] [[888800] [[888888] [[008888] [[000000] [[000000]\nOut: [88088] [[88088] [[00000] [[88088] [[88088]\nIn: [000800] [[088800] [[888080] [[088880] [[000000] [[000000]\nOut: [08008] [[88088] [[00000] [[08008] [[88088]\nApply the patterns from the above examples:\nIn: [008800] [[888800] [[880880] [[088880] [[088000] [[000000]\nOut: ", "result": "\u00a0[860088] [000000]\u00a0\nIn: [808088] [[888800] [[888080] [[888000] [[000000]\nOut: \u00a0[088888] [000000]\u00a0\nIn: [008880] [[888800] [[88088] [[000000]\nOut: \u00a0[088888] [000000]\nThis is our results so far:\nOut: \u00a0[00000000]\nIn: \u00a0[080088]\nIn: [080888]\nIn: \u00a0[88088]\u00a0\nIn: [010000]\nOut: \u00a0[08808]\nIn: \u00a0[000800]\nIn: [080088]\nIn: \u00a0[000088]\u00a0\nIn: \u00a0[888800]\nIn: \u00a0[88088]\u00a0\nOut: \u00a0[08808]\nin: \u00a0[000800]\nIn: [080888]\nOut: \u00a0[888800]\u00a0\nIn: [888888]\u00a0\nIn: [000800]\u00a0\nOut: [088880]\u00a0\nIn: [000800]\u00a0\n\u00a0 Out: \u00a0[08008]\u00a0\nThis is what our code looks like once we have calculated all the patterns. We have four pieces of information we must consider: The target_pattern is a pattern which we wish to know the number of times in the binary data which the pattern appears. We must also take into account the expected value: The expected value is a number which represents the error percentage for any given pattern. We must also calculate the number of patterns in a given time: We need to know how long each one takes to execute. Note that by this time, we know the number of patterns in the time we have calculated, and for this reason, each pattern should be kept in the same time zone. As a note, the expected value has a maximum at 0. If we want to achieve 0.5s, we should use the smallest known value. The target_pattern must be a specific type of character: An ASCII block is an example: An input box, a search box, etc. In these cases, we can ignore the value of this character. In theory, we could use a character of arbitrary length. To start, we could use a character, or even all characters in the data. But as we will see in a moment, this method is inefficient and we should use one of the examples above in the example above. Once we have calculated all the patterns, we need to keep them in a single time zone as each one takes a long time to execute.\nFinding the average of each pattern should give us the time required to execute all the possible patterns within a given time.\u00a0 Thus, we need to find the average. We start with the time of the last input which had a pattern:\nIn: [000800]\u00a0\n\u00a0 In: \u00a0[000088]\u00a0\nIn: \u00a0[888800]\nIn: \u00a0[880880]\nIn: \u00a0[088880]\nIn: \u00a0[088000]\nIn: \u00a0[000088]\nIn: \u00a0[888800]", "exp_result": "Out: [88088] [[88088] [[00000] [[88088] [[88088]"}, {"prompt": "\nIn: [000152220] [[100050222] [[110050022] [[111050002]\nOut: [2221] [[1222] [[1122] [[1112]\nIn: [000152200] [[100052200] [[110050220] [[111050220]\nOut: [0001] [[1000] [[1100] [[1110]\nIn: [110050033] [[100150330] [[100150330] [[110050033]\nOut: [1133] [[1331] [[1331] [[1133]\nIn: [111150000] [[100150660] [[100150660] [[111150000]\nOut: [1111] [[1661] [[1661] [[1111]\nIn: [111152200] [[100152200] [[100150000] [[111150000]\nOut: [1111] [[1001] [[1001] [[1111]\nIn: [111153300] [[100153300] [[100153000] [[100150000]\nOut: [1111] [[1001] [[1001] [[1001]\nIn: [111150000] [[100050777] [[101150700] [[101050707]\nOut: [1111] [[1777] [[1711] [[1717]\nApply the patterns from the above examples:\nIn: [110050033] [[100150330] [[000153330] [[011153000]\nOut: ", "result": ".................................(a = 1.0, b = 0.5)\nThis is a nice way of showing the pattern of an area, or an individual pattern.\nWe'll do a similar example here with the first pattern: the shape of the areas of triangles.\nApplying the First Pattern of an Area\nWe'll create a pattern of triangles by building on the previous example of the polygons. After we build the pattern of triangles by writing the first pattern of an area with:\nLet's take a look at how these patterns are built up. We start with a number of points at the centre of our polygon.\nLet's name the points by a number of points that we know are adjacent: 0-1 and 0-2. This way we know their center. We then build it up in successive patterns:\n0, 1, 1, 2, 2, 3, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14 and 1, 15, 1, 16, 1, 17.\nEach pattern begins with no elements to it. Then each point is then constructed in the same way:\nAt the centre of the pattern in each direction we add our point x to the line connecting it to the next point we need.\nThe following pattern is constructed:\n0, 1, 1, 2, 2, 3, 3, 1, 4, 1, 5, 1, 0, 3, 2, 3, 4, 3, 5, 0, 0, 2, 2, 3, 4, 3, 5, 0, 0, 2, 2, 3, 4, 3, 5, 0, 0, 5, 0, 0, 0, 3, 2, 3, 4, 3, 5, 4, 0, 0, 3, 2, 3, 4, 3, 5, 0, 0, 13, 13, 13, 17.\nWhat we have here (the four points) is how we draw an outline of a triangle. How do the different pattern of points create these outlines?\nHow do we determine where each point begins and ends?\nHow do we make sure the triangles end at the intersection of the four lines connecting them to establish the outline?\nThese are the three fundamental properties of the shapes we are interested in drawing from our polygons.\nThe shapes we're interested in are drawn by lines connecting points. We can be very selective about what we draw from the polygons we create on this path.\nWhen we do this in our diagramming we draw a different pattern of lines from each place in the graph. These lines are the paths that we draw from each point.\nLet's create a single path connecting the two points. To do this we'll use the following pattern.\nLet's name our points after the places on the polyggon, this way we can distinguish between them.\nWe build a path between two points through the graph with the following steps:\nThe first step is to specify the endpoints, the point 0 will be at 0 and 1 at 1. After that we will draw two lines through the graph connecting those two points. The line starts at the point 0, it passes through the point 1 (the two previous points in the graph) and then it ends at 0 and 1", "exp_result": "Out: [1133] [[1331] [[3331] [[3111]"}, {"prompt": "\nIn: [2222] [[8222] [[2282] [[8288]\nOut: [22222222222222222222] [[82222228822222288222] [[22822822228228222282] [[82888828828888288288]\nIn: [9515] [[1591] [[9155] [[5551]\nOut: [95155159951551599515] [[15911951159119511591] [[91555519915555199155] [[55511555555115555551]\nIn: [5525] [[2332] [[5253] [[3532]\nOut: [55255255552552555525] [[23322332233223322332] [[52533525525335255253] [[35322353353223533532]\nIn: [4114] [[7747] [[1411] [[4111]\nOut: [41144114411441144114] [[77477477774774777747] [[14111141141111411411] [[41111114411111144111]\nApply the patterns from the above examples:\nIn: [5544] [[5552] [[2555] [[5524]\nOut: ", "result": "\u00a0[2555]\nIn: [5522] [[5522] [[5522]\nOut: [5532]\nIn: [5525] [[5525]\nOut: \u00a0[7554265575542655] [[55054]\nIn: [5222]\nOut: [5525]\nIn: [5525]\nOut: \u00a0[7554265575542655] [[55054]\nIn: [5522]\nOut: \u00a0[5525]\nOut: \u00a0[7554265575542655] [[55054]\nSee example above. If you only want the last five sequences, you can repeat the code:\nApply the above patterns to those five sequences:\nIn: [4567] [[2545] [[2542] [[2542]\nOut: [2544]\nFrom: [2542]\nIn: [1592]\nIn: [1592]\nIn: \u00a0[2541]\nIn: [1591]\nIn: [1591]\nOut: [2540]\nIn: [12042]\nIn: \u00a0[2212]\nIn: \u00a0[7767]\nIn: [7767]\nIn: \u00a0[8182]\nIn: \u00a0[3892]\nI hope this helps you.\n[x] This article started out as an attempt to figure out why we were seeing a lot of \"incorrect\" results. \u00a0I don't know that I'll ever truly know why, but it's a mystery to me. \u00a0But I did figure out a few things: \u00a0Some people were seeing numbers \"that were correct...but were going to be in [their] head. \u00a0Other things were like: \"Well, if we do this math, this might match up.\" \u00a0All I can really say is, maybe you didn't take that right approach enough. [x] The real-world solution is to do things like this:\nThe real world solution is to be a bit more precise with your math. \u00a0Then you'll be able to predict a better output value. For a more detailed walkthrough of code to run with these examples, see the\u00a0 GitHub repository here.", "exp_result": "Out: [55444455554444555544] [[55522555555225555552] [[25555552255555522555] [[55244255552442555524]"}, {"prompt": "\nIn: [11011] [[10001] [[00000] [[01022] [[11022]\nOut: [10] [[11]\nIn: [10011] [[11010] [[00000] [[11022] [[01022]\nOut: [01] [[11]\nIn: [11001] [[00001] [[00000] [[00022] [[11022]\nOut: [10] [[10]\nApply the patterns from the above examples:\nIn: [11001] [[01011] [[00000] [[10022] [[11022]\nOut: ", "result": "0000000000000000\nIn: [11011] [00000001] 0000000000000000\nOut: 0000000000000000\nIn: [[10001] [00101]\nOut: 0000000000000000\nIn: [110011] [[110011]\nOut: 0000000000000000\nIn: 0000000000000000\nIn: [0011]\nIn: [[10111]\nOut: 0000000000000000\nIn: 0000000000000000\nIn: [[10001] [00101] [00001] [11022]\nOut: 0000000000000000\nIn: [110011] [011111] [110011] 0000000000000000\nIn: [10001] [110011] 0000000000000000\nIn: [11111] 0000000000000000\nIn: [11011] 00000000000\nIn: [11011] 0000000000000000\nIn: 0000000000000000\nIn: ______\nIn: [(11011) 0000000000000000\nOut: 0000000000000000 ] [011111]\nIn: [10111] [011111]\nIn: 0000000000000000\nIn: 0000000000000000\nIn: [11022] 0000000000000000\nIn: 0000000000000000\nIn: [01022] 0000000000000000\nOut: 0000000000000000\nIn: 0000000000000000\nIn: 0000000000000000\nIn: [11022] 0000000000000000\nIn: 0000000000000000\nIn: 0000000000000000\nIn: [011111] 0000000000000000\nIn: 0000000000000000\nIn: 0000000000000000\nIn: 0000000000000000\nIn: [110011] 0000000000000000\nIn: [01021] 0000000000000000\nIn: 0000000000000000\nIn: [110011] 0000000000000000\nIn: 1222222211\nOut:????????\nIn: 0000000000000000\nIn: 0000000000000000\nIn: 0000000000000000\nIn: 0000000000000000\nIn: [11111] 0000000000000000\nIn: 123????????????????\nIn:????????????????\nIn:????????????????\nIn:????????????????\nIn:????????????????\nIn:????????????\nIn:????????????????????????\nIn:????????????????\nIn:????????????????????????\nIn:????????????\nIn:????????????????\nIn:????????????????????????\nIn:????????????????\nIn:????????????????????????\nIn:????????????????????????\nIn:????????????????????????????????\nIn:????????????\nIn:????????????????\nIn:????????????\nIn:????????????????\nIn:????????????????????????\nIn:????????????????????????\nIn:????????????\nIn:????????????\nIn:????????????\nIn:????????????\nIn:????????????????????????\nIn:????????????\nIn:????????????????????????\nIn:????????????\nIn:????????????????????????\nIn:????????????????????????\nIn:???????????????? \"\nIn:????????????????\nIn:????????????????????????\nIn:????????????????????\nIn:????????????????????????????????\nIn:????????????????????????\nThe following is the result of applying the same pattern using the first five bytes pattern to each of the six input variables, as we have done previously:\nIn: 0000000000000000 0000000000000000 0000000000000000\nOutnIn: 0000000000000000 0000000000000001\nIn: fffffff ffffffff\nIn: fffffff ffffffc\nIn: fffffff ffffffd\nIn: fffffff ffffffc\nIn: fffffff ffffffc\nIn: fffffff ffffffd\nIn: fffffff ffffffe\nIn: fffffff ffffffd\nIn: fffffff ffffffc\nIn: fffffff ffffffd\nIn:", "exp_result": "Out: [11] [[10]"}, {"prompt": "\nIn: [0000002000000]\nOut: [0000002000000] [[0000020200000] [[0000200020000] [[0002010002000] [[0020001000200] [[0201000100020] [[2000100010002] [[0100010001000] [[0010001000100] [[0001000100010] [[1000100010001] [[0100010001000] [[0010001000100]\nIn: [00200]\nOut: [00200] [[02020] [[20002] [[01000] [[00100]\nIn: [0002000]\nOut: [0002000] [[0020200] [[0200020] [[2010002] [[0001000] [[1000100] [[0100010]\nApply the patterns from the above examples:\nIn: [00000000200000000]\nOut: ", "result": "000000000000000000000000000000000000000000000000|\nIn: 000000000000000000000000000000000021\\\nIn: 00000010100000000002020\\\nIn: 000000000000000000000000000000000000000000000000|\nIn: [000000000000000]\nOut: <000000000000000>000000000000000ffffffffffff|\nIn: <0000000040000000000000010000001002|\nIn: <0000000014000000000000006000000000000010000000000100300000000|\nIn: 000000101000000000011900000001002|\nIn: 000000000000000000000000000000000000001000000ffff|\nIn: <0000000000000200000000000000200000000|\nIn: <00000000000005000000020000000001002|\nIn: <00000000000008000000020000000011002|\nIn: <0000000000000A000000020000000011002|\nIn: <0000000000000F000000020000000011002|\nIn: <000000000000000400000020000000011002|\nIn: <00000000000001000000020000000011006|\nIn: <00000000000001000000020000000011006|\nIn: <00000000000001000000020000000011006|\nIn: <000000000000100000001000000600000000100000000|\nIn: 000000000000100000001000000600000000100000000|\nIn: \\\nIn: [000000000000020000000]\nIn: <000000000000000000000000000000000000000000200|\nIn: <00000000000004000000040000|\nIn: <00000000000008000000040000|\nIn: <000000000000A000000040000|\nIn: <000000000000000000000000000000000000000001000000|\nIn: <00000001000000040000|\nIn: \\\nIn: 000000000100000200000000011010\\\nIn: 000000000100000300000000001002|\nIn: 0000000001000004000000040000\\\nIn: 0000000001000004000000040000\\\nIn: 000000000100000700000000020000001|\nIn: 000000000100000800000020000001|\nIn: 000000000100000900000004000100|\nIn: 000000000100000A00000020000001|\nIn: 000000000000000200000010000001|\nIn: 000000000000000300000020000001|\nIn: 000000101010000010000030000004|\nIn: 0000001010000005000000011003|\nIn: 000000101000000000000004000000|\nIn: 000000101000000000000020000002|\nIn: 00020000000100000000020000002|\nIn: 000200000010100100020000001|\nIn: 0002000000010000010000002000000|\nIn: 00020000000100000001111111000000|\nIn: 000000101000000010001000002000000|\nIn: 0000001010000000110011000000010101|\nIn: 000000101000000010100000500000030000000|\nIn: 00000010100000001010000011000000010101|\nIn: 000000101000000011034343333333333333333333333333333333333333333333333333|\nIn: 000000101000000011111000010111211200101010120230021|\nIn: 000000101000000001000222222222222222222222222222222| \\\nIn: 0000001010000000010102222222238222222222222222322222|\nIn: 0000001010000000010010000010002700210021000|\nIn: 0000001010000000000230021002100000110001|\nIn: 0000000204000000000000000000000000000000000018|\nIn: 00000001000000000000000000000000000000000040|\nIn: 00000001000000000000000000000000000000000048|\nIn: __0000000000000021000000000000000044|\nIn: __00000000002100000040242822222237222222222222| \\\nIn: __000000000022000000410100000000101010000000|", "exp_result": "Out: [00000000200000000] [[00000002020000000] [[00000020002000000] [[00000201000200000] [[00002000100020000] [[00020100010002000] [[00200010001000200] [[02010001000100020] [[20001000100010002] [[01000100010001000] [[00100010001000100] [[00010001000100010] [[10001000100010001] [[01000100010001000] [[00100010001000100] [[00010001000100010] [[10001000100010001]"}, {"prompt": "\nIn: [767] [[276] [[127]\nOut: [721127721] [[672276672] [[767767767] [[767767767] [[672276672] [[721127721] [[721127721] [[672276672] [[767767767]\nIn: [617] [[167] [[474]\nOut: [474474474] [[761167761] [[716617716] [[716617716] [[761167761] [[474474474] [[474474474] [[761167761] [[716617716]\nIn: [194] [[916] [[694]\nOut: [496694496] [[619916619] [[491194491] [[491194491] [[619916619] [[496694496] [[496694496] [[619916619] [[491194491]\nApply the patterns from the above examples:\nIn: [886] [[636] [[688]\nOut: ", "result": "\u00a0[1218368834]\nApply the patterns from the above examples:\nIn: [921] [[18]\nOut: [23]\nRepeat and apply the pattern from the above examples:\nIn: [23]\nOut: \u00a0[4544444556] Apply the pattern from the above examples:\nIn: [17] [[544] [[17]\nOut: [18]\nRepeat and apply the pattern from the above examples:\nIn: [19] [[19]\nOut: [2]\nRepeat and apply the pattern from the above examples:\nIn: [20] [[2]\nOut: \u00a0[24]\nRepeat and apply the pattern from the above examples:\nIn: \u00a0{4}\nOut: \u00a0{27}\nApply the pattern from the above examples:\nIn: [[9073]\nOut: \u00a0{19}\nApply the pattern from the example above: Repeat the pattern from the example above: In: [[2111]\nOut: \u00a0{33}\nApply the pattern from the example above:\nIn: [[811] [[21]\nOut: \u00a0{7}\nApply the pattern from the example above: Repeat the pattern from the example above: In: [[21]\nOut: \u00a0{32}\nApply the pattern from the example above: Repeat the pattern from the example above: In: [[521]\n\u00a0 In: [[2792]\nIn: [22]\nRepeat and apply the pattern from the example above: In: [[2892]\nOut: \u00a0{31}\nRepeat and apply the pattern from the example above: In: [[1030]\nOut: \u00a013121212\nRepeat and apply the pattern from example 1:\nRepeat the pattern from example 1: In: [2201]\nIn: [4203]\nIn: [17]\nRepeat and apply the pattern from example 1:\nRepeat the pattern from example 1: In: [10101]\nIn: [2517]\nRepeat and apply the pattern from example 1:\nRepeat the pattern from example 1: In: [[6] [15]\nIn: [22]\nApply the pattern from example 1: Repeat the pattern from example 1: In: [[7] [24]\nIn: [12]\nApply the pattern from example 1: Repeat the pattern from example 1: In: [[8] [26]\nIn: [11]\nApply the pattern from example 1: (from pattern 1:) Repeat the pattern from example 1: (from pattern 1:) In: [[9] [27]\n\u00a0\nIn: [22]\n\u00a0 In: [13]\nRepeat and apply the pattern from example 1: (from pattern 1:) Repeat the pattern from example 1: (from pattern 1:) In: \u00a0[2201]\nIn: [11]\nApply the pattern from example 2:\u00a0\u00a0 Repeat the pattern from example 2:\u00a0\u00a0\u00a0 In: \u00a0[21]\nIn: [[11] [27]\nRepeat and apply the pattern from example 2:\u00a0\u00a0\u00a0 In: [23]\nIn: [13]\nApply the pattern from example 2:\u00a0\u00a0 Repeat the pattern from example 2:\u00a0\u00a0\u00a0 In: \u00a0[10]\u00a0\nApply the pattern from example 2:\u00a0\u00a0 (from pattern 2:) Apply the pattern from example 3: Repeat the pattern from example 3: In: [[2] [27]\nIn: [[1] [13]\nRepeat and apply the pattern from example 3: In: \u00a0[10]\nApply the pattern from example 3:\u00a0\u00a0 (from pattern 3:)\n\u00a0 In: [8]\nApply the pattern from", "exp_result": "Out: [886688886] [[636636636] [[688886688] [[688886688] [[636636636] [[886688886] [[886688886] [[636636636] [[688886688]"}, {"prompt": "\nIn: [000] [[060] [[000]\nOut: [300300300] [[161161161] [[003003003] [[300300300] [[161161161] [[003003003] [[300300300] [[161161161] [[003003003]\nIn: [0050] [[0000]\nOut: [115111511151] [[030303030303] [[115111511151] [[030303030303] [[115111511151] [[000303030303]\nIn: [000000] [[004000] [[000000] [[400040]\nOut: [030000030000030000] [[114111114111114111] [[000303000303000300] [[411141411141411141] [[030003030003030003] [[114111114111114111] [[000303000303000300] [[411141411141411141] [[030003030003030003] [[114111114111114111] [[000303000303000300] [[411141411141411141]\nIn: [00000] [[00000] [[00200] [[00000] [[00000]\nOut: [000000000000000] [[030000300003000] [[112111121111211] [[000300003000030] [[000000000000000] [[000000000000000] [[030000300003000] [[112111121111211] [[000300003000030] [[000000000000000] [[000000000000000] [[030000300003000] [[112111121111211] [[000300003000030] [[000000000000000]\nApply the patterns from the above examples:\nIn: [200] [[000] [[000]\nOut: ", "result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nExample 5: Apply to other numbers, even number?\nA few months ago, I wrote about an article and code I had written, and how to go on a journey of implementing that to see if there is a way for the code to find itself. While the article was interesting as code, the code seemed a little bit too simple to work out on another platform, I then thought it's not that useful in other numbers and a couple of days later I was using the code to test a few other numbers and was able to test an infinite set of numbers and a solution that was more or less perfect. Also, there seems to be a possibility to go crazy and try out some other approaches of automating it:\nIn: [123] [000] [[0] [[0]\nOut: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nExample 6: Inferring a zero based on an even number?\nThis was my first try yet after I had written some code for finding random numbers, but I still went crazy and went on a journey of finding various zero based solutions. So I will just go over some examples of some of these, and a simple way of getting a solution of all of them:\nIn: [000] [0000]\nOut: 000000000000000000000000000000000000000000000000000000000000000020000000000000000000000\nExample 7: Inferring a non-zero based on an even number?\nThis is the last one, I'm not really sure whether there is any further way to implement this code in Python. However, the code is so simple that I could just put it in a library, and I've got a bunch of modules that I could include that I can then compile, and if I needed a Python-like library that had only one function, I can just use the function from python as my solution, and they will know I'm an even number. All of the numbers to be used are:\nIn: [000] [2000] [0001] [0000] [000]\nOut: [000000000000000000000000] 0020000000000 [000000000000000000000000> 0020000000000\nIn: [000]\nOut: 00000000000000000000000000000000000000000000000000000000000000000000\nExample 8: Make the first solution infinite?\nThe previous example was pretty simple, except that the numbers were all chosen to be less than 1, which means that to generate a solution, you basically have to get some nice data about how the numbers are distributed, and then do that with that data. So instead of doing that, I did this:\nIn: [000]\nOut: 00000000000000000000000000000000000000000 00000000000000000000000000000000000000000\nIn: [00]\nOut: [00000]. 0. 00. 000.\nIn: [00000]\nOut: 0000000000000000000000000000000000000. 00000000000000000000000000000000000\nIn: [00]\nOut: 000000000000000000000000000000000000. 00000000000000000000000000000000000\n(That's why the numbers are from 0.0 to 1.0 for simplicity, but there's nothing in particular about them, just the same as the first example)\nI could go on making more simple solutions", "exp_result": "Out: [211211211] [[030030030] [[003003000] [[211211211] [[030030030] [[003003000] [[211211211] [[030030030] [[000000000]"}, {"prompt": "\nIn: [10009] [[05080] [[00700] [[08050] [[90001]\nOut: [159] [[878] [[951]\nIn: [60007] [[02040] [[00300] [[04020] [[70006]\nOut: [627] [[434] [[726]\nIn: [20001] [[03060] [[00400] [[06030] [[10002]\nOut: [231] [[646] [[132]\nApply the patterns from the above examples:\nIn: [70005] [[06040] [[00200] [[04060] [[50007]\nOut: ", "result": "\u00a0[1208] [929]\nIn: [20009] [1726] [11060]\nOut: \u00a0[2376]\nIn: [929] [[0600] [[8982] [[10002]", "exp_result": "Out: [765] [[424] [[567]"}, {"prompt": "\nIn: [202] [[020] [[222]\nOut: [202202202] [[020020020] [[222222222] [[202202202] [[020020020] [[222222222] [[202202202] [[020020020] [[222222222]\nApply the patterns from the above examples:\nIn: [08800] [[88888] [[08800] [[88888] [[08808]\nOut: ", "result": "-------------- In: [08800]\nIn: [08800]\nIn: [08800]\nIn: [[08801] [[8901]\nOut: ------------- In: [08800]\nIn: [[08801]\nIn: [[08801]\nOut: -------------- In: [08800]\nIn: [[08800]\nIn: [[08800]\nIn: [[0884021]\nOut: ------------ In: [1401215]\nIn: [1401215]\nIn: --------------- In: [1401215]\nIn: [1401215]\nIn: [[1501216]\nOut: ------------ In: [[1501216]\nIn: [1501216]\nIn: ---------------\nIn: [[1501217]\nOut: -------------- In: [[1501217]\nIn: [[1501218]\nOut: ------------ In: [1501218]\nIn: [1501218]\nOut: ---------------\nIn: [[1501219]\nOut: ------------- In: [[1501219]\nIn: [[1501221]\nOut: -------------- In: [[1501221]\nIn: [[1501221]\nIn: [[1501221]\nIn: [[1501220]\nOut: ------------ In: [[1501220]\nIn: [[1501220]\nIn: [[1501220]\nIn: [[1501221]\nOut: ------------ In: [[1501221]\nIn: [[1501221]\nIn: ([1501220]\nIn: [1501221]\nOut: --------------- In: [[1501221]", "exp_result": "Out: [0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808] [[0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808] [[0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808] [[0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808] [[0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808]"}, {"prompt": "\nIn: [10] [[11]\nOut: [1010] [[1111] [[1010] [[1111]\nApply the patterns from the above examples:\nIn: [08800] [[88888] [[08800] [[88888] [[08808]\nOut: ", "result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nIn: [136565] [[140565] [[141265] [[141565] [[143765]\nOut : 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000\nIn: [88886] [[07886] [[07886] [[07886] [[07881]\nOut: 0000000000000000000000000000000100000000000011111000\nIn: [108808] [[109280] [[111080] [[108808]\nOut: 000000000000000000000001000000000011111000\nIn: [080008] [[080008]\nOut : 0000000000000000000000110100011101000111100010001011101001101000111010001011100110010001200110011001100110101\nIn: [108800] [[108800]\nOut : 00000000000000000000000000000000000000110000001100000000010001011000111100000111001000100\nIn: [111000] [[1001100]\nOut : 0000000000000000000000000000000010001001101000011100001101000011100001110000110000001001000\nIn: [098000] [[1008000]\nOut : 000000000000000000000000000001008001001600100011111000110001100011000110001100011000110001100010000011101\nIn: [111100] [[1000101]\nOut : 00000000000000000000000000000100800100160010001001000111011000110001100011000110001100011000110001100010000011101.\nOut: 00000000000000000000000010000110000000000000100100000001101010100001101001000111001101000011100001100\nIn: [160000] [[160001]\nOut : 00000000000000000000001011000110000000000000000000000000000000001000101110100111000111000010111001100001101011000110001000001110101\nIn: [110100] [[110101]\nOut : 0000000000000000000001001001001001001001001001001000111100011100000101010010001111101100011100000110010000100101\nIn: [15000]\nOut : 0000000000000000000000100100100100010001000011010000101010100001100100111000110010001111000110000100101101000010010000\nIn: [160000] [[160001]\nOut : 00000000000000000000001000010001010101000010001010010001100011000110000100101101000010010000100101001000000101101\nIn: [25000] [[25000]\nOut : 00000000000000000000010011000001010100011000111001000110001100011000010010100011000010100010011010101001110000001110101\nIn: [102000] [[1000001]\nOut: 0000000000000000000000000001000101000110001110010001100011000110000100101001100001001000001111010101001111011100100010\nIn: [20000] [[200002]\nOut : 0000000000000000000000111101110000100001000111001000110001100001001010001100100010010001110010001001000101011100011000101100011000100101\n\n\nDetermine the sequence in which the pattern appeared:\n\nIn: [010001]\n\nOut: 000000000000000000000000000000000000000001010001100001000110001100010100000000000011001000110010000100101111011111111100010110101000000111101010101011011100011000101110001100011000110100110011010101110100100011000110001100011000110101001010101010000100011000110000101000110000010001001000101010000001001101010000101111110010\n\nIt is important to note that this formula does not take into account case-insensitive file extensions, which may differ between Windows PC operating systems. For example, if a PC user writes a file of length 5, a file program would expect the first character in the file's name to be a period (.).\n\nIn: [1001101]\n\nOut: 000000000000000000000000000000001110001000010111100001000010010111000100001010000111000100001001011000010000010000100011000100101110011001100000100110010010100", "exp_result": "Out: [0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808] [[0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808] [[0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808] [[0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808] [[0880008800088000880008800] [[8888888888888888888888888] [[0880008800088000880008800] [[8888888888888888888888888] [[0880808808088080880808808]"}, {"prompt": "\nIn: [020000000] [[220110222] [[000010000]\nOut: [0211000] [[2201222] [[0000000]\nIn: [00033001022] [[22000011002] [[02000000000]\nOut: [00000000] [[22000122] [[02331102]\nIn: [00000080000] [[22208880000] [[00200000666]\nOut: [000000000] [[222008666] [[002888000]\nIn: [01100000220] [[11002202200] [[00000200000]\nOut: [01122022] [[11002220] [[00000000]\nApply the patterns from the above examples:\nIn: [02011003055] [[22001033005] [[00001000000]\nOut: ", "result": "000000000000000000000000000000000000000000000000000\nIn: [02110000] [[3204102211] [[0000100000] [[0100222111]\nOut: 1000000000000000000000000000000000000000000000000000\nIn: [00330002222] [[000200110002] [[00000010002]\nOut: 000000000000000000000000000000000000000000000000000\nIn: [00010000] [[0001330001] [[00000003000]\nOut: 1000000000000000000000000000000000000000000000000000\nIn: [0000000000000000] [[00000022] [[01110001]\nOut: 1000000000000000000000000000000000000000000000000000\nIn: [00000000] [[002888000]\nOut: 1000000000000000000000000000000000000000000000000000 In: [000000000] [[0000001] [[0001330012]\nOut: 1000000000000000000000000000000000000000000000000000\nIn: [0000000] [[01000001100] [[01110002]\nOut: 1000000000000000000000000000000000000000000000000000\nIn: [00000000] [[00010003000]\nOut: 1000000000000000000000000000000000000000000000000000 In: [0000000] [[0000001000] [[00000003300]\nOut: 1000000000000000000000000000000000000000000000000000 Apply the patterns from the above examples: In: [02110000] [[3204102211] [[000070000000]\nOut: 000000000000000000000000000000000000000000000000000\nIn: [02110000] [[3204252301] [[0000000000001000000]\nOut: 000000000000000000000000000000000000000000000000000\nIn: [0200111a] [[02011003055] [[02011003055]\nOut: 1000000000000000000000000000000000000000000000000000 In: [02110000] [[3204118310] [[000010000] [[000000100000]\nOut: 1000000000000000000000000000000000000000000000000000 In: [02110000] [[2000331022] [[000000000001]\nOut: 000000000000000000000000000000000000000000000000000 In: [0200111101] [[02110001] [[2011000222]\nOut: 1000000000000000000000000000000000000000000000000000 In: [0200111100] [[2101002221] [[0200111102]\nIn: [2310002222] [[0000000] [[0000111}3000000000]\nOut: 1000000000000000000000000000000000000000000000000000 In: [00001000000] [[0100000001] [[22000111100]\nOut: 1000000000000000000000000000000000000000000000000000\nIn: [000101000200] [[0101000220] [[11000001]\nOut: 1000000000000000000000000000000000000000000000000000", "exp_result": "Out: [02110000] [[22010355] [[00013305]"}, {"prompt": "\nIn: [0333] [[0303] [[0000] [[3033] [[3000] [[0303] [[0505] [[0000] [[0000] [[5050] [[5000] [[5505]\nOut: [0444] [[0404] [[0000] [[4044] [[4000] [[4404]\nIn: [3303] [[3033] [[0300] [[0030] [[3030] [[0003] [[5000] [[0555] [[5005] [[0555] [[5550] [[5000]\nOut: [4404] [[4444] [[4404] [[0444] [[4440] [[4004]\nIn: [3300] [[3000] [[0003] [[0033] [[3000] [[3333] [[0500] [[5500] [[5050] [[5555] [[5550] [[5050]\nOut: [4400] [[4400] [[4044] [[4444] [[4440] [[4444]\nIn: [3300] [[0333] [[3303] [[0330] [[3030] [[3000] [[0555] [[5555] [[5550] [[5555] [[5000] [[0550]\nOut: [4444] [[4444] [[4444] [[4444] [[4040] [[4440]\nApply the patterns from the above examples:\nIn: [3303] [[0303] [[0003] [[3303] [[3033] [[0333] [[0000] [[5005] [[0050] [[5005] [[5555] [[5500]\nOut: ", "result": "\u00a0{ 'value': [ 0 ], 'a': [ 'p' ], 'b': [ 1, 2 ], 'c': [ 3 ], 'd': [ 'l' ], 'e': [ 4, 5, 6 ] }\nIn: [0004] [[0404] [[0000] [[3033] [[3033] [[0403] [[2000] [[0040] [[0400]\nOut: \u00a0{ 'value': [ 11 ], 'a': [ 2 ], 'b': [ 3, 5 ], 'c': [ 4, 6 ] }\nIn: [0403] [[0000] [[2000] [[0100] [[0000] [[4000] [[0403] [[0400]\nOut: \u00a0{ 'value': [ 3033, 3000, 5, 5, 6, 60, 7, 7, 9, 10, 12, 13, 13, 14, 14, 21, 22, 22, 34, 37, 39, 45, 47, 55, 57, 59, 65, 65, 68, 70, 73, 74, 76, 77, 80, 83, 84, 86, 97, 98, 99, 100, 101, 102, 104, 105 },\nOut: [0001]\nIn: [3033] [[3033] [[0300] [[0300] [[0500] [[0433] [[0533] [[0400]\nOut: \u00a0{ 'a': [ 15 ], 'b': [ 17, 18 ] }\nIn: [0300] [[0400] [[0532] [[0400] [[0500] [[0333] [[0404] [[0530] [[0533] [[0404]\nOut: \u00a0{ 'value': [ 20 ], 'a': [ 1 ] }\nIn: [2800] [[2900] [[3033] [[3013] [[3103] [[3300] [[0334]\nOut: \u00a0{ 'a': [ 'p' ], 'b': [ 3, 2 ], 'c': [ 4, 3 ], 'd': [ 'l' ] }\nIn: [0334] [[0334] [[4334] [[5005] [[0429]\nOut: \u00a0{ 'a': [ 4 ], 'b': [ 5 ], 'c': [ 6, 7, 8 ], 'd': [ 'l' ] }\nIn: [0100] [[0404] [[0404] [[1028]\nOut: \u00a0{ 'a': [ 3 ], 'b': [ 20, 21 ], 'c': [ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62", "exp_result": "Out: [4404] [[4404] [[0044] [[4404] [[4444] [[4444]"}, {"prompt": "\nIn: [111] [[666] [[616]\nOut: [111111] [[111111] [[666666] [[666666] [[661166] [[661166]\nIn: [447] [[877] [[884]\nOut: [444444777] [[444444777] [[444444777] [[888777777] [[888777777] [[888777777] [[888888444] [[888888444] [[888888444]\nIn: [428] [[225] [[854]\nOut: [444422228888] [[444422228888] [[444422228888] [[444422228888] [[222222225555] [[222222225555] [[222222225555] [[222222225555] [[888855554444] [[888855554444] [[888855554444] [[888855554444]\nIn: [888] [[888] [[888]\nOut: [888] [[888] [[888]\nIn: [333] [[333] [[333]\nOut: [333] [[333] [[333]\nIn: [366] [[366] [[333]\nOut: [336666] [[336666] [[336666] [[336666] [[333333] [[333333]\nIn: [224] [[444] [[242]\nOut: [222244] [[222244] [[444444] [[444444] [[224422] [[224422]\nApply the patterns from the above examples:\nIn: [717] [[336] [[886]\nOut: ", "result": "\u00a0[[717]\nIn: [336] [[886] [[829]\nOut: \u00a0[[717]\nIn: [829]\nOut: [[717]\nIn: [829]\nOut: [[717]\nIn: 3\nOut: 4\nIn: 2\nOut: 1\nIf we use the same pattern on the other side of the bracket, it gives:\nIn: [1] [[1]\nOut: [[1]\nIn: 3\nOut: 4\nIn: 7\nOut: 7\nIn: 1\nThat is, the value of a variable in a function can be stored in the brackets of assignment statements. When a variable gets initialized to a value in a function, it will be stored in the brackets of the function (as shown in the example above). This means that any value that you assign in a function is immediately available in the functions that you assign it to, because no variable of the same value are bound to it in that function. This is called direct binding (sometimes called a variable binding).", "exp_result": "Out: [777771111177777] [[777771111177777] [[777771111177777] [[777771111177777] [[777771111177777] [[333333333366666] [[333333333366666] [[333333333366666] [[333333333366666] [[333333333366666] [[888888888866666] [[888888888866666] [[888888888866666] [[888888888866666] [[888888888866666]"}, {"prompt": "\nIn: [6004008] [[0604008] [[0604880]\nOut: [202] [[022] [[220]\nIn: [0064880] [[0604088] [[0664800]\nOut: [222] [[022] [[222]\nIn: [0064808] [[6064000] [[0664808]\nOut: [202] [[202] [[222]\nIn: [6064000] [[6604808] [[6664080]\nOut: [202] [[222] [[222]\nIn: [0064808] [[0604080] [[0004800]\nOut: [202] [[020] [[200]\nApply the patterns from the above examples:\nIn: [0664008] [[0604888] [[6064000]\nOut: ", "result": "\u00a0[0064788] [[0602488] [[0664008]\nApply the patterns from below:\nIn: [0204880] [[6064000]\nOut: [2210808]\nIn: [022] [[230]\nIn: [0064440]\nOut: \u00a0[0064788] [[6604000]\nIn: [6280] [[0604088] [[0004800]\nOut: [2210808]\nIn: [0004800]\nOut: [0064788] [[6604000]\nIn: [6280] [[6064000] [[6604000]\nOut: [2210808]\nIn: [2210800]\nIn: [221008]\nOut: [0064788] [[6604000]\nIn: [6280] [[0664000]\nOut: [2210800]\nIn: [230] [[6164000]\nOut: \u00a0[0004800]", "exp_result": "Out: [022] [[222] [[202]"}, {"prompt": "\nIn: [0000000000000] [[0008888888000] [[0002222222000] [[0000002000000] [[0003333333000] [[0000001000000] [[0000001000000] [[0001111111000] [[0001000001000] [[0001111111000] [[0000004000000] [[0004444444000] [[0000000000000]\nOut: [0000000000000] [[0000004000000] [[0004444444000] [[0000001000000] [[0000001000000] [[0001111111000] [[0001000001000] [[0001111111000] [[0003333333000] [[0002222222000] [[0000002000000] [[0008888888000] [[0000000000000]\nIn: [0000000000000] [[0001110111000] [[0000011100000] [[0002222222000] [[0002000002000] [[0002222222000] [[0000033300000] [[0000030300000] [[0000003000000] [[0444444444440] [[0005555555000] [[0005500055000] [[0000000000000]\nOut: [0000000000000] [[0005555555000] [[0005500055000] [[0444444444440] [[0000033300000] [[0000030300000] [[0000003000000] [[0002222222000] [[0002000002000] [[0002222222000] [[0001110111000] [[0000011100000] [[0000000000000]\nIn: [0000000] [[0111110] [[0022200] [[0022200] [[0333330] [[0003000] [[0000000]\nOut: [0000000] [[0333330] [[0003000] [[0022200] [[0022200] [[0111110] [[0000000]\nApply the patterns from the above examples:\nIn: [0000000] [[0444440] [[0404040] [[0055500] [[0606060] [[0060600] [[0000000]\nOut: ", "result": "0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0.001 0000000000000000 0000000000000000\nIn: [000000000000] [[00001000] [[0] [00000001]\n(0.00) [00000001]\n(0.01) [00000001]\n(0.03) (1.00) [00000003]\n(0.20) (1.20)\n(2.15)\n(1.65)\n(0.45)\n(0.35)\n(0.22)\n(1.01)\n(1.00) [00000004] [0(0.08/1) (0.065/0.062))\nIn: [000000000000] [[00000]\n[000000000]\n[00000] [000000000]\n[00110000]\n[01110000]\n[000100]\n[000100]\n(0.025)\n[000000000]\n[000000000]\n[00000]\n[000000000000]\n[000000000000]\n[000000000000]\nIn: [00000111] [[00010000000]\n[0000000000]\n[0000000]\n[000000000]\n[0000000000000000]\n[00000]\n[0000000]\nIn: [000001111]\n[000000000]\n[000000000]\n[000001111]\n[00100000]\n[011000]\n[10000000] [1000000]\n[011000] [[010000]\nOut: 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0000000000000000 0.001\nIn: [0000000000000000] [[000001]\n[000000000000]\n[00100000]\n[00000001] [00000003]\n[0001000000]\n[0001000]\n[0001000]\n[0001001]\n[0002000000]\n[00020010000] [00022000000] (3.13)\n(2.85)\n(1.55)\n(0.47)\n(0.34)\n(1.00)\n(1.00)\nIn: [00000000001] [[0000000000]\n[00000001]\n(0.01) [00000001]\n(0.03)\n(0.03)\n(1.00)\n(0.73)\n(0.77)\n(0.78)\n(0.63)\n(0.45)\n(0.21)\n(0.24) (0.12) (0.09) (0.08)\nIn: [00000001] [[0000000000]\n[00000001]\n(0.03)\n(0.03)\n(0.00)\n[0000000000]\n", "exp_result": "Out: [0000000] [[0606060] [[0060600] [[0055500] [[0444440] [[0404040] [[0000000]"}, {"prompt": "\nIn: [66665050] [[60005500] [[60660055] [[00600550]\nOut: [0000] [[0044] [[0400] [[4004]\nIn: [06605550] [[06065005] [[06665555] [[60000505]\nOut: [0004] [[0040] [[0000] [[0040]\nIn: [66605055] [[60000555] [[60000000] [[06665500]\nOut: [0000] [[0000] [[0444] [[0000]\nIn: [60600055] [[06665055] [[66065055] [[66005000]\nOut: [0400] [[0000] [[0000] [[0044]\nApply the patterns from the above examples:\nIn: [60665005] [[00065555] [[06605505] [[66005550]\nOut: ", "result": "!! [60005500] [60660055] [205600 ]\nApply the same pattern:\nIn: [0000] [[0044] [[0444]\nOut:!!! [60005500] [60660055] [205600 ]\nNow let's set the window to its original size, but change its position to the left:\n0x80000\nIn:!!! [8000000] [4094]\nOut:!!! [004094] [205600 ]\nNow let's reset the window to its size when we resize the window itself (with the window manager's resize method):\nIn:!!! [3000000] [4094]\nOut:!!! [004094] [205600 ]\nWe set the position and size again. So now the window looks like this:\n0x800000\nIn:!!! [800000] [4094]\nOut:!!! [004094] [205600 ]\nThe same pattern for the window's position, size, and offset:\n[0x80]\nNow that we know how to create windows, we can apply other things to them.\nSee how I set the window's size to the height of the image? Can we use this trick to have an infinite window? Well, yes.\nHow does the OS know what to show?\nI've done this a few times to get an infinite window. The problem happens if the window (in this case, the entire window stack) is more than one image per line and the image that is at the top left in the stack is smaller than the screen. The OS tries to find an image to display. In this case, it looks for an image at the bottom left in the stack, which is smaller than the screen and thus the OS thinks it's only one image per line.\nLet's see an example.\nIn: [[8000000] [[00000007] [[00007000]\nOut: [0400] [[0800] [0034] [0240]\nIn: [[0020000]\nOut: [0240] [0244] [0288] [0400]\nIn: [[02000000] [0084]\nOut: [0244] [0288] [0400]\nIn: [[80000000] [0184]\nOut: [0084] [0288] [0400]\nHere's what actually happens:\nThe OS tries to find a suitable picture to display at the top left (as shown by the image to the left). In this case, it finds one with an offset of 0.\nOn the left, the OS selects the largest image and then tries to display it. The size of the image on the right is equal to the smaller one on the left, and thus the OS thinks it's just one image across.\nThe OS is trying to have the largest image on the whole stack when it thinks it will get as much space as possible.\nSo this trick shows how the OS can display a large image in an infinite number of ways. Why not display it all at once or just one image per line?\nLet us examine another trick.\nIn: [8000000] [[00000007] [[00007000]\nOut: [0400] [[1600] [0034] [0740]\nIn: [88000080] [88000080] [88000080]\nOut: [0400] [88000080] [88000080] [0400]\nIn: [00008] [[0008]\nOut: [000000] [88000080] [0400] [0400]\nIn: [0000]\nOut: [88000080] [4484] [0740] [0400]\nIn: [8080] [880000", "exp_result": "Out: [0400] [[0000] [[0000] [[0004]"}, {"prompt": "\nIn: [655] [[517] [[452]\nOut: [66555] [[66555] [[55177] [[44522] [[44522]\nIn: [135] [[128] [[838]\nOut: [11355] [[11355] [[11288] [[88388] [[88388]\nIn: [237] [[216] [[157]\nOut: [22377] [[22377] [[22166] [[11577] [[11577]\nApply the patterns from the above examples:\nIn: [125] [[736] [[765]\nOut: ", "result": "~~ [2275]\nI've included a link to the source on github if you're interested.\nI've been working with the C++11 standard this year so I thought I would finish up a final post that will be part of the D Programming Language. I've been using D as an actual toy for the last year and I'm pretty happy with what I'm seeing, so I thought today would be the perfect time to include one final post. There's a lot in the last few months that I have really enjoyed doing so I'd want to go into more details once I'm feeling more comfortable with the language and start getting serious about writing D code.I wanted to go into more detail about what I'm looking forward to in D code rather than just telling you, there is some other useful information that can be found in the D book that is available online to give context and to give you an idea of what D can be like. Some of the things that I'm looking forward to in D code include as well:I'll be using D as a way to see if the features that I am considering for future D extensions have been worked on or if they're just ideas that I'm going to start working on in future posts. I do plan to eventually go into C, as I'm really fond of C, but if an IDE is going to be important to me then for now I think D is what I'm going to be using for the foreseeable future.I don't consider myself \"dumb\" and I wouldn't be going through this post anyway if this was a blog post where I wrote down some nice code, but I do have a really interesting thought at the end of this post that I want to explain as best I can and I want to get around to getting started. I haven't written a C++11 compatible D code before so I wanted to go into the process of writing C++11 compatible D which I'll also be doing in the future. So, on to the D code that I'll be writing :-) Here we go!This is a fairly simple module. It will do a few simple things for us:We're going to assume that you understand everything here and want to know some more. I'll stop here because there are plenty more useful bits I could share in a follow up post, but here it is:Okay, so not a bad start. The module doesn't exactly do everything in the other posts, but it does get to the point where it's actually useful enough that it can be used as a D program. This example doesn't do anything that's particularly unique, but it does get us a few steps closer to getting to using D for the rest of our program. Let's see how we can use this module in D. In order to use, we need a C++11 compatible library. We can use any C++11 library that is compatible with D 2.6, which is the latest D version. You will need to be able to build your project to include both libraries. Make sure that the following files are in your project folder:The first thing we'll be doing is declaring the D header file. dlopen will let us open a dll and return a D library. We can use that function to declare and instantiate our module. The D header file that we want is C10h : The first thing we'll want to do is get the D type system in place. First we'll need to create a new D file with the file extension.so. In order to do that you'll need to compile your project with the compiler settings listed below:Next, we'll create a simple C++ class that inherits from a simple C++ class. The type for this will be something like this:The only way we're going to be using this class externally will be to import your object from your D library, so we're creating a dll file that is the same size as the C++ object:Okay, the D library for this object is now available to us. We need to add a line to our main functions that says that we are going to call this file using the library:Next, let's add some code that will take an argument for the object so that we can use it later when we make a new instance. The basic function will look something like this:This code will call the static", "exp_result": "Out: [11255] [[11255] [[77366] [[77655] [[77655]"}, {"prompt": "\nIn: [200020202002] [[220220202202]\nOut: [0003000] [[0002200] [[0002200] [[0002000] [[0002000] [[0002200] [[0000200] [[0000200]\nIn: [020200200202] [[220220220202]\nOut: [0003000] [[0022000] [[0022000] [[0002200] [[0000200] [[0000200] [[0000200] [[0000200]\nIn: [202020020020] [[202022022022]\nOut: [0003000] [[0002000] [[0002000] [[0002000] [[0002000] [[0022000] [[0220000] [[2200000]\nIn: [200200200202] [[220220220202]\nOut: [0003000] [[0002200] [[0000200] [[0000220] [[0000022] [[0000002] [[0000002] [[0000002]\nApply the patterns from the above examples:\nIn: [202002000202] [[202202202202]\nOut: ", "result": "\u00a0[\"200020202002\"] [[20002000]\nOut: \u00a0[[202000200200202]\nOut: \u00a0[[20282002002001]\nOut: \u00a0[[202000200200201]\nOut: \u00a0[[20300200200202]\nIn: [02002000200202] [[002000]\nOut: \u00a0[\"200020202002\"]\nOut: \u00a0[[02010000]\nOut: \u00a0[[000200]\nOut: \u00a0<02040000]\nOut: \u00a0[[02040000]\nIn: [02010020020]\nOut: \u00a0[\"20002000202\"] [[020100]\nOut: \u00a0[[0200]\nOut: \u00a0[[00220]\nOut: \u00a0[[000200]\nOut: \u00a0[\"02002002101\"]\nOut: \u00a0[[0010]\nOut: \u00a0[\"00220002101\"]\nOut: \u00a0[[0000200]\n\u00a0Out: \u00a0[[0002200]\nOut: \u00a0[[0000200]\nIn: [02020020020] [[020000]\nOut: \u00a0[[2F2000]\nOut: \u00a0[2]", "exp_result": "Out: [0003000] [[0002000] [[0002000] [[0002200] [[0000220] [[0000220] [[0000200] [[0000200]"}, {"prompt": "\nIn: [000000000] [[055005550] [[005005050] [[005505050] [[000000000]\nOut: [222] [[202] [[202]\nIn: [000000000] [[005505050] [[005005050] [[055005500] [[000000000]\nOut: [303] [[303] [[330]\nIn: [000000000] [[055505050] [[005000550] [[005005050] [[000000000]\nOut: [101] [[011] [[101]\nIn: [000000000] [[055505050] [[005005550] [[005005500] [[000000000]\nOut: [101] [[111] [[110]\nIn: [000000000] [[055005500] [[005000550] [[005500500] [[000000000]\nOut: [220] [[022] [[020]\nIn: [000000000] [[055005000] [[005000550] [[005505000] [[000000000]\nOut: [200] [[022] [[200]\nApply the patterns from the above examples:\nIn: [000000000] [[005505500] [[005005550] [[055005050] [[000000000]\nOut: ", "result": "\u00a01\nIn: [000000000] [[055505050] [[005005550] [[005505050] [[01]\nOut: 1\nIn: [1] [[01]\nOut: 2\nIn: [000000000] [[055005550] [[005005550] [[01]\nOut: \u00a03\n\u00a0 \"In\" is an abstract pattern. It's really hard to read since each pattern consists of a sequence of characters, but I'm just going to refer to it by its name.\nIn: [000000000] [[055505050] [[005005550] [[005005500] [[003]\nOut: 7\nIn: [000000000] [[055505050] [[005005550] [[005005500] [[002]\nOut: 8\nIn: [000000000] [[055505050] [[005005550] [[005005500] [[001]\nOut: 9\nIn: [0001]\nIn: \u00a0[0002]\nIn: \u00a0[001]\u00a0\n\u00a0 \"Out\" is an abstract pattern. It's really hard to read since each pattern consists of a sequence of characters, but I'm just going to refer to it by its name.\nIn: \u00a0[00000]\u00a0 [0000]\n\u00a0 \"In\" is an abstract pattern. It's really hard to read since each pattern consists of a sequence of characters, but I'm just going to refer to it by its name.\nIn: \u00a0[0000]\n\u00a0 \"Out\" is an abstract pattern. It's really hard to read since each pattern consists of a sequence of characters, but I'm just going to refer to it by its name.\n\u00a0 \"Out\" is an abstract pattern. It's really hard to read since each pattern consists of a sequence of characters, but I'm just going to refer to it by its name.", "exp_result": "Out: [330] [[333] [[303]"}, {"prompt": "\nIn: [999] [[000] [[990]\nOut: [999900] [[000909] [[990909] [[099909] [[000909] [[999009]\nIn: [303] [[033] [[333]\nOut: [303333] [[033033] [[333303] [[333303] [[330330] [[303333]\nIn: [333] [[003] [[300]\nOut: [333330] [[003300] [[300303] [[003303] [[300003] [[333033]\nIn: [808] [[800] [[800]\nOut: [808800] [[800000] [[800888] [[008888] [[008000] [[808008]\nIn: [077] [[000] [[770]\nOut: [077700] [[000707] [[770007] [[077700] [[000707] [[770007]\nApply the patterns from the above examples:\nIn: [660] [[660] [[006]\nOut: ", "result": ".............................\nIn: [666] [[660]\nOut:..............................\nIn: [666] [[656]\nOut:..............................\nIn: [666] [[652]\nOut:..............................\nIn: [666] [[650]\nOut:..............................\nIn: [666] [[649]\nOut:..............................\nIn: [665] [[646]\nOut:..............................\nIn: [666] [[644]\nOut:..............................\nIn: [665] [[638]\nOut:..............................\nIn: [666] [[637]\nOut:..............................\nIn: [665] [[626]\nOut:..............................\nIn: [666] [[623]\nOut:..............................\nIn: [667] [[622]\nOut:..............................\nIn: [666] [[619]\nOut:..............................\nIn: [667] [[617]\nOut:..............................\nIn: [667] [[616]\nOut:..............................\nIn: [666] [[617]\nOut:..............................\nThe key points here are:\nPattern 1: The pattern \"..............................\" matches any character including <blank> (unless you use '^' for a blank ).\nPattern 2: The pattern \"(^a)\", \"^A\", and \"^b\" may be combined. Note that for the ''^a'' pair we have to add the '^' characters just like a ''^a''' may appear multiple times.\nPattern 3: The pattern 0x633 should match ANY character. This is a very large range, especially for short strings (it has fewer characters than an ''a'' pattern, by the way). For example, the pattern 0xa631 will match just about any character up to or after 0x633 but not 0x6531.\nPattern 4: The pattern \"0x633\", '^' or '^a' may be included in any combination, including \"0=\", \"0X\", and \"0\", in which case matching is done for all of the characters that appear in the group.\nThe following is a list of different patterns for what I mean by \"short strings\". I am going to ignore the characters in 0x633, 0x6731 and 0x6661, as that is just a list. If you are programming a very short program you shouldn't need any of this.\nPattern Type Pattern 0x00000 No short strings 0x01001 No short strings 0x10001 No short strings 0x20101 No short strings 0x22202 No short strings 0x30311 To have a '^a' pattern. 0x5e0001-0x4ee001 To have a '^a' pattern 0x5e0210-0x55e001 To have a '^a' pattern 0x5e0311-0x601101 To have a '^a' pattern\nPattern 0x666131-0x666131a Not 0x6666-0x800003 Not 0x666-0x666133-0x666667 Not 0x666132-0x6666132a Not 0x670000-0x66f001a Not 0x66f001-0x7000099 Not 0x7000099-0x6b001a Not 0x6b0000-0x66b001a Not 0x66b001-0x66b001a Not 0x66b001-0x66b001a Not 0x666-0x66b111-0x6661116 Not 0x66a0000-0x", "exp_result": "Out: [660006] [[660660] [[006660] [[600066] [[066066] [[066600]"}, {"prompt": "\nIn: [00050] [[05000] [[00000] [[05000] [[00000]\nOut: [1000005500] [[0100005500] [[0055000010] [[0055000001] [[1000100000] [[0100010000] [[0055001000] [[0055000100] [[0000100010] [[0000010001]\nIn: [20] [[00]\nOut: [2200] [[2200] [[0010] [[0001]\nIn: [000003] [[000000] [[030000] [[000000] [[000000] [[000000]\nOut: [000000000033] [[000000000033] [[100000000000] [[010000000000] [[003300000000] [[003300000000] [[000010000000] [[000001000000] [[000000100000] [[000000010000] [[000000001000] [[000000000100]\nApply the patterns from the above examples:\nIn: [040] [[000] [[400]\nOut: ", "result": "000000000000000000000000000000 [000000001001]\nIn: [0035] [[0001]\nOut: 000000000000000000000000000000000000\nNow, let's try this out for a couple of keystrokes:\nIn: [000] [[110]\nIn: [0035] [[0000000000000000]\nIn: (0) [[1111] [[0111] [1022] [0111] [1000]\nIn: [[1111] [[0111] [1000] [1111] [0111] [1000]\nIn: (0) [[1111] [[0111] [1000] [1111] [0111] [1000]\nI'm sure you understand (1). But what about (2)? Well, this is just an implementation detail and I'll leave it out for now. For this to work, you have to use a key stroke with a pattern. Let's create a function that can do that for us. Add the following to the bottom of you.py file:\n... from thek.keystroke import keystroke from thek.keystroke import Pattern, Keycode, Keystroke, ReturnKey From your terminal prompt, type the following:\n[001] [0] [1]\nIn: {}{}{}{} [001]\nOut: {} [0111] {000}\nHere, you have to remember that your new function is actually a submodule of thek.extensions.keysymstroke class. That's how I imported the module when I created my keystroke method. Let's try it out for a couple of keystrokes. In my example, I have the keystroke method called keystroke_key, which takes a pattern and a keycode. The pattern is an array of characters and the keycode is simply a string representing a number.\nIn: {}{}{}{} [1]\nOut: aa3\nIn: {}{}{}{}{}[2]\nOut: bb0\nIn: {}{}{}{}{}[3]\nOut: 0\nHere, we can just repeat the first pattern and keycode combinations three times and we know that we will get the following sequence of characters.\nIn: {}{}{}{}{}[5]\nIn: {}{}{}{}{}[4]\nOut: bb0\nIn: {}{}{}{}{}[3]\nOut: 0\nThe two patterns above are the same pattern but different keycode. The keycode in the pattern is simply a string with a number for the keypad to follow. So, in the above pattern, that string is 0101 and the keycode is 111 (which matches up exactly with the keypad on all of my keyboards). Remember that the keystroke() method returns the current value in the key code array. If we were running the above code, we would get all sorts of results like this:\nIn: {}{}{}{}{}{}[5]\nIn: {}{}{}{}{}{}[4]\nOut: bb0 The only issue is that this will return all of the numbers that have been pressed for, so you may end up with a bunch of zeroes if you pressed a single key. The solution to this is to wrap the pattern in a list of pairs of numbers. Let's create a list that'll do that:\nIn: {}{}{}{}{}[5]\nIn: {}{}{}{}{}{}[4]\nOut: bb0\nThe \"{}{}{}{}{}\" variable will get the first value and then the next and then the value of the list will take that position in the list. The returnkey() method would be very similar, but instead of using a string, it will instead use the keycode on the left of the keypad. The following will turn off the key sequence:\nIn: {}{}{}{", "exp_result": "Out: [004400] [[004400] [[000010] [[000001] [[440000] [[440000]"}, {"prompt": "\nIn: [040000] [[000000] [[040000] [[000040] [[000000] [[000040]\nOut: [040000000000] [[333333333333] [[040000000000] [[000040000000] [[333333333333] [[000040000000] [[000000040000] [[333333333333] [[000000040000] [[000000000040] [[333333333333] [[000000000040]\nIn: [080] [[000] [[080]\nOut: [080000] [[333333] [[080000] [[000080] [[333333] [[000080]\nIn: [0070000] [[0000000] [[0070000] [[0000000] [[0000000] [[0000000] [[0000000]\nOut: [00700000000000] [[33333333333333] [[00700000000000] [[00000000000000] [[00000000000000] [[00000000000000] [[00000000000000] [[00000000070000] [[33333333333333] [[00000000070000] [[00000000000000] [[00000000000000] [[00000000000000] [[00000000000000]\nApply the patterns from the above examples:\nIn: [9000] [[0000] [[9000] [[0000]\nOut: ", "result": "\u00a0[000010000000]\nIn: [2000] [[000] [[2003] (000)\nOut: \u00a0[002000000000]\nIn: [0000] ([2004] ([030000] 0) (000)\nOut:\nIn: [00000] [[00000]\nOut: \u00a0[[00000]\nIn: \u00a0[01400]\nOut: \u00a0[01400]\nIn: [01400]\nOut: \u00a0[01400] ((00), [[00000000]\nIn: [0000000]\nOut: \u00a0[0000000]\nIn: \u00a0[0000000000\nIn: [00000050]\nOut:\u00a0 [[00000050]\nIn: \u00a0[00000050]\nOut:\u00a0 [[0000001000]\nIn: \u00a0[000000010000000, \u00a0[0000000000000000]\nOut:\nIn: 0x00000003e00 \u00a0[00001010]\nIn: 0x0000000000000003e80 \u00a0[00001010\nIn: 0x000000000100 \u00a0[00000050]\nIn: 0x0000000001 \u00a0[00000001\nIn: 0x00100 \u00a0[00100000\nIn: 0x000002 \u00a0[000002\nIn: 0x00100 \u00a0[000002\nIn: 0x01000 \u00a0[01000000 0x00000000]\nIn: 0x01000 \u00a0[01000000]\nIn: 0x01000 \u00a0[01000000]\nIn: 0x01081 \u00a0[0000020]\nIn: 0x00000004 \u00a0[0000030\nIn: 0x00000004 \u00a0[0000036\nIn: 0x00000004 \u00a0[0000040\nIn: 0x00000004 \u00a0[0000044\nIn: 0x00000004\u00a0, \u00a0[000000000000]\nIn: 0x0000000000\nIn: [00100000] ((00) \u00a0 \u00a0[00000]\nIn: [00000050]\nOut:\u00a0 [[00000050]\nIn: \u00a0(400,000,000,000)\nIn: \u00a0[000000000001]\nIn: 0x0000000000000000\nIn: 0x000000000000 \u00a0[00000050]\nIn: 0x00000000001 \u00a0[0001000000]\nIn: 0x00000001 \u00a0[0000001000]\nPVS-Studio diagnostic message: V523 The 'pregpa_get_regs' function is never used. Perhaps the 'pregpa_get_regs' function should not be called from PHP. pregpa_get_regs WPF\nIn: [070000] ([070000] ((0001) (0)\u00a00), (00100) \u00a0[080001] ((0001) (0)\u00a00), (0010))\nOut: \u00a0-13,400,000 \u00a0(15,400,000)\nIn: \u00a0[040000] ((0411) (0)\u00a00)\nOut: \u00a0(0000040000)\nIn: \u00a0[110000] (001)\nIn: \u00a0[080000] (000)\nIn: \u00a0[02000] (111)\nIn: \u00a0[000]\nIn: \u00a0[0000]\nIn: \u00a0(0008)\nIn: \u00a0(0004,0008)\nIn: \u00a0(001)\nIn: \u00a0(001)\nOut: \u00a0(00000040000)\nIn: \u00a0(0)\nIn: \u00a0(0)\nIn", "exp_result": "Out: [90000000] [[33333333] [[90000000] [[00000000] [[00009000] [[33333333] [[00009000] [[00000000]"}]