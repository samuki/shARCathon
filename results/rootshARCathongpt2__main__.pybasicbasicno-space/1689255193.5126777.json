[{"prompt": "Continue the pattern\nIn: [86] [[64]\nOut: [868686] [[646464] [[686868] [[464646] [[868686] [[646464]\nIn: [79] [[43]\nOut: [797979] [[434343] [[979797] [[343434] [[797979] [[434343]\nIn: [32] [[78]\nOut: ", "result": "\u00a0[32777]\nThis is called a \"doubling stitch\". There are two \"coupling stitches\" :\nThe first coupling stitch is a \"double crochet\". Its name is chosen from the Greek word \"tetragonion\" (doubled). This means that the two halves of a double crochet are placed side by side, the opposite halves joining in the end. As you can see in the picture, there are two doubled stitches. So we have a double crochet join.\nThe second coupling stitch is a \"double crochet join\". Its name is chosen from the Greek word \"kopi\" (double). Unlike the first coupling stitch, it does not have a beginning and an end, but instead consists of two \"long yarns\" that have slipped on the hook. This means that the two parts of each double crochet are placed side by side, and the same is true of the two half stitches. And you can find more details on this page about double crochet.\nSo the second double crochet join is made by:\na) working the long yarn using a hook size G/3.5 mm\nb) the second working yarn is slipped over the front of the stitches to the other side.\nc) the back loop of that second working yarn is slipped over the first working yarn, now at the same angle.\nThis is called a \"double crochet double\" join. I wrote all this down to save you in case it's the first time you are making this join.", "exp_result": "Out: [323232] [[787878] [[232323] [[878787] [[323232] [[787878]"}, {"prompt": "Continue the pattern\nIn: [070] [[777] [[070]\nOut: [000707000] [[000000000] [[000707000] [[707707707] [[000000000] [[707707707] [[000707000] [[000000000] [[000707000]\nIn: [006] [[060] [[600]\nOut: [000000660] [[000000606] [[000000066] [[000660000] [[000606000] [[000066000] [[660000000] [[606000000] [[066000000]\nIn: [440] [[004] [[004]\nOut: [004004000] [[440440000] [[440440000] [[000000004] [[000000440] [[000000440] [[000000004] [[000000440] [[000000440]\nIn: [003] [[330] [[030]\nOut: ", "result": "000000000000000000000000000000000000000000000000 000000000000000000000000000000000000000000000000 000000000000000000000000000000000000000000000000 000000000000000000000000000000000000000000000000\nIn: [000] [[001]\nOut: 000000000000000000000000000000000000000000000000 000000000000000000000000000000000000000000000000 000000000000000000000000000000000000000000000000 000000000000000000000000000000000000000000000000 000000000000000000000000000000000000000000000000\nIn: [006] [[300]\nOut: [00000400] [[00020000] [[00000400] [[00000400] [[00000400]\nOn the next round [1]:\nIn: [0007] [[777]\nOut: [0007000000]\nIn: [1][00]\nOut: 0007\nIn: [10]\nOut: 00070000\nIn: [1][00]\nOut: 00070000\nOut: [10][00]\nIn: [000]\nOut: 000000000000000000000000000000000000000000000000 000000000000000000000000000000000000000000000000 000000000000000000000000000000000000000000000000\nIn: [000]\nOut: 000000000000000000000000000000000000000000000000 000000000000000000000000000000000000000000000000 000000000000000000000000000000000000000000000000 000000000000000000000000000000000000000000000000\nIn: [000]\nOut: 000000000000000000000000000000000000000000000000 000000000000000000000000000000000000000000000000 000000000000000000000000000000000000000000000000 000000000000000000000000000000000000000000000000\nOut: [000]\nOut: 000000000000000000000000000000000000000000000001000000000 000000000000000000500\nIn: [000] [[000]\nOut: 000000000000000000000000000000000000000000000000 000000000000000000000000000000000000000000000000\nIn: [0002] [[0002]\nOut: 000000000000000000000000000000000000000000000000\nOut: [0001] [[0001000]\nOut: 000000000000000000000000000000000000000000000000\nOut: 000000000000000000000000000000000000000000000000\nIn: [0001] [[00]\nOut: 500\nIn: [0007] [[777]\nOut: 00000000000000000000000000000000\nIn: [1][00]\nIn: 000000000000000000000000000000000000000000000000 00000000000000000000000000000000000000 00000000000000000000000000000000000000\nIn: [0002] [[0002]\nOut: 000000000000000000000000000000000000000000000000 00000000000000000000000000000000000000 00000000000000000000000000000000000000\nIn: [0001] [[0003]\nOut: 000000000000000000000000000000000000000000000000\nOut: 000000000000000000000000000000000000000000000000 00000000000000000\nIn: [000] [[0003]\nOut: 0000000000000000000000000000000000000004 00000000000000000000000000000000000000 00000000000000000000000000000000000000\nIn: [0001] [[004]\nOut: 000000000000000000000000000000000000000000000000 0000000000000000000000000 0000000000000000000000000000000000000100000000 0000000000000000000000000000000000000100000000\nIn: [0001] [[0004]\nOut: 000000000000000000000000000000000000000000100000 00000000000000000100000000000000 0000000000000000000000000000000000000000000000 00000000000000000000000000000000000000\nIn: [0001] [[0005]\nOut: 000000000000000000000000000000000000000000000000 0000000000000000000000000000000000000000000000000 0000000000000000000000000000000000000100000000 000000000000000000000000000000000000000000100000\nOut: 00000000000000000000000000000000000000000000000000100000 0000000000000000000000000000000000000000000\nIn: [0001] [[0006]\nOut: 000000000000000000000000000000000000000000000111000 00000000000000000000000000000000000000000 00000100000000000001 00000000000000000000000000000000000000\nIn: [000] [[002]\nOut: 000000000000000000000000000000000000000000000011000 00000000000000100000000 0000010000000000050 00000100000000000010\nIn: [00]\nOut: 00000100000000000000110000 00000000000000000000000000000000000000 0000000000000000000000000000000000000008\nIn: [000] [[003]\nOut: 0000000000000111000 00000000000000100000000 000000000000000000000000000000000000 000001000000000000010\nIn: [000] [[00]\nOut: 0000010000000000000100000 0000000000000000000000000000000000 00000000000000000000000000000000000000\nIn: [000] [[0004]\nOut: 0000000000000111000 0000010000000000000011000 00000100000000000001 0000000000000111000\nOut: [000] [[00]\nOut: 000001000000000000000 0003C111000000008000111000 0000010000000000001200 00000000000000000000000000000000000001\nIn: [000] [[0005]\nOut: 00000000000000000000000000000000000\nIn: [0][00]\nOut: 00000100000000000010\nIn: [0][00]\nIn: 00000100000000000010.80000000\nIn: [0][00]\nIn: 00000000000002", "exp_result": "Out: [000000330] [[000000003] [[000000303] [[330330000] [[003003000] [[303303000] [[000330000] [[000003000] [[000303000]"}, {"prompt": "Continue the pattern\nIn: [6242] [[2266] [[6424]\nOut: [42466424] [[66222266] [[24266242] [[24266242] [[66222266] [[42466424]\nIn: [5599] [[9555] [[5757]\nOut: [75755757] [[55599555] [[99555599] [[99555599] [[55599555] [[75755757]\nIn: [3355] [[5858] [[8858]\nOut: [85888858] [[85855858] [[55333355] [[55333355] [[85855858] [[85888858]\nIn: [8578] [[7788] [[5585]\nOut: ", "result": "\u00a0[5582] << \u00a05858\nIn: [8585] [[9555]\nOut: [95555555] << \u00a07788\nIn: [8585] [[9555]\nOut: \u00a0[5582] << \u00a05858\nIn: [8585] [[9555]\nOut: \u00a0[5582] << \u00a05858\n(repeat again)\nRepeat this 8 times to the last stitch along (the number of times you knit and purl the sts together is your size).\nRepeat all the stitches, starting at the very top of the fabric and working up to the finished edge.\nThis is a quick, simple, inexpensive project that will really take you off to the races for the season.\u00a0\n(You can buy the yarn and materials at The Loft Knits at this link : http://www.theloftknits.com/projects/3/1/6/11/ )\nKnitty Pattern Index for this pattern\nThe Loft Knits Pattern Book is Available from this link http://www.knitty.com/patterns/library/\nPattern is also available on my blog (in English) :\u00a0 http://theloftknits.wordpress.com/2011/05/10/sog-pajamas/ \u00a0(I also have a blog series and blog-book for crochet at this link : http://theloftknits.blogspot.it/ )\nHere is a short sample of both the knit or knit-into-row & knit-to-curl pieces.", "exp_result": "Out: [58555585] [[88777788] [[87588578] [[87588578] [[88777788] [[58555585]"}, {"prompt": "Continue the pattern\nIn: [446] [[333] [[664]\nOut: [000000000] [[000000000] [[000000000] [[446446446] [[333333333] [[664664664] [[000000000] [[000000000] [[000000000]\nIn: [243] [[234] [[234]\nOut: [243000000] [[234000000] [[234000000] [[243000000] [[234000000] [[234000000] [[243000000] [[234000000] [[234000000]\nIn: [111] [[622] [[226]\nOut: [111111111] [[622622622] [[226226226] [[000000000] [[000000000] [[000000000] [[000000000] [[000000000] [[000000000]\nIn: [316] [[361] [[316]\nOut: [316000000] [[361000000] [[316000000] [[316000000] [[361000000] [[316000000] [[316000000] [[361000000] [[316000000]\nIn: [663] [[443] [[443]\nOut: ", "result": "\u00a01 [30000] 2 [30000] 3 [30000] 4 [30000] 5 [30000] 6 [30000] 7 [30000] 8 [30000] 9 [30000] 10 [30000]\nIn: [111] [[622]\nOut: \u00a04 [1] [1] [1] [1] \u00a05 [1] 7 [1] \u00a08 [1] \u00a09 [1] \u00a00 [1]\nIn: [011] [[311]\nOut: \u00a02 [111111111] 3 [111111111] 4 [111111111] 5 [111111111] 6 [111111111] 7 [111111111] 8 [111111111] 9 [111111111] 10 [1101111111] 11\nIn: [111] [[622]\nOut: [111111111] [[622]\nOut: [111000000] [[622]\nIn: \u00a00 [1101111111] \u00a01 [1101111111] 1 [1] \u00a01 [111111111] 1 [111111111] 2 [111111111] 2 [111111111] 1\nIn: [622] [2]\nOut: \u00a0[5,] 7,] 8\nOut \u00a0(7,) 0,\nIn: [8] \u00a010,\nOut: [111111111] \u00a01 [4,] 4,\nIn: [1433] \u00a02 [1,] \u00a01 [1]\nIn: [11] \u00a02 [1]\nOut: \u00a01 [1]\nIn: [7]\nOut: [01,]\nIn: [10]\nOut: [111111111]\nSo there we have it. I hope you find this helpful. The\u00a0Pattern\u00a0of the\u00a0Shared Memory\nA few more techniques of\u00a0uniqueness\u00a0in\u00a0the\u00a0shared\u00a0memory\u00a0will now become\u00a0more practical as more\u00a0objects\u00a0are\u00a0shared\u00a0together.\u00a0So...\nFirst,\u00a0consider an\u00a0exhaustive\u00a0list\u00a0of\u00a0objects, which are\u00a0equally shared among\u00a0all\u00a0the\u00a0shared\u00a0objects.\u00a0\nSuppose the list\u00a0of\u00a0objects\u00a0is\u00a0a\u00a0vector.\u00a0\nSuppose we want to\u00a0find\u00a0each\u00a0of\u00a0these\u00a0objects\u00a0in memory\u00a0in order.\u00a0\nIf we have access to all\u00a0the\u00a0objects\u00a0we find, then we\u00a0can\u00a0make a\u00a0search\u00a0on\u00a0the\u00a0entire--\u00a0of \u00a0all \u00a0the\u00a0elements\u00a0of \u00a0the\u00a0list\u00a0of\u00a0objects\u00a0in memory.\nA good\u00a0way\u00a0of\u00a0doing\u00a0this is to ask\u00a0: ``What is the\u00a0equivalent of a\u00a0map\u00a0of\u00a0all\u00a0the\u00a0entries\u00a0in the\u00a0map\u00a0of\u00a0the\u00a0map\u00a0of\u00a0the\u00a0map''?\nFor now, just pretend that we find the same\u00a0all\u00a0of the\u00a0keys in the\u00a0map and the exact same\u00a0values\u00a0in the\u00a0valuation, and the expression is what happens in the\u00a0valuation--\u00a0and we will call\u00a0key\u00a0and value\u00a0the\u00a0elements of\u00a0map.", "exp_result": "Out: [000000663] [[000000443] [[000000443] [[000000663] [[000000443] [[000000443] [[000000663] [[000000443] [[000000443]"}]