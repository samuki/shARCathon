[{"taskId": "fb791726.json", "prompt": "\nIn: [[0,4,0,0,0,0],[0,0,0,0,0,0],[0,4,0,0,0,0],[0,0,0,0,4,0],[0,0,0,0,0,0],[0,0,0,0,4,0]]\nOut: [[0,4,0,0,0,0,0,0,0,0,0,0],[3,3,3,3,3,3,3,3,3,3,3,3],[0,4,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,4,0,0,0,0,0,0,0],[3,3,3,3,3,3,3,3,3,3,3,3],[0,0,0,0,4,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,4,0,0,0,0],[3,3,3,3,3,3,3,3,3,3,3,3],[0,0,0,0,0,0,0,4,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,4,0],[3,3,3,3,3,3,3,3,3,3,3,3],[0,0,0,0,0,0,0,0,0,0,4,0]]\nIn: [[0,8,0],[0,0,0],[0,8,0]]\nOut: [[0,8,0,0,0,0],[3,3,3,3,3,3],[0,8,0,0,0,0],[0,0,0,0,8,0],[3,3,3,3,3,3],[0,0,0,0,8,0]]\nIn: [[0,0,7,0,0,0,0],[0,0,0,0,0,0,0],[0,0,7,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]\nOut: [[0,0,7,0,0,0,0,0,0,0,0,0,0,0],[3,3,3,3,3,3,3,3,3,3,3,3,3,3],[0,0,7,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,7,0,0,0,0],[3,3,3,3,3,3,3,3,3,3,3,3,3,3],[0,0,0,0,0,0,0,0,0,7,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0]]\nApply the patterns from the above examples:\nIn: [[9,0,0,0],[0,0,0,0],[9,0,0,0],[0,0,0,0]]\nOut: ", "result": "\n [[9,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]\nAnd so on...\nNote that the first pattern should only be applied at the beginning of each row. This is because the second and last patterns are a bit more complicated, and you need to know the exact row and column index of the pattern which you are applying to make sure you only apply the pattern of the row you want to replace and all the rows before it.\nIn case you are not familiar with the TensorFlow API, and you want a bit more control over the patterns, you may want to check out @SvenPetersen's answer here.\n\n", "exp_result": "Out: [[9,0,0,0,0,0,0,0],[3,3,3,3,3,3,3,3],[9,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,9,0,0,0],[3,3,3,3,3,3,3,3],[0,0,0,0,9,0,0,0],[0,0,0,0,0,0,0,0]]"}, {"taskId": "f0afb749.json", "prompt": "\nIn: [[0,0,0,5,0],[0,5,0,0,0],[0,0,0,0,0],[0,5,0,0,0],[0,0,0,0,0]]\nOut: [[1,0,0,0,0,0,5,5,0,0],[0,1,0,0,0,0,5,5,0,0],[0,0,5,5,0,0,0,0,1,0],[0,0,5,5,0,0,0,0,0,1],[1,0,0,0,1,0,0,0,0,0],[0,1,0,0,0,1,0,0,0,0],[0,0,5,5,0,0,1,0,0,0],[0,0,5,5,0,0,0,1,0,0],[0,0,0,0,1,0,0,0,1,0],[0,0,0,0,0,1,0,0,0,1]]\nIn: [[2,0],[0,0]]\nOut: [[2,2,0,0],[2,2,0,0],[0,0,1,0],[0,0,0,1]]\nIn: [[0,0,0,0,0,3],[0,0,0,0,0,0],[0,3,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]\nOut: [[0,0,0,0,0,0,0,0,0,0,3,3],[0,0,0,0,0,0,0,0,0,0,3,3],[1,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0],[0,0,3,3,0,0,0,0,0,0,0,0],[0,0,3,3,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,1,0,0]]\nApply the patterns from the above examples:\nIn: [[0,4,0],[0,0,0],[4,0,0]]\nOut: ", "result": " [[0,2,4],[5,2,0],[4,2,0]]\n\n", "exp_result": "Out: [[0,0,4,4,0,0],[0,0,4,4,0,0],[0,0,0,0,1,0],[0,0,0,0,0,1],[4,4,0,0,0,0],[4,4,0,0,0,0]]"}, {"taskId": "ed98d772.json", "prompt": "\nIn: [[9,9,9],[0,0,0],[9,9,0]]\nOut: [[9,9,9,9,0,0],[0,0,0,9,0,9],[9,9,0,9,0,9],[0,9,9,9,0,9],[0,0,0,9,0,9],[9,9,9,0,0,9]]\nIn: [[3,0,3],[0,3,3],[3,3,3]]\nOut: [[3,0,3,3,3,3],[0,3,3,0,3,3],[3,3,3,3,0,3],[3,3,3,3,0,3],[3,3,0,3,3,0],[3,0,3,3,3,3]]\nIn: [[3,3,3],[0,0,3],[3,0,0]]\nOut: [[3,3,3,3,3,0],[0,0,3,3,0,0],[3,0,0,3,0,3],[0,0,3,3,0,3],[3,0,0,0,0,3],[3,3,3,0,3,3]]\nIn: [[8,0,8],[8,0,0],[8,0,0]]\nOut: [[8,0,8,8,0,0],[8,0,0,0,0,0],[8,0,0,8,8,8],[0,0,8,8,8,8],[0,0,8,0,0,0],[8,0,8,0,0,8]]\nIn: [[0,7,7],[0,0,0],[7,7,0]]\nOut: [[0,7,7,7,0,0],[0,0,0,7,0,7],[7,7,0,0,0,7],[0,7,7,7,0,0],[0,0,0,7,0,7],[7,7,0,0,0,7]]\nApply the patterns from the above examples:\nIn: [[6,6,0],[6,6,0],[0,0,6]]\nOut: ", "result": " [[0,6,6,6,0,0],[0,0,6,6,0,0],[6,6,0,6,6,0]]\nIn: [[6,7,0],[6,0,6],[7,0,0]]\nOut: [[6,0,6,7,0,0],[6,7,0,0,0,6],[7,0,0,0,0,7]]\nIn: [[6,3,0],[6,0,3],[0,3,0]]\nOut: [[0,3,3,3,0,0],[0,3,3,0,0,3],[6,0,3,3,0,3],[0,3,3,3,0,3],[6,3,0,3,0,3]]\nIn: [[6,4,0],[6,0,4],[0,4,0]]\nOut: [[0,4,4,4,0,0],[0,0,4,4,0,0],[6,0,4,4,0,0],[6,0,4,4,0,0],[0,4,4,4,0,0],[0,0,4,4,0,0]]\n\nA:\n\nPython 3.6 (but you can use 3.5)\nThis should work (I tested it on a 4-digit, 8-digit, and 8-digit array)\nIn [56]: x.split('.', '\\s+').map(lambda x: x.split('[', 4))\nOut[56]: \n[[13, 12, 12, 13, 13, 11], [12, 11, 10, 12, 11, 10], [12, 11, 10, 12, 11, 10], [12, 11, 10, 12, 11, 10], [12, 12, 12, 12, 12, 12], [12, 12, 12, 12, 12, 12], [12, 12, 12, 12, 12, 12], [12, 12, 12, 12, 12, 12], [12, 12, 12, 12, 12, 12], [12, 12, 12, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12], [12, 13, 11, 11, 12, 12, 12]]\n\nIn [67]: x.split('.', '\\s+').map(lambda x: x.split('[', 4))\nOut[67]: \n[[13, 12, 12, 13, 12, 13], [12, 12, 11, 11, 12, 12], [12, 11, 10, 10, 12, 11], [12, 11, 10, 11, 12, 12], [11, 10, 10, 11, 12, 11], [11, 10, 10, 12, 11, 12], [11, 10, 10, 12, 11, 12], [11, 10, 10, 12, 11, 12], [11, 10, 10, 12, 11, 12], [10, 12, 12, 12, 12, 12], [11, 12, 12, 12, 12, 12], [11, 12, 12, 12, 12, 12], [10, 12, 12, 12, 12, 12], [10, 12, 12, 12, 12, 12], [10, 12, 12, 12, 12, 12], [10, 12, 12, 12, 12, 12], [10, 12, 12, 12, 12, 12], [12, 12, 12, 12, 12, 12], [11, 10, 10, 11, 10, 12], [11, 10, 10, 11, 12, 12], [11, 10, 10, 11, 12, 12], [13, 12, 11, 11, 11, 12], [12, 12, 12, 12, 12, 12], [11, 12, 12, 12, 12, 12], [11, 12, 12, 12, 12, 12], [11, 12, 12, 12, 12, 12], [11, 12, 12, 12, 12, 12], [13, 11, 11, 13, 11, 12], [12, 12, 12, 12, 12, 12], [12, 12, 12, 12, 12, 12], [11, 12, 12, 12, 12, 12], [11, 12, 12, 12, 12, 12], [11, 12, 12, 12, 12, 12], [11, 12, 12, 12, 12, 12], [11, 12, 12, 12, 12, 12], [11, 12, 12, 12, 12, 12], [12, 12, 12, 12, 12, 12], [12, 12, 12, 12, 12, 12], [11, 12, 12, 12, 12, 12], [11, 12, 12, 12, 12, 12], [11, 12, 12, 12, 12, 12]]\n\n", "exp_result": "Out: [[6,6,0,0,0,6],[6,6,0,6,6,0],[0,0,6,6,6,0],[6,0,0,0,6,6],[0,6,6,0,6,6],[0,6,6,6,0,0]]"}, {"taskId": "ed74f2f2.json", "prompt": "\nIn: [[0,0,0,0,0,0,0,0,0],[0,5,5,0,0,5,5,5,0],[0,0,5,0,0,5,0,5,0],[0,0,5,5,0,5,0,5,0],[0,0,0,0,0,0,0,0,0]]\nOut: [[2,2,2],[2,0,2],[2,0,2]]\nIn: [[0,0,0,0,0,0,0,0,0],[0,0,5,5,0,5,0,5,0],[0,0,5,0,0,5,0,5,0],[0,5,5,0,0,5,5,0,0],[0,0,0,0,0,0,0,0,0]]\nOut: [[3,0,3],[3,0,3],[3,3,0]]\nIn: [[0,0,0,0,0,0,0,0,0],[0,5,5,5,0,5,0,5,0],[0,0,5,0,0,0,5,5,0],[0,0,5,0,0,5,0,5,0],[0,0,0,0,0,0,0,0,0]]\nOut: [[1,0,1],[0,1,1],[1,0,1]]\nIn: [[0,0,0,0,0,0,0,0,0],[0,5,5,5,0,5,0,5,0],[0,0,5,0,0,5,5,5,0],[0,0,5,0,0,5,5,0,0],[0,0,0,0,0,0,0,0,0]]\nOut: [[1,0,1],[1,1,1],[1,1,0]]\nIn: [[0,0,0,0,0,0,0,0,0],[0,5,5,0,0,5,5,0,0],[0,0,5,0,0,0,5,5,0],[0,0,5,5,0,0,5,0,0],[0,0,0,0,0,0,0,0,0]]\nOut: [[2,2,0],[0,2,2],[0,2,0]]\nIn: [[0,0,0,0,0,0,0,0,0],[0,5,5,0,0,5,0,0,0],[0,0,5,0,0,0,5,5,0],[0,0,5,5,0,5,0,0,0],[0,0,0,0,0,0,0,0,0]]\nOut: [[2,0,0],[0,2,2],[2,0,0]]\nApply the patterns from the above examples:\nIn: [[0,0,0,0,0,0,0,0,0],[0,0,5,5,0,5,5,0,0],[0,0,5,0,0,5,5,5,0],[0,5,5,0,0,5,0,5,0],[0,0,0,0,0,0,0,0,0]]\nOut: ", "result": "\n\nA:\n\nIf you run the pattern matching function multiple times, the inner loop will keep running infinitely many times\n>>> def f(x):\n...     return x - 10\n...\n>>> def g(x):\n...     print(f(x) - g(x))\n... \n>>> for x in [[0,0,0,0,0,0,0,0,0],[0,5,5,0,5,5,0,5,0],[0,0,5,0,0,5,0,5,0],[0,0,5,5,0,5,0,5,0],[0,0,0,0,0,0,0,0,0],[0,5,5,0,0,5,0,5,0]]:\n...     print(g(x))\n...\n5\n0\n5\n1\n0\n0\n\nYou can use a while loop to stop the loop early if the count exceeds a certain number\n\nA:\n\nHere's a functional solution, but I'm not sure if it's ideal.\ndef f(x):\n    def g(x):\n        return x - 10\n\n    return x * x - 10        \n\ndef g(x):\n    return x * x - 5    \n\nx = [0, 5, 5, 0]\nresult = 0\nfor a in x:\n   for p in [f, g]:\n        print(p)\n        if a in x:\n            break  # exit if the pattern matches\n        else:\n            result += p(x)\n            x = [p(a)]\n\nprint(result)\n\nOutput:\n[0, 5, 5, 0]\n[3, 0]\n\n", "exp_result": "Out: [[3,3,0],[3,3,3],[3,0,3]]"}, {"taskId": "e6de6e8f.json", "prompt": "\nIn: [[2,0,0,0,2,0,2,0,2,0,0,2],[2,2,0,2,2,0,2,0,2,2,0,2]]\nOut: [[0,0,0,3,0,0,0],[0,0,0,2,2,0,0],[0,0,0,2,2,0,0],[0,0,0,2,0,0,0],[0,0,0,2,0,0,0],[0,0,0,2,2,0,0],[0,0,0,0,2,0,0],[0,0,0,0,2,0,0]]\nIn: [[0,2,0,2,0,0,2,0,0,2,0,2],[2,2,0,2,2,0,2,2,0,2,0,2]]\nOut: [[0,0,0,3,0,0,0],[0,0,2,2,0,0,0],[0,0,2,2,0,0,0],[0,0,0,2,2,0,0],[0,0,0,0,2,0,0],[0,0,0,0,2,0,0],[0,0,0,0,2,0,0],[0,0,0,0,2,0,0]]\nIn: [[2,0,2,0,2,0,0,2,0,0,2,0],[2,0,2,0,2,2,0,2,2,0,2,2]]\nOut: [[0,0,0,3,0,0,0],[0,0,0,2,0,0,0],[0,0,0,2,0,0,0],[0,0,0,2,0,0,0],[0,0,0,2,0,0,0],[0,0,2,2,0,0,0],[0,2,2,0,0,0,0],[2,2,0,0,0,0,0]]\nIn: [[2,0,0,2,0,0,2,0,0,2,0,2],[2,2,0,2,2,0,2,2,0,2,0,2]]\nOut: [[0,0,0,3,0,0,0],[0,0,0,2,2,0,0],[0,0,0,0,2,0,0],[0,0,0,0,2,2,0],[0,0,0,0,0,2,2],[0,0,0,0,0,0,2],[0,0,0,0,0,0,2],[0,0,0,0,0,0,2]]\nApply the patterns from the above examples:\nIn: [[2,0,2,0,0,2,0,0,0,2,0,2],[2,0,2,2,0,2,2,0,2,2,0,2]]\nOut: ", "result": " [[0,0,0,3,0,0,0],[0,0,0,2,0,0,0],[0,0,0,2,0,0,0],[0,0,2,2,0,0,0],[0,2,2,0,0,0,0],[0,0,2,0,2,0,0],[0,0,2,0,2,0,0],[0,0,0,2,2,0,0],[0,0,0,0,0,2,0,0]]\nIn: [[2,0,0,2,0,0,2,0,0,2,0,2],[2,0,2,0,2,2,0,2,2,0,2,2]]\nOut: [[0,0,0,3,0,0,0],[0,2,0,2,0,0,0,0,2,0,2],[0,0,2,0,2,0,0,0,0,2],[0,2,2,0,0,0,0,0,2],[0,2,2,0,0,0,0,0,2],[0,0,0,2,0,2,0,0],[0,0,0,2,2,0,0],[0,0,0,0,0,2,2,0],[0,0,0,0,0,2,2,0],[0,0,0,0,0,2,0,2]]\nApply the patterns from the above examples:\nIn: [[0,2,2,0,2,0,0,2,0,2,0,2],[0,2,2,0,2,0,2,2,0,2,0,2],[0,2,2,0,2,0,0,0,0,2],[0,0,0,2,0,2,0,0,0,0,0]]\nOut: [0,0,0,3,0,0,0,3,0,0,0,0,0]\nIn: [[0,2,0,2,0,0,2,0,0,2,0,2],[0,2,0,2,0,0,2,2,0,2,0,2],[0,0,2,0,2,0,0,0,0,0,0,0]]\nOut: [0,0,0,2,0,0,0,2,2,0,0,0,0],[0,2,2,0,2,0,0,2,0,0,0,0]]\nIn: [[2,2,0,2,2,0,2,0,2,0,0,2],[2,2,0,2,2,0,2,2,0,2,0,2]]\nOut: [0,0,0,3,0,0,0,3,0,0,0,0,0]\n\n", "exp_result": "Out: [[0,0,0,3,0,0,0],[0,0,0,2,0,0,0],[0,0,0,2,0,0,0],[0,0,0,2,2,0,0],[0,0,0,0,2,2,0],[0,0,0,0,2,2,0],[0,0,0,0,2,0,0],[0,0,0,0,2,0,0]]"}, {"taskId": "e633a9e5.json", "prompt": "\nIn: [[6,5,5],[5,1,7],[4,5,2]]\nOut: [[6,6,5,5,5],[6,6,5,5,5],[5,5,1,7,7],[4,4,5,2,2],[4,4,5,2,2]]\nIn: [[1,3,5],[1,2,8],[8,3,8]]\nOut: [[1,1,3,5,5],[1,1,3,5,5],[1,1,2,8,8],[8,8,3,8,8],[8,8,3,8,8]]\nIn: [[2,3,7],[2,1,6],[1,5,7]]\nOut: [[2,2,3,7,7],[2,2,3,7,7],[2,2,1,6,6],[1,1,5,7,7],[1,1,5,7,7]]\nApply the patterns from the above examples:\nIn: [[1,2,5],[7,3,6],[7,6,5]]\nOut: ", "result": "\n[[1,1,2,5,5],[1,1,2,5,5],[7,7,6,5],[7,5,7,6,6],[7,5,7,6,6]]\nIn: [[1,1,3,5],[7,7,6],[7,7,6],[7,7,6],[7,7,6],[7,7,6],[7,7,6]]\nOut: \n[[1,1,2,3,5],[7,7,6],[7,7,6],[7,7,6],[7,7,6],[7,7,6],[7,7,6]]\nIn: [[1,1,3,5],[7,7,6],[7,7,6],[7,7,6],[7,7,6],[7,7,6],[7,7,6]]\nOut: \n[[1,1,2,3,5],[7,7,6],[7,7,6],[7,7,6],[7,7,6],[7,7,6],[7,7,6]]\nIn: [[1,2,3,7],[7,5,7],[7,5,7],[7,5,7],[7,5,7],[7,5,7],[7,5,7]]\nOut: [[1,1,2,3,7],[7,7,6],[7,7,6],[7,7,6],[7,7,6],[7,7,6],[7,7,6]]\nIn: [[1,3,5],[7,7,6],[7,7,6],[7,7,6],[7,7,6],[7,7,6],[7,7,6],[7,7,6]]\nOut: [[1,1,2,3,7],[7,7,6,5,5],[7,7,6,5,5],[7,5,7,6,6],[7,5,7,6,6],[7,5,7,6,6]]\nIn: [[1,3,5],[7,7,6],[7,7,6],[7,7,6],[7,7,6],[7,7,6],[7,7,6],[7,7,6]]\nOut: [[1,1,2,3,7],[7,7,6,5,5],[7,7,6,5,5],[7,5,7,6,6],[7,5,7,6,6],[7,5,7,6,6]]\nOut: [[1,1,3,5],[7,7,6,5,5],[7,7,6,5,5],[7,7,6,5,5],[7,7,6,5,5],[7,7,6,5,5]]\nIn: [[1,2,3,7],[3,5,7],[3,5,7],[3,5,7],[3,5,7],[3,5,7],[3,5,7],[3,5,7]]\nOut: [[1,1,2,3,7],[3,7,6],[3,7,6],[3,7,6],[3,7,6],[3,7,6],[3,7,6],[3,7,6]]\nIn: [[1,3,5],[7,7,6],[7,7,6],[7,7,6],[7,7,6],[7,7,6],[7,7,6],[7,7,6]]\nOut: [[1,1,2,3,7],[7,7,6,5,5],[7,7,6,5,5],[7,7,6,5,5],[7,7,6,5,5],[7,7,6,5,5]]\n\nA:\n\nWe can do it using this pattern to identify pairs and then using this pattern to match the number in the correct order.  We convert to string and then back to list to avoid the duplicates.\nIn [1]: l = [\n  ...: [(1, 1), (2, 2), (3, 3), (4, 4)]\n]\n\nIn [2]: s = '([1, 3, 5], [1, 2, 8], [8, 3, 8])'\n\nIn [3]: list(map(tuple,zip(*s.pairs)))\nOut[3]: [[(1, 1), (2, 2), (3, 3), (4, 4)]\n\nIn [4]: list(map(tuple,zip(*s.pairs,0)))\nOut[4]: [[(1, 1), (1, 2), (1, 3), (4, 6)]\n\n", "exp_result": "Out: [[1,1,2,5,5],[1,1,2,5,5],[7,7,3,6,6],[7,7,6,5,5],[7,7,6,5,5]]"}, {"taskId": "e345f17b.json", "prompt": "\nIn: [[6,6,6,6,5,0,5,0],[6,0,0,0,5,5,0,0],[6,0,6,6,0,0,5,5],[0,0,6,0,0,5,5,0]]\nOut: [[0,0,0,0],[0,0,4,4],[0,4,0,0],[4,0,0,4]]\nIn: [[0,6,6,0,5,5,5,0],[0,6,0,6,5,0,0,5],[0,6,6,6,5,5,5,5],[6,0,0,0,0,5,0,5]]\nOut: [[0,0,0,4],[0,0,4,0],[0,0,0,0],[0,0,4,0]]\nIn: [[6,6,6,0,5,0,5,5],[6,0,0,0,0,5,5,5],[6,0,0,0,0,0,0,0],[0,6,6,6,5,5,0,0]]\nOut: [[0,0,0,0],[0,0,0,0],[0,4,4,4],[0,0,0,0]]\nIn: [[6,0,6,0,0,0,5,5],[0,6,6,6,5,0,5,5],[6,6,0,6,5,0,5,5],[6,6,0,0,5,0,0,0]]\nOut: [[0,4,0,0],[0,0,0,0],[0,0,0,0],[0,0,4,4]]\nApply the patterns from the above examples:\nIn: [[6,0,6,6,5,0,0,5],[0,0,0,6,5,5,5,5],[0,6,6,0,5,5,0,5],[6,6,0,0,5,5,5,0]]\nOut: ", "result": "\n\nSo we can see that we can get a list of lists back from Apply, and those will be the columns from the first example we got from above, in any case as you can see, the output will be a list of lists.\nNow for the second one:\nIn: [[6,6,6,0,5,5,0,5],[0,6,6,6,0,0,0,5]]\nOut: \n\nSo the above one will be similar to the first one, except that this time we would have a list of lists instead of a list of tuples.\nAs for the last one:\nIn: [[6,6,6,6,0,0,5,5],[0,0,6,0,0,5,5,5],[0,0,6,6,0,5,0,5],[6,0,0,0,0,5,0,0,5]]\nOut: \n\nSo the above one will be similar to the second one, except that the output will be a list of lists because now we've got a list of tuples.\nAs for the last one:\nIn: [[6,6,6,0,0,0,0,5],[0,0,6,0,6,5,5,5]]\nOut: \n\nSo the above one will be similar to the second one, except that the output will be another list of lists as each tuple is a list of tuples.\n\n", "exp_result": "Out: [[0,4,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,4]]"}, {"taskId": "e21a174a.json", "prompt": "\nIn: [[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,8,8,8,8,8,8,8,0,0,0],[0,0,0,2,2,2,2,2,2,2,0,0,0],[0,0,0,0,0,0,2,0,0,0,0,0,0],[0,0,0,3,3,3,3,3,3,3,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0,0],[0,0,0,1,1,1,1,1,1,1,0,0,0],[0,0,0,1,0,0,0,0,0,1,0,0,0],[0,0,0,1,1,1,1,1,1,1,0,0,0],[0,0,0,0,0,0,4,0,0,0,0,0,0],[0,0,0,4,4,4,4,4,4,4,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0]]\nOut: [[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,4,0,0,0,0,0,0],[0,0,0,4,4,4,4,4,4,4,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0,0],[0,0,0,1,1,1,1,1,1,1,0,0,0],[0,0,0,1,0,0,0,0,0,1,0,0,0],[0,0,0,1,1,1,1,1,1,1,0,0,0],[0,0,0,3,3,3,3,3,3,3,0,0,0],[0,0,0,2,2,2,2,2,2,2,0,0,0],[0,0,0,0,0,0,2,0,0,0,0,0,0],[0,0,0,8,8,8,8,8,8,8,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0]]\nIn: [[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,1,1,0,1,1,1,0,0,0],[0,0,0,0,0,1,1,1,0,0,0,0,0],[0,0,0,2,2,2,2,2,2,2,0,0,0],[0,0,0,2,0,0,0,0,0,2,0,0,0],[0,0,0,2,2,2,2,2,2,2,0,0,0],[0,0,0,0,0,3,3,3,0,0,0,0,0],[0,0,0,0,0,3,0,3,0,0,0,0,0],[0,0,0,0,0,0,3,0,0,0,0,0,0],[0,4,4,4,4,4,4,4,4,4,4,4,0],[0,0,0,5,5,5,5,5,5,5,0,0,0],[0,0,0,5,5,0,0,0,5,5,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0]]\nOut: [[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,5,5,5,5,5,5,5,0,0,0],[0,0,0,5,5,0,0,0,5,5,0,0,0],[0,4,4,4,4,4,4,4,4,4,4,4,0],[0,0,0,0,0,3,3,3,0,0,0,0,0],[0,0,0,0,0,3,0,3,0,0,0,0,0],[0,0,0,0,0,0,3,0,0,0,0,0,0],[0,0,0,2,2,2,2,2,2,2,0,0,0],[0,0,0,2,0,0,0,0,0,2,0,0,0],[0,0,0,2,2,2,2,2,2,2,0,0,0],[0,0,0,1,1,1,0,1,1,1,0,0,0],[0,0,0,0,0,1,1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0]]\nIn: [[0,0,0,0,0,0,0],[0,1,1,1,1,1,0],[0,0,2,2,2,0,0],[0,0,2,2,2,0,0],[0,3,3,3,3,3,0],[0,0,0,3,0,0,0],[0,0,0,0,0,0,0]]\nOut: [[0,0,0,0,0,0,0],[0,3,3,3,3,3,0],[0,0,0,3,0,0,0],[0,0,2,2,2,0,0],[0,0,2,2,2,0,0],[0,1,1,1,1,1,0],[0,0,0,0,0,0,0]]\nApply the patterns from the above examples:\nIn: [[0,0,0,0,0,0,0],[0,4,4,4,4,4,0],[0,4,0,4,0,4,0],[0,0,5,5,5,0,0],[0,6,0,6,0,6,0],[0,0,6,0,6,0,0],[0,0,0,0,0,0,0]]\nOut: ", "result": "\n[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],...\n[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n...\n]\n\nThe expected output is:\n[[ 0,0,0,0,0,0,0,0,0],[ 0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],...\n[ 0,0,0,0,0,0,0,0,0,", "exp_result": "Out: [[0,0,0,0,0,0,0],[0,6,0,6,0,6,0],[0,0,6,0,6,0,0],[0,0,5,5,5,0,0],[0,4,4,4,4,4,0],[0,4,0,4,0,4,0],[0,0,0,0,0,0,0]]"}, {"taskId": "e133d23d.json", "prompt": "\nIn: [[6,0,0,4,0,0,8],[0,6,0,4,0,0,8],[0,6,0,4,8,8,0]]\nOut: [[2,0,2],[0,2,2],[2,2,0]]\nIn: [[0,0,6,4,8,8,0],[0,6,0,4,0,8,8],[0,6,6,4,8,0,0]]\nOut: [[2,2,2],[0,2,2],[2,2,2]]\nIn: [[0,0,6,4,8,0,8],[6,0,6,4,0,0,0],[0,6,6,4,8,0,8]]\nOut: [[2,0,2],[2,0,2],[2,2,2]]\nIn: [[6,0,6,4,0,0,0],[6,6,0,4,8,0,8],[6,6,6,4,0,8,0]]\nOut: [[2,0,2],[2,2,2],[2,2,2]]\nIn: [[0,0,6,4,8,0,8],[0,6,0,4,0,8,0],[0,0,0,4,8,0,0]]\nOut: [[2,0,2],[0,2,0],[2,0,0]]\nApply the patterns from the above examples:\nIn: [[0,6,6,4,0,0,8],[0,6,0,4,8,8,8],[6,0,6,4,0,0,0]]\nOut: ", "result": " [[2,2,2],[2,2,2],[2,2,2]]\nIn: [[0,6,6,4,8,8,0],[0,6,0,4,8,0,0],[0,0,6,4,0,0,0]]\nOut:  [[2,2,2],[2,2,2],[2,2,2]]\nIn: [[0,6,6,4,8,0,8],[6,0,0,4,0,8,8],[0,6,0,4,0,8,0]]\nOut:  [[2,2,2],[2,2,2],[2,2,2]]\nIn: [[0,0,6,4,0,0,8],[0,0,0,4,8,0,0],[0,0,6,4,0,0,8]]\nOut:  [[2,2,0],[0,2,2],[2,2,2]]\nIn: [[0,0,6,4,8,0,0],[6,0,0,4,8,0,8],[0,6,0,4,0,0,0]]\nOut:  [[2,0,0],[0,2,2],[2,2,2]]\n\nA:\n\nIf all you'd like to keep is the pattern, then the following should work\n(defun example-recursive-pattern (i 0)\n  (mapcar (lambda (x) (conj (example-recursive-pattern (i i) x)\n                                             (conj (example-recursive-pattern (i i) x)\n                                                     (conj (example-recursive-pattern (i i)\n                                                                                   x)\n                                                                                   x))))))\n  (mapcar (lambda (x) (when (evenp i)\n                         (concat (cons (set! i (remain-from-here i)) x) (apply cons-to-list (concat x\n                                                                                           (remain-from-here i))))))\n                         (nreverse-list x)\n                         (car x)\n                         (cdr x))))\n\nThen this is a function that can be called to create a list out of all the possible forms of the recursive pattern\n(defun nested-recursive-pattern-list (nested-patterns)\n  (apply (apply (lambda (x)\n                 (nested-recursive-pattern-list (nested-patterns))\n                 (nested-recursive-pattern-list (nested-patterns)))))\n  (nested-recursive-pattern-list nil)\n  (nested-recursive-pattern-list (((recursive-pattern) (recursive-pattern)) (recursive-pattern))\n    (recursive-pattern)\n    recursive-pattern))))\n\nThis function is useful for recursive patterns where the first pattern is the same, and you want to keep the pattern in the resulting list\n(defun nested-recursive-pattern (patterns)\n  (mapcar (lambda (x) (recursive-pattern\n                            (nested-recursive-pattern-list\n                               (nested-pattern-list\n                                (nested-recursive-pattern-list\n                                 ((recursive-pattern)\n                                  (patterns)))))\n                            (nested-recursive-pattern-list\n                              (nested-pattern-list\n                               (nested-pattern-list\n                                (nested-recursive-pattern-list\n                                 (nested-pattern-list\n                                  (nested-recursive-pattern-list\n                                   ((recursive-pattern)\n       ", "exp_result": "Out: [[0,2,2],[2,2,2],[2,0,2]]"}, {"taskId": "d4b1c2b1.json", "prompt": "\nIn: [[1,1,1],[6,6,6],[6,1,6]]\nOut: [[1,1,1,1,1,1],[1,1,1,1,1,1],[6,6,6,6,6,6],[6,6,6,6,6,6],[6,6,1,1,6,6],[6,6,1,1,6,6]]\nIn: [[4,4,7],[8,7,7],[8,8,4]]\nOut: [[4,4,4,4,4,4,7,7,7],[4,4,4,4,4,4,7,7,7],[4,4,4,4,4,4,7,7,7],[8,8,8,7,7,7,7,7,7],[8,8,8,7,7,7,7,7,7],[8,8,8,7,7,7,7,7,7],[8,8,8,8,8,8,4,4,4],[8,8,8,8,8,8,4,4,4],[8,8,8,8,8,8,4,4,4]]\nIn: [[4,2,8],[2,2,5],[8,5,4]]\nOut: [[4,4,4,4,2,2,2,2,8,8,8,8],[4,4,4,4,2,2,2,2,8,8,8,8],[4,4,4,4,2,2,2,2,8,8,8,8],[4,4,4,4,2,2,2,2,8,8,8,8],[2,2,2,2,2,2,2,2,5,5,5,5],[2,2,2,2,2,2,2,2,5,5,5,5],[2,2,2,2,2,2,2,2,5,5,5,5],[2,2,2,2,2,2,2,2,5,5,5,5],[8,8,8,8,5,5,5,5,4,4,4,4],[8,8,8,8,5,5,5,5,4,4,4,4],[8,8,8,8,5,5,5,5,4,4,4,4],[8,8,8,8,5,5,5,5,4,4,4,4]]\nIn: [[8,8,8],[8,8,8],[8,8,8]]\nOut: [[8,8,8],[8,8,8],[8,8,8]]\nIn: [[3,3,3],[3,3,3],[3,3,3]]\nOut: [[3,3,3],[3,3,3],[3,3,3]]\nIn: [[3,6,6],[3,6,6],[3,3,3]]\nOut: [[3,3,6,6,6,6],[3,3,6,6,6,6],[3,3,6,6,6,6],[3,3,6,6,6,6],[3,3,3,3,3,3],[3,3,3,3,3,3]]\nIn: [[2,2,4],[4,4,4],[2,4,2]]\nOut: [[2,2,2,2,4,4],[2,2,2,2,4,4],[4,4,4,4,4,4],[4,4,4,4,4,4],[2,2,4,4,2,2],[2,2,4,4,2,2]]\nApply the patterns from the above examples:\nIn: [[7,1,7],[3,3,6],[8,8,6]]\nOut: ", "result": "\n[[3,3,6,6,6,6,6,6,6,6],[3,3,6,6,6,6,6,6,6],[3,3,6,6,6,6,6,6,6,6],[3,3,6,6,6,6,6,6,6,6,6]]\nIn: [[2,2,2],[2,2,2,2],[2,2,2,2,2]]\nOut: \n[[2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2]]\nIn: [[3,6,6],[3,6,6],[3,3,0],[3,3,0,2],[3,3,2,0],[3,3,4,0],[3,3,2,0,2],[3,3,4,0,2],[3,3,2,0,2]]\nOut: [[3,3,6,6,6,6,6,6,6,6,6,6],[3,3,6,6,6,6,6,6,6,6],[3,3,6,6,6,6,6,6,6,6,6],[3,3,6,6,6,6,6,6,6,6,6],[3,3,6,6,6,6,6,6,6,6,6],[3,3,6,6,6,6,6,6,6,6,6]]\nIn: [[8,8,8],[8,8,8],[8,8,8,8],[8,8,8,8],[8,8,8,8,8],[8,8,8,8,8],[8,8,8,8,8,8],[8,8,8,8,8,8],[8,8,8,8,8,8],[8,8,8,8,8,8],[8,8,8,8,8,8],[8,8,8,8,8,8]]\nOut: [[8,8,8,8],[8,8,8,8],[8,8,8,8]]\nIn: [[4,2,4],[2,2,6],[4,6,4],[2,4,2]]\nOut: [[4,4,4,4],[2,4,2,4],[4,2,4,2],[4,2,4,4],[2,2,4,4],[4,4,4,4,4,4,2,4,4]]\nIn: [[4,2,4],[2,2,6],[2,2,6],[4,6,4]]\nOut: [[4,4,4,4,4,4,4,4],[2,2,6,6],[2,2,6,6],[2,2,6,6],[4,6,4,4,4,4,4,4,4],[4,4,4,4,4,4,4,4,4,4],[2,2,6,6,6,6,6,6,6,6,6]]\nIn: [[3,3,3],[3,3,3],[3,3,3,3],[3,3,3,3],[3,3,3,3,3],[3,3,3,3,3,3],[3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3]]\nIn: [[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]]\nIn: [[4,2,4,4],[2,2,4,4],[4,4,4,4],[2,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\nOut: [[4,4,4,4,4,4,4,4,4,4,4], [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]]\nIn: [[10,10,10],[10,10,10],[10,10,10,10],[10,10,10,10,10],[10,10,10,10,10,10,10],[10,10,", "exp_result": "Out: [[7,7,7,7,7,1,1,1,1,1,7,7,7,7,7],[7,7,7,7,7,1,1,1,1,1,7,7,7,7,7],[7,7,7,7,7,1,1,1,1,1,7,7,7,7,7],[7,7,7,7,7,1,1,1,1,1,7,7,7,7,7],[7,7,7,7,7,1,1,1,1,1,7,7,7,7,7],[3,3,3,3,3,3,3,3,3,3,6,6,6,6,6],[3,3,3,3,3,3,3,3,3,3,6,6,6,6,6],[3,3,3,3,3,3,3,3,3,3,6,6,6,6,6],[3,3,3,3,3,3,3,3,3,3,6,6,6,6,6],[3,3,3,3,3,3,3,3,3,3,6,6,6,6,6],[8,8,8,8,8,8,8,8,8,8,6,6,6,6,6],[8,8,8,8,8,8,8,8,8,8,6,6,6,6,6],[8,8,8,8,8,8,8,8,8,8,6,6,6,6,6],[8,8,8,8,8,8,8,8,8,8,6,6,6,6,6],[8,8,8,8,8,8,8,8,8,8,6,6,6,6,6]]"}, {"taskId": "d19f7514.json", "prompt": "\nIn: [[0,3,3,3],[0,3,0,3],[0,0,0,0],[3,0,3,3],[3,0,0,0],[0,3,0,3],[0,5,0,5],[0,0,0,0],[0,0,0,0],[5,0,5,0],[5,0,0,0],[5,5,0,5]]\nOut: [[0,4,4,4],[0,4,0,4],[0,0,0,0],[4,0,4,4],[4,0,0,0],[4,4,0,4]]\nIn: [[3,3,0,3],[3,0,3,3],[0,3,0,0],[0,0,3,0],[3,0,3,0],[0,0,0,3],[5,0,0,0],[0,5,5,5],[5,0,0,5],[0,5,5,5],[5,5,5,0],[5,0,0,0]]\nOut: [[4,4,0,4],[4,4,4,4],[4,4,0,4],[0,4,4,4],[4,4,4,0],[4,0,0,4]]\nIn: [[3,3,0,0],[3,0,0,0],[0,0,0,3],[0,0,3,3],[3,0,0,0],[3,3,3,3],[0,5,0,0],[5,5,0,0],[5,0,5,0],[5,5,5,5],[5,5,5,0],[5,0,5,0]]\nOut: [[4,4,0,0],[4,4,0,0],[4,0,4,4],[4,4,4,4],[4,4,4,0],[4,4,4,4]]\nIn: [[3,3,0,0],[0,3,3,3],[3,3,0,3],[0,3,3,0],[3,0,3,0],[3,0,0,0],[0,5,5,5],[5,5,5,5],[5,5,5,0],[5,5,5,5],[5,0,0,0],[0,5,5,0]]\nOut: [[4,4,4,4],[4,4,4,4],[4,4,4,4],[4,4,4,4],[4,0,4,0],[4,4,4,0]]\nApply the patterns from the above examples:\nIn: [[3,3,0,3],[0,3,0,3],[0,0,0,3],[3,3,0,3],[3,0,3,3],[0,3,3,3],[0,0,0,0],[5,0,0,5],[0,0,5,0],[5,0,0,5],[5,5,5,5],[5,5,0,0]]\nOut: ", "result": " [[0,4,0,0],[0,4,4,4],[0,4,0,0],[0,0,0,4],[0,0,4,4],[0,0,0,0]]\nIn: [4,4,4,4]\nOut:  [[4,4,0,4]]\n\nAnd here's the code:\nfrom time import time\n\ndef f():\n    a=3\n    n=3\n    while a<=n:\n        a+=1\n        n=a    # repeat the same pattern\n        a=1\n\n    a=3\n    n=3\n    while a<=n:\n        a+=1\n        n=a   # repeat the same pattern\n        a=1\n\n    a=3\n    n=3\n    while a<=n:\n        a+=1\n        n=a   # repeat the same pattern\n        a=1\n\n    a=3\n    n=3\n    while a<=n:\n        a+=1\n        n=a    # repeat the same pattern\n        a=1\n\n    a=3\n    n=3\n    while a<=n:\n        a+=1  # repeat the same pattern\n        n=a    # repeat the same pattern\n        a=1\n\n    time_diff=time()-time()\n    print('Time difference: ',time_diff,'s')\n\nf()                     # calls the function\n\nAnd the output:\nTime difference: 0.0622s\nTime difference: 0.0364s\nTime difference: 0.0124s\nTime difference: 0.0092s\nTime difference: 0.0036s\nTime difference: 0.0176s\nTime difference: 0.0224s\nTime difference: 0.0084s\nTime difference: 0.0255s\nTime difference: 0.0066s\nTime difference: 0.0052s\nTime difference: 0.0033s\nTime difference: 0.0230s\nTime difference: 0.0251s\nTime difference: 0.0136s\nTime difference: 0.0064s\nTime difference: 0.0245s\nTime difference: 0.0063s\nTime difference: 0.0045s\nTime difference: 0.0239s\nTime difference: 0.0125s\nTime difference: 0.0208s\nTime difference: 0.0102s\nTime difference: 0.0148s\n\n", "exp_result": "Out: [[4,4,0,4],[4,4,0,4],[0,0,4,4],[4,4,0,4],[4,4,4,4],[4,4,4,4]]"}, {"taskId": "d017b73f.json", "prompt": "\nIn: [[0,2,0,0,0,0,0,0,0],[2,2,0,1,1,0,2,2,2],[0,0,0,0,1,0,0,0,0]]\nOut: [[0,2,1,1,0,0,0],[2,2,0,1,2,2,2],[0,0,0,0,0,0,0]]\nIn: [[0,0,0,3,3,0,0,1,0,2,2],[2,2,0,0,0,0,1,1,0,0,2],[0,2,0,0,0,0,0,0,0,0,0]]\nOut: [[0,0,0,0,0,0,0,0],[2,2,0,0,0,1,2,2],[0,2,3,3,1,1,0,2]]\nIn: [[0,0,0,0,0,0,8,0,0,0,0],[2,2,2,0,8,8,8,0,0,0,0],[0,0,2,0,0,0,0,0,6,6,6]]\nOut: [[0,0,0,0,0,0,0,0,0],[2,2,2,0,0,8,6,6,6],[0,0,2,8,8,8,0,0,0]]\nIn: [[0,1,1,0,0,0,0,0,2,2,0],[1,1,0,0,2,2,0,2,2,0,0],[0,0,0,0,0,2,0,0,0,0,0]]\nOut: [[0,1,1,2,2,0,2,2],[1,1,0,0,2,2,2,0],[0,0,0,0,0,0,0,0]]\nApply the patterns from the above examples:\nIn: [[0,2,0,1,1,0,0,3,0,5,5],[2,2,0,0,1,0,3,3,0,0,5],[0,0,0,0,1,0,0,0,0,0,0]]\nOut: ", "result": " [[0,2,0,0,1,0,0,3,3,0,5],[2,2,0,0,0,1,3,3,0,0,5],[0,0,0,0,0,0,0,0,0]]\n\n", "exp_result": "Out: [[0,2,1,1,0,0,0,0],[2,2,0,1,0,3,5,5],[0,0,0,1,3,3,0,5]]"}, {"taskId": "ccd554ac.json", "prompt": "\nIn: [[2,0,2],[0,2,0],[2,2,2]]\nOut: [[2,0,2,2,0,2,2,0,2],[0,2,0,0,2,0,0,2,0],[2,2,2,2,2,2,2,2,2],[2,0,2,2,0,2,2,0,2],[0,2,0,0,2,0,0,2,0],[2,2,2,2,2,2,2,2,2],[2,0,2,2,0,2,2,0,2],[0,2,0,0,2,0,0,2,0],[2,2,2,2,2,2,2,2,2]]\nApply the patterns from the above examples:\nIn: [[0,8,8,0,0],[8,8,8,8,8],[0,8,8,0,0],[8,8,8,8,8],[0,8,8,0,8]]\nOut: ", "result": " [[0,8,8,0,0,8,8,8,0,0],[0,8,8,0,8,8,8,8,0,8],[0,8,8,0,0,8,8,8,8,0],[0,8,8,0,8,8,8,8,8,0,8],[0,0,8,8,0,0,8,8,0,0],[8,8,8,0,8,8,8,8,8,0,8],[0,8,8,0,8,8,8,0,8,8],[0,0,8,8,0,8,8,8,0,0],[0,0,8,8,0,0,8,8,8,0,0],[0,8,8,8,8,8,8,8,8,8,0],[8,8,8,8,8,8,8,8,8,8,0]]\n\nEDIT\nAs mentioned in the question, there is a trick in general which allows you to avoid all these issues, see here for more details.\n\nA:\n\nI had some time to work on it but with little progress. \nHere is a working solution that uses only a very simple Python list comprehension. \nimport numpy\n\ndef find_pattern(lst, patterned):\n    patterned = list(numpy.where(array(lst) >= patterned))\n    patterned = list(numpy.where(array(lst) <= patterned.shift(-1)))\n\n    return numpy.array(\n        [numpy.where(lst >= patterned)\n         for lst in lst if numpy.all(patterned >= numpy.where(lst >= patterned))]\n    )\n\nIn: lst\nOut:\n[[0, 8, 8, 0, 0],[0, 8, 8, 0, 8]]\n\nIn: print(find_pattern(lst, array(5, 0)))\n[[0, 8, 8, 0, 0],\n [8, 8, 8, 8, 0],[0, 8, 8, 0, 8]]\n\nIn: print(find_pattern(lst, array(1, 3)))\n\n[[0],\n [8, 8],\n [0, 0, 0, 0, 0, 8, 8],\n [0, 8, 8, 0, 8],\n [8, 8, 8, 8, 0],\n [0, 0, 0, 0, 0, 8, 8],\n [0, 0, 0, 0, 0, 8, 0],\n [8, 8, 8, 8, 0],\n [0, 0, 0, 0, 0, 8, 8],\n [8, 0, 0, 8, 8, 0],\n [0, 0, 0, 0, 0, 0, 0]],\n\n", "exp_result": "Out: [[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8],[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8],[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8],[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8],[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8]]"}, {"taskId": "ccd554ac.json", "prompt": "\nIn: [[1,0],[1,1]]\nOut: [[1,0,1,0],[1,1,1,1],[1,0,1,0],[1,1,1,1]]\nApply the patterns from the above examples:\nIn: [[0,8,8,0,0],[8,8,8,8,8],[0,8,8,0,0],[8,8,8,8,8],[0,8,8,0,8]]\nOut: ", "result": "\n  - [ [ 0, 0, 0, 1, 0, 8, 8, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0 ],\n     [ 8, 8, 0, 0, 0, 8, 8, 0, 8, 0, 0, 8, 8, 0, 0, 0 ],\n     [ 0, 8, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 8, 8, 0, 0 ],\n     [ 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 8, 8, 0 ] ]\n\nAnd the function is...\nIn [13]: def add_n(s, n):\n    a = [(s, n) + (s, n+1) for s, n in zip(s, n+1) if s+n > 0]\n    return a\nprint add_n([0, 8, 8, 9, 0], 12)\nOut: [[0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0],\n  [8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [8, 0, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\n", "exp_result": "Out: [[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8],[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8],[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8],[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8],[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8,0,8,8,0,8]]"}, {"taskId": "ca8de6ea.json", "prompt": "\nIn: [[1,0,0,0,9],[0,5,0,8,0],[0,0,7,0,0],[0,8,0,5,0],[9,0,0,0,1]]\nOut: [[1,5,9],[8,7,8],[9,5,1]]\nIn: [[6,0,0,0,7],[0,2,0,4,0],[0,0,3,0,0],[0,4,0,2,0],[7,0,0,0,6]]\nOut: [[6,2,7],[4,3,4],[7,2,6]]\nIn: [[2,0,0,0,1],[0,3,0,6,0],[0,0,4,0,0],[0,6,0,3,0],[1,0,0,0,2]]\nOut: [[2,3,1],[6,4,6],[1,3,2]]\nApply the patterns from the above examples:\nIn: [[7,0,0,0,5],[0,6,0,4,0],[0,0,2,0,0],[0,4,0,6,0],[5,0,0,0,7]]\nOut: ", "result": " [[7,5,7],[0,4,6],[8,8,6]]\nIn: [[5,0,0,0,2],[0,1,0,5,0],[0,0,3,0,0],[0,5,0,2,0],[2,0,0,0,1]]\nOut: [[12,14,13],[2,6,1],[1,11,12]]\nIn: [[4,0,0,0,6],[0,1,0,3,0],[0,0,1,0,0],[0,3,0,6,0],[6,0,0,0,2]]\nOut: [[12,14,13],[2,4,6],[6,10,6]]\nIn: [[1,0,0,0,7],[0,1,0,3,0],[0,0,1,0,0],[0,6,0,6,0],[7,0,0,0,5]]\nOut: [[1,5,7],[0,4,6],[4,8,6]]\nIn: [[0,0,0,0,5],[0,1,0,3,0],[0,0,0,1,0],[0,6,0,6,0],[5,0,0,0,6]]\nOut: [[0,1,1],[0,0,0,0,0],[0,0,0,0,0]]\n\n", "exp_result": "Out: [[7,6,5],[4,2,4],[5,6,7]]"}, {"taskId": "c92b942c.json", "prompt": "\nIn: [[0,0,0],[0,6,0],[0,0,0]]\nOut: [[3,0,0,3,0,0,3,0,0],[1,6,1,1,6,1,1,6,1],[0,0,3,0,0,3,0,0,3],[3,0,0,3,0,0,3,0,0],[1,6,1,1,6,1,1,6,1],[0,0,3,0,0,3,0,0,3],[3,0,0,3,0,0,3,0,0],[1,6,1,1,6,1,1,6,1],[0,0,3,0,0,3,0,0,3]]\nIn: [[0,0,5,0],[0,0,0,0]]\nOut: [[1,1,5,1,1,1,5,1,1,1,5,1],[0,3,0,3,0,3,0,3,0,3,0,3],[1,1,5,1,1,1,5,1,1,1,5,1],[0,3,0,3,0,3,0,3,0,3,0,3],[1,1,5,1,1,1,5,1,1,1,5,1],[0,0,0,3,0,3,0,3,0,3,0,3]]\nIn: [[0,0,0,0,0,0],[0,0,4,0,0,0],[0,0,0,0,0,0],[4,0,0,0,4,0]]\nOut: [[0,3,0,0,0,0,0,3,0,0,0,0,0,3,0,0,0,0],[1,1,4,1,1,1,1,1,4,1,1,1,1,1,4,1,1,1],[0,0,0,3,0,3,0,0,0,3,0,3,0,0,0,3,0,0],[4,1,1,1,4,1,4,1,1,1,4,1,4,1,1,1,4,1],[0,3,0,0,0,3,0,3,0,0,0,3,0,3,0,0,0,3],[1,1,4,1,1,1,1,1,4,1,1,1,1,1,4,1,1,1],[0,0,0,3,0,3,0,0,0,3,0,3,0,0,0,3,0,0],[4,1,1,1,4,1,4,1,1,1,4,1,4,1,1,1,4,1],[0,3,0,0,0,3,0,3,0,0,0,3,0,3,0,0,0,3],[1,1,4,1,1,1,1,1,4,1,1,1,1,1,4,1,1,1],[0,0,0,3,0,3,0,0,0,3,0,3,0,0,0,3,0,0],[4,1,1,1,4,1,4,1,1,1,4,1,4,1,1,1,4,1]]\nIn: [[0,0,0,0,0],[0,0,0,0,0],[0,0,2,0,0],[0,0,0,0,0],[0,0,0,0,0]]\nOut: [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,3,0,0,0,0,3,0,0,0,0,3,0,0,0],[1,1,2,1,1,1,1,2,1,1,1,1,2,1,1],[0,0,0,3,0,0,0,0,3,0,0,0,0,3,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,3,0,0,0,0,3,0,0,0,0,3,0,0,0],[1,1,2,1,1,1,1,2,1,1,1,1,2,1,1],[0,0,0,3,0,0,0,0,3,0,0,0,0,3,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,3,0,0,0,0,3,0,0,0,0,3,0,0,0],[1,1,2,1,1,1,1,2,1,1,1,1,2,1,1],[0,0,0,3,0,0,0,0,3,0,0,0,0,3,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]\nApply the patterns from the above examples:\nIn: [[2,0,0],[0,0,0],[0,0,0]]\nOut: ", "result": "\n[11,2,1,11,2,1,11,2,1,11,2,1,11,2,1,11,2,1,11,2,1]\nIn: [[0,0,3],[0,0,0],[0,0,0,0],[0,0,0,0,0,3]]\nOut: \n[0,3,0,3,0,0,0,3,0,0,0,0,0,0,3,0,0,0,0,0]\nIn: [[0,0,0,0,0]\nOut: [[0,3,0,3,0,0,0,3,0,0,0,0,0,3,0,0,0,0,0,3],[0,3,0,3,0,0,0,3,0,0,0,0,3,0,0,0,0,3],[0,0,0,0,0,0,0,0,3,[]]]\nIn: [[0,0,0,0,0,0,0]\nOut: [[0,3,0,0,0,0,3,0,0,0,0,0,3,0,0,0,0,0,3],[0,3,0,0,0,0,3,0,0,0,0,3,0,0,0,0,3],[0,0,0,0,0,0,0,0,3,[]]],[0,3,0,0,0,3,0,0,0,0,3,0,0,0,3],[0,0,0,0,0,0,0,0,3,3,[]]]\nIn: [[0,0,0,0],[0,0,0,1,2]\nOut: [[0,0,0,3],[0,0,0,3],[0,0,0,0],[0,0,0,3,0,0,0,3,0,3,0,0,3,0,0,3],[0,0,0,3,0,0,3,0,0,3,0,3,0,0,3,0,0,3],[0,0,0,0,3,0,0,3,0,0,3,0,3,0,3],[0,0,0,3,0,0,3,0,0,3,0,3,0,3],[0,0,0,3,0,0,3,0,0,3,0,3,0,3],[0,0,0,3,0,0,3,0,0,3,0,3,0,3],[0,0,0,3,0,0,3,0,0,3,0,3", "exp_result": "Out: [[2,1,1,2,1,1,2,1,1],[0,3,0,0,3,0,0,3,0],[0,0,3,0,0,3,0,0,0],[2,1,1,2,1,1,2,1,1],[0,3,0,0,3,0,0,3,0],[0,0,3,0,0,3,0,0,0],[2,1,1,2,1,1,2,1,1],[0,3,0,0,3,0,0,3,0],[0,0,0,0,0,0,0,0,0]]"}, {"taskId": "c48954c1.json", "prompt": "\nIn: [[7,6,7],[2,7,6],[1,2,7]]\nOut: [[7,2,1,1,2,7,7,2,1],[6,7,2,2,7,6,6,7,2],[7,6,7,7,6,7,7,6,7],[7,6,7,7,6,7,7,6,7],[6,7,2,2,7,6,6,7,2],[7,2,1,1,2,7,7,2,1],[7,2,1,1,2,7,7,2,1],[6,7,2,2,7,6,6,7,2],[7,6,7,7,6,7,7,6,7]]\nIn: [[6,1,7],[1,6,7],[4,7,4]]\nOut: [[4,7,4,4,7,4,4,7,4],[7,6,1,1,6,7,7,6,1],[7,1,6,6,1,7,7,1,6],[7,1,6,6,1,7,7,1,6],[7,6,1,1,6,7,7,6,1],[4,7,4,4,7,4,4,7,4],[4,7,4,4,7,4,4,7,4],[7,6,1,1,6,7,7,6,1],[7,1,6,6,1,7,7,1,6]]\nIn: [[1,9,4],[9,1,6],[6,9,4]]\nOut: [[4,9,6,6,9,4,4,9,6],[6,1,9,9,1,6,6,1,9],[4,9,1,1,9,4,4,9,1],[4,9,1,1,9,4,4,9,1],[6,1,9,9,1,6,6,1,9],[4,9,6,6,9,4,4,9,6],[4,9,6,6,9,4,4,9,6],[6,1,9,9,1,6,6,1,9],[4,9,1,1,9,4,4,9,1]]\nApply the patterns from the above examples:\nIn: [[8,8,6],[6,3,6],[6,8,8]]\nOut: ", "result": "\nIn: [[8,2,8],[9,2,6],[6,2,9]\nOut: \nIn: [[6,3,8],[6,8,8],[6,6,10],[7,5,6],[8,9,8],[10,2,9],[9,2,3]]\nOut: [[6,3,8],[6,8,8],[6,8,10],[7,5,6]]\nIn: [[8,6,10],[10,7,6],[6,4,8]]\nOut: \nIn: [[8,2,8],[10,2,6],[8,3,8],[10,6,9],[9,6,4],[9,4,7],[6,3,8]]\nOut: [[6,2,9],[8,3,8],[10,6,9],[6,4,8],[10,7,6]]\n\nI believe this has helped.\n\n", "exp_result": "Out: [[8,8,6,6,8,8,8,8,6],[6,3,6,6,3,6,6,3,6],[6,8,8,8,8,6,6,8,8],[6,8,8,8,8,6,6,8,8],[6,3,6,6,3,6,6,3,6],[8,8,6,6,8,8,8,8,6],[8,8,6,6,8,8,8,8,6],[6,3,6,6,3,6,6,3,6],[6,8,8,8,8,6,6,8,8]]"}, {"taskId": "c1990cce.json", "prompt": "\nIn: [[0,0,0,0,0,0,2,0,0,0,0,0,0]]\nOut: [[0,0,0,0,0,0,2,0,0,0,0,0,0],[0,0,0,0,0,2,0,2,0,0,0,0,0],[0,0,0,0,2,0,0,0,2,0,0,0,0],[0,0,0,2,0,1,0,0,0,2,0,0,0],[0,0,2,0,0,0,1,0,0,0,2,0,0],[0,2,0,1,0,0,0,1,0,0,0,2,0],[2,0,0,0,1,0,0,0,1,0,0,0,2],[0,1,0,0,0,1,0,0,0,1,0,0,0],[0,0,1,0,0,0,1,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0,1,0],[1,0,0,0,1,0,0,0,1,0,0,0,1],[0,1,0,0,0,1,0,0,0,1,0,0,0],[0,0,1,0,0,0,1,0,0,0,1,0,0]]\nIn: [[0,0,2,0,0]]\nOut: [[0,0,2,0,0],[0,2,0,2,0],[2,0,0,0,2],[0,1,0,0,0],[0,0,1,0,0]]\nIn: [[0,0,0,2,0,0,0]]\nOut: [[0,0,0,2,0,0,0],[0,0,2,0,2,0,0],[0,2,0,0,0,2,0],[2,0,1,0,0,0,2],[0,0,0,1,0,0,0],[1,0,0,0,1,0,0],[0,1,0,0,0,1,0]]\nApply the patterns from the above examples:\nIn: [[0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0]]\nOut: ", "result": " [[0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0], [[0,0,0,2,0,0],[0,2,0,2,0],[2,0,0,0,2],[0,1,0,0,0],[0,0,1,0,0,0]]]\nIn: [[0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0]]\nOut:  [[0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0],[0,0,0,0,2,0,0,0,0],[0,2,0,0,0,0,2],[2,0,1,0,0,0,2],[0,0,0,1,0,0,0,2]]\n\nA:\n\nYour code works for any numpy array, but we can make it work for lists too.\nimport numpy as np\n\ndef f(x, dims):\n    return np.concatenate(\n        [\n            (x[i][0] - x[i][1])/dims[0] for i in x[:-1]],\n        axis=0,\n        dtype=[np.integer] * max(dims), \n        fill_value=x[:-1][dims[1]],\n        dtype=dtypes.int32,\n        count=len(x) - 1,\n    )\n\n", "exp_result": "Out: [[0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0],[0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0],[0,0,0,0,0,2,0,1,0,0,0,2,0,0,0,0,0],[0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0],[0,0,0,2,0,1,0,0,0,1,0,0,0,2,0,0,0],[0,0,2,0,0,0,1,0,0,0,1,0,0,0,2,0,0],[0,2,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0],[2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2],[0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0],[0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0],[1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1],[0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0],[0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0],[1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1]]"}, {"taskId": "be03b35f.json", "prompt": "\nIn: [[1,1,0,1,1],[1,0,0,0,1],[0,0,0,0,0],[0,1,0,2,2],[1,1,0,2,2]]\nOut: [[1,0],[1,1]]\nIn: [[1,0,0,1,1],[1,1,0,1,0],[0,0,0,0,0],[1,1,0,2,2],[0,1,0,2,2]]\nOut: [[0,1],[1,1]]\nIn: [[1,1,0,0,1],[0,0,0,0,1],[0,0,0,0,0],[0,0,0,2,2],[1,1,0,2,2]]\nOut: [[1,0],[1,0]]\nApply the patterns from the above examples:\nIn: [[1,1,0,0,1],[0,1,0,1,1],[0,0,0,0,0],[1,0,0,2,2],[1,1,0,2,2]]\nOut: ", "result": "\n[1,0,0,0,0,0,0,0,1,1]\nIn: [[1,0,0,0,1],[0,1,0,1,1],[0,0,0,0,0],[1,1,0,2,2],[0,1,0,2,2]]\nOut: \n[[0,1],[1,1]]\nIn: [[0,1,0,0,1],[0,0,0,0,0],[0,0,0,0,1],[1,1,0,2,2],[1,1,0,2,2]]\nOut: \n  [[0,1],[1,1]]\n\nand that's all.\n\n", "exp_result": "Out: [[1,1],[1,0]]"}, {"taskId": "bc4146bd.json", "prompt": "\nIn: [[2,2,2,2],[8,2,2,2],[2,2,8,2],[8,2,8,8]]\nOut: [[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[8,2,2,2,2,2,2,8,8,2,2,2,2,2,2,8,8,2,2,2],[2,2,8,2,2,8,2,2,2,2,8,2,2,8,2,2,2,2,8,2],[8,2,8,8,8,8,2,8,8,2,8,8,8,8,2,8,8,2,8,8]]\nIn: [[9,5,1,5],[1,5,9,1],[9,1,5,5],[5,5,5,1]]\nOut: [[9,5,1,5,5,1,5,9,9,5,1,5,5,1,5,9,9,5,1,5],[1,5,9,1,1,9,5,1,1,5,9,1,1,9,5,1,1,5,9,1],[9,1,5,5,5,5,1,9,9,1,5,5,5,5,1,9,9,1,5,5],[5,5,5,1,1,5,5,5,5,5,5,1,1,5,5,5,5,5,5,1]]\nIn: [[5,5,2,5],[2,3,3,2],[5,2,5,3],[3,5,3,2]]\nOut: [[5,5,2,5,5,2,5,5,5,5,2,5,5,2,5,5,5,5,2,5],[2,3,3,2,2,3,3,2,2,3,3,2,2,3,3,2,2,3,3,2],[5,2,5,3,3,5,2,5,5,2,5,3,3,5,2,5,5,2,5,3],[3,5,3,2,2,3,5,3,3,5,3,2,2,3,5,3,3,5,3,2]]\nIn: [[4,1,1,4],[7,7,4,7],[1,4,1,1],[4,1,1,1]]\nOut: [[4,1,1,4,4,1,1,4,4,1,1,4,4,1,1,4,4,1,1,4],[7,7,4,7,7,4,7,7,7,7,4,7,7,4,7,7,7,7,4,7],[1,4,1,1,1,1,4,1,1,4,1,1,1,1,4,1,1,4,1,1],[4,1,1,1,1,1,1,4,4,1,1,1,1,1,1,4,4,1,1,1]]\nApply the patterns from the above examples:\nIn: [[5,5,4,4],[5,5,5,2],[2,5,5,5],[5,5,2,4]]\nOut: ", "result": "\n    [[5,5,4,4],[5,5,5,2],[2,5,5,5],[5,5,2,4]]\n\nAnother way to do it, using the enumerate function, is first make a list of combinations, and then sort it:\n>>> it = itertools.zip_longest(5, [[5,5,4,4], [2,5,5,5], [7,7,4,7], [1,4,1,1]], sort='random')\n>>> sorted(it, key=lambda kv:kv[1])\n                                                 \n[(5, 5, 4, 4), (5, 5, 2, 4), (2, 5, 5, 5), (7, 7, 4, 7), (1, 4, 1, 1)]\n\n", "exp_result": "Out: [[5,5,4,4,4,4,5,5,5,5,4,4,4,4,5,5,5,5,4,4],[5,5,5,2,2,5,5,5,5,5,5,2,2,5,5,5,5,5,5,2],[2,5,5,5,5,5,5,2,2,5,5,5,5,5,5,2,2,5,5,5],[5,5,2,4,4,2,5,5,5,5,2,4,4,2,5,5,5,5,2,4]]"}, {"taskId": "bbb1b8b6.json", "prompt": "\nIn: [[0,0,0,1,5,2,2,2,0],[1,0,0,0,5,0,2,2,2],[1,1,0,0,5,0,0,2,2],[1,1,1,0,5,0,0,0,2]]\nOut: [[2,2,2,1],[1,2,2,2],[1,1,2,2],[1,1,1,2]]\nIn: [[0,0,0,1,5,2,2,0,0],[1,0,0,0,5,2,2,0,0],[1,1,0,0,5,0,2,2,0],[1,1,1,0,5,0,2,2,0]]\nOut: [[0,0,0,1],[1,0,0,0],[1,1,0,0],[1,1,1,0]]\nIn: [[1,1,0,0,5,0,0,3,3],[1,0,0,1,5,0,3,3,0],[1,0,0,1,5,0,3,3,0],[1,1,0,0,5,0,0,3,3]]\nOut: [[1,1,3,3],[1,3,3,1],[1,3,3,1],[1,1,3,3]]\nIn: [[1,1,1,1,5,0,0,0,0],[1,0,0,1,5,0,6,6,0],[1,0,0,1,5,0,6,6,0],[1,1,1,1,5,0,0,0,0]]\nOut: [[1,1,1,1],[1,6,6,1],[1,6,6,1],[1,1,1,1]]\nIn: [[1,1,1,1,5,2,2,0,0],[1,0,0,1,5,2,2,0,0],[1,0,0,1,5,0,0,0,0],[1,1,1,1,5,0,0,0,0]]\nOut: [[1,1,1,1],[1,0,0,1],[1,0,0,1],[1,1,1,1]]\nIn: [[1,1,1,1,5,3,3,0,0],[1,0,0,1,5,3,3,0,0],[1,0,0,1,5,3,0,0,0],[1,0,0,1,5,0,0,0,0]]\nOut: [[1,1,1,1],[1,0,0,1],[1,0,0,1],[1,0,0,1]]\nIn: [[1,1,1,1,5,0,0,0,0],[1,0,0,0,5,0,7,7,7],[1,0,1,1,5,0,7,0,0],[1,0,1,0,5,0,7,0,7]]\nOut: [[1,1,1,1],[1,7,7,7],[1,7,1,1],[1,7,1,7]]\nApply the patterns from the above examples:\nIn: [[1,1,0,0,5,0,0,3,3],[1,0,0,1,5,0,3,3,0],[0,0,0,1,5,3,3,3,0],[0,1,1,1,5,3,0,0,0]]\nOut: ", "result": "\n\nIn: [[1,1,1,1,5,0,0,0,0],[0,0,0,1,5,0,0,0,0],[1,0,0,1,5,0,0,0,0]]\nOut: \n\nIn: [[1,1,1,1,5,2,2,0,0],[1,0,0,1,5,2,2,0,0],[1,0,0,0,5,0,7,7,7],[1,0,0,1,5,0,7,0,0]]\nOut: \n\nIn: [[1,1,1,1,5,0,0,0,0],[0,0,0,0,5,0,2,2,0],[0,0,0,0,5,2,2,2,0]]\nOut: \n\n", "exp_result": "Out: [[1,1,3,3],[1,3,3,1],[3,3,3,1],[3,1,1,1]]"}, {"taskId": "b1fc8b8e.json", "prompt": "\nIn: [[0,0,0,8,0,0],[0,0,8,8,8,0],[0,8,0,8,8,0],[8,8,8,0,0,0],[0,8,8,0,0,0],[0,0,0,0,0,0]]\nOut: [[0,8,0,0,8],[8,8,0,8,8],[0,0,0,0,0],[0,8,0,0,8],[8,8,0,8,8]]\nIn: [[8,8,8,8,0,0],[8,8,8,8,8,8],[0,8,8,0,8,8],[0,8,8,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]\nOut: [[8,8,0,8,8],[8,8,0,8,8],[0,0,0,0,0],[8,8,0,8,8],[8,8,0,8,8]]\nIn: [[0,0,0,8,0,0],[0,8,8,8,8,0],[8,8,8,8,8,0],[0,8,8,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]\nOut: [[0,8,0,0,8],[8,8,0,8,8],[0,0,0,0,0],[0,8,0,0,8],[8,8,0,8,8]]\nIn: [[0,0,8,8,0,0],[8,8,8,8,0,0],[8,8,8,8,8,8],[0,0,8,8,8,8],[0,0,0,0,0,0],[0,0,0,0,0,0]]\nOut: [[8,8,0,8,8],[8,8,0,8,8],[0,0,0,0,0],[8,8,0,8,8],[8,8,0,8,8]]\nIn: [[0,0,0,8,0,0],[0,8,8,8,0,0],[8,8,8,0,8,0],[0,8,8,8,8,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]\nOut: [[0,8,0,0,8],[8,8,0,8,8],[0,0,0,0,0],[0,8,0,0,8],[8,8,0,8,8]]\nApply the patterns from the above examples:\nIn: [[0,0,8,8,0,0],[8,8,8,8,0,0],[8,8,0,8,8,0],[0,8,8,8,8,0],[0,8,8,0,0,0],[0,0,0,0,0,0]]\nOut: ", "result": "\n\nIn: [[0,0,0,8,0,0],[8,8,0,8,8,0],[8,8,0,8,8,8],[0,8,8,8,8,8],[0,8,8,0,8,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]\nOut: \n\nNow you just have to repeat the same for the second and the third row\n\n", "exp_result": "Out: [[8,8,0,8,8],[8,8,0,8,8],[0,0,0,0,0],[8,8,0,8,8],[8,8,0,8,8]]"}, {"taskId": "ae58858e.json", "prompt": "\nIn: [[0,0,0,0,0,0,0,0],[2,2,0,0,0,2,2,0],[0,2,2,0,0,2,2,0],[0,0,0,0,0,0,2,2],[0,0,0,0,0,0,0,0],[0,2,2,2,0,0,0,0],[0,0,0,0,0,2,0,0],[0,0,2,2,0,0,0,0],[2,0,2,2,0,0,2,2],[2,0,0,0,0,0,0,0]]\nOut: [[0,0,0,0,0,0,0,0],[6,6,0,0,0,6,6,0],[0,6,6,0,0,6,6,0],[0,0,0,0,0,0,6,6],[0,0,0,0,0,0,0,0],[0,2,2,2,0,0,0,0],[0,0,0,0,0,2,0,0],[0,0,6,6,0,0,0,0],[2,0,6,6,0,0,2,2],[2,0,0,0,0,0,0,0]]\nIn: [[0,0,0,0,0,0,0,0,0,0,0,0],[2,2,2,0,0,0,2,0,0,0,0,0],[0,2,2,0,0,0,2,2,0,0,0,0],[0,2,2,2,0,0,2,2,0,0,2,0],[0,0,0,0,0,0,0,0,0,0,2,0],[0,0,0,0,0,2,0,0,0,0,0,0],[0,2,0,0,2,2,0,0,0,2,2,2],[0,0,0,0,0,0,0,0,0,2,2,2],[0,0,2,0,0,0,0,2,0,0,2,0],[0,0,0,0,0,2,2,0,0,0,0,0]]\nOut: [[0,0,0,0,0,0,0,0,0,0,0,0],[6,6,6,0,0,0,6,0,0,0,0,0],[0,6,6,0,0,0,6,6,0,0,0,0],[0,6,6,6,0,0,6,6,0,0,2,0],[0,0,0,0,0,0,0,0,0,0,2,0],[0,0,0,0,0,2,0,0,0,0,0,0],[0,2,0,0,2,2,0,0,0,6,6,6],[0,0,0,0,0,0,0,0,0,6,6,6],[0,0,2,0,0,0,0,2,0,0,6,0],[0,0,0,0,0,2,2,0,0,0,0,0]]\nIn: [[2,2,0,0,0,2],[2,2,0,0,0,2],[0,0,0,2,0,0],[0,2,0,0,0,0],[0,0,0,2,0,2],[0,2,2,2,0,0]]\nOut: [[6,6,0,0,0,2],[6,6,0,0,0,2],[0,0,0,2,0,0],[0,2,0,0,0,0],[0,0,0,6,0,2],[0,6,6,6,0,0]]\nIn: [[0,0,0,0,0,0,0,0,0],[0,2,2,0,0,0,0,0,0],[0,0,2,0,0,0,2,2,0],[0,0,0,0,0,2,2,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,2,0,0,0,0,0],[0,2,2,0,0,0,0,0,0],[0,0,0,0,0,0,0,2,0],[0,0,0,0,0,0,0,2,0],[0,0,0,2,0,0,0,0,0]]\nOut: [[0,0,0,0,0,0,0,0,0],[0,2,2,0,0,0,0,0,0],[0,0,2,0,0,0,6,6,0],[0,0,0,0,0,6,6,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,2,0,0,0,0,0],[0,2,2,0,0,0,0,0,0],[0,0,0,0,0,0,0,2,0],[0,0,0,0,0,0,0,2,0],[0,0,0,2,0,0,0,0,0]]\nApply the patterns from the above examples:\nIn: [[0,0,0,0,2,2,2,0],[2,2,0,0,0,0,0,0],[0,2,2,0,0,2,2,0],[0,2,0,0,0,2,2,0],[0,0,0,0,0,0,0,0],[2,0,2,2,0,0,0,2]]\nOut: ", "result": " [[0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,0,0,0,2,2,0,0],[0,2,2,0,2,0,0,2]]\nOut: [[0,0,0,0,0,0,0,0,0,0,0,0,0],[6,6,0,0,0,6,6,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,2],[0,6,6,0,0,0,6,6,0],[0,0,6,0,0,0,0,6,6],[0,0,0,0,0,0,0,0,0,0]]\nIn: [[0,0,0,2,0,0,0,0,0],[0,2,2,2,0,0,0,2,0],[0,0,2,2,2,0,0,0,2],[0,0,0,0,0,0,2,0],[0,0,0,0,0,0,0,0,0],[0,2,2,2,0,0,0,0,2,0],[0,0,0,0,0,0,0,0,0,0],[0,2,2,2,0,0,0,0,2]]\nOut: [[0,0,0,0,0,0,0,0,0,0,0,0,0],[6,6,6,0,0,0,6,6,0,0],[0,0,0,6,0,0,0,6,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,2],[0,0,0,0,0,0,0,0,2,2],[0,0,2,2,0,0,0,0,0]]\nIn: [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]\nOut: [[0,0,0,0,0,0,0,0,0,2,0,0,0,2],[2,2,0,0,0,2,2,0,0,0]]\nIn: [[0,0,0,0,0,0,0,0,0,0,", "exp_result": "Out: [[0,0,0,0,2,2,2,0],[6,6,0,0,0,0,0,0],[0,6,6,0,0,6,6,0],[0,6,0,0,0,6,6,0],[0,0,0,0,0,0,0,0],[2,0,2,2,0,0,0,2]]"}, {"taskId": "ad7e01d0.json", "prompt": "\nIn: [[5,0,1],[5,2,0],[5,5,5]]\nOut: [[5,0,1,0,0,0,0,0,0],[5,2,0,0,0,0,0,0,0],[5,5,5,0,0,0,0,0,0],[5,0,1,0,0,0,0,0,0],[5,2,0,0,0,0,0,0,0],[5,5,5,0,0,0,0,0,0],[5,0,1,5,0,1,5,0,1],[5,2,0,5,2,0,5,2,0],[5,5,5,5,5,5,5,5,5]]\nApply the patterns from the above examples:\nIn: [[1,0,5,0,1],[0,2,2,2,0],[5,0,5,0,5],[0,2,2,2,0],[1,0,5,0,1]]\nOut: ", "result": "\n[[1,0,5,0,1,0,1],[0,1,0,1,0,0,3],[5,0,5,0,1,0,1]]\n\n", "exp_result": "Out: [[0,0,0,0,0,0,0,0,0,0,1,0,5,0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,5,0,5,0,5,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,5,0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,5,0,1,0,0,0,0,0,1,0,5,0,1,0,0,0,0,0,1,0,5,0,1],[0,2,2,2,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,2,2,2,0],[5,0,5,0,5,0,0,0,0,0,5,0,5,0,5,0,0,0,0,0,5,0,5,0,5],[0,2,2,2,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,2,2,2,0],[1,0,5,0,1,0,0,0,0,0,1,0,5,0,1,0,0,0,0,0,1,0,5,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,5,0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,5,0,5,0,5,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,5,0,1,0,0,0,0,0,0,0,0,0,0]]"}, {"taskId": "ad7e01d0.json", "prompt": "\nIn: [[2,5,1],[0,5,0],[2,5,1]]\nOut: [[0,0,0,2,5,1,0,0,0],[0,0,0,0,5,0,0,0,0],[0,0,0,2,5,1,0,0,0],[0,0,0,2,5,1,0,0,0],[0,0,0,0,5,0,0,0,0],[0,0,0,2,5,1,0,0,0],[0,0,0,2,5,1,0,0,0],[0,0,0,0,5,0,0,0,0],[0,0,0,2,5,1,0,0,0]]\nApply the patterns from the above examples:\nIn: [[1,0,5,0,1],[0,2,2,2,0],[5,0,5,0,5],[0,2,2,2,0],[1,0,5,0,1]]\nOut: ", "result": "\n      (((1) * (0) * (1) + (2) * (0) * (0)) * (2) * (0) + (1) * (2) * (5) * (1)) * (0.5)\n\n(I used the \"apply the pattern\" function in MATLAB, with the pattern you suggested, to get the above output. I think the \"apply the patterns\" function may work in Python, too.)\nIf you want a more precise answer, you could use the pattern to find the permutation associated with each element of the list.\n\n", "exp_result": "Out: [[0,0,0,0,0,0,0,0,0,0,1,0,5,0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,5,0,5,0,5,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,5,0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,5,0,1,0,0,0,0,0,1,0,5,0,1,0,0,0,0,0,1,0,5,0,1],[0,2,2,2,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,2,2,2,0],[5,0,5,0,5,0,0,0,0,0,5,0,5,0,5,0,0,0,0,0,5,0,5,0,5],[0,2,2,2,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,2,2,2,0],[1,0,5,0,1,0,0,0,0,0,1,0,5,0,1,0,0,0,0,0,1,0,5,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,5,0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,5,0,5,0,5,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,5,0,1,0,0,0,0,0,0,0,0,0,0]]"}, {"taskId": "aa18de87.json", "prompt": "\nIn: [[0,0,0,3,0,0,0,0],[0,0,3,0,3,0,0,0],[0,3,0,0,0,3,0,0],[3,0,0,0,0,0,3,0]]\nOut: [[0,0,0,3,0,0,0,0],[0,0,3,2,3,0,0,0],[0,3,2,2,2,3,0,0],[3,2,2,2,2,2,3,0]]\nIn: [[0,4,0,0,0,4,0,0],[0,0,4,0,4,0,0,0],[0,0,0,4,0,0,0,0]]\nOut: [[0,4,2,2,2,4,0,0],[0,0,4,2,4,0,0,0],[0,0,0,4,0,0,0,0]]\nIn: [[0,8,0,0,0,0,0,0,0,8,0,0],[8,0,8,0,0,0,0,0,8,0,8,0],[0,0,0,8,0,0,0,8,0,0,0,8],[0,0,0,0,8,0,8,0,0,0,0,0],[0,0,0,0,0,8,0,0,0,0,0,0]]\nOut: [[0,8,2,2,2,2,2,2,2,8,0,0],[8,2,8,2,2,2,2,2,8,2,8,0],[0,0,0,8,2,2,2,8,2,2,2,8],[0,0,0,0,8,2,8,0,0,0,0,0],[0,0,0,0,0,8,0,0,0,0,0,0]]\nIn: [[1,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,1],[0,0,1,0,0,0,1,0],[0,0,0,1,0,1,0,0],[0,0,0,0,1,0,0,0]]\nOut: [[1,0,0,0,0,0,0,0],[0,1,2,2,2,2,2,1],[0,0,1,2,2,2,1,0],[0,0,0,1,2,1,0,0],[0,0,0,0,1,0,0,0]]\nApply the patterns from the above examples:\nIn: [[0,0,6,0,0,0,0,0,6],[0,6,0,6,0,0,0,6,0],[6,0,0,0,6,0,6,0,0],[0,0,0,0,0,6,0,0,0]]\nOut: ", "result": "\n[[0,0,6,0,0,0,0,6],[0,6,0,6,0,0,0,6,0],[6,0,0,0,6,0,6,0,0],[0,0,0,0,0,6,0,6,0],[0,0,0,0,0,0,0,0]]\nIn: [[0,16,0,0,0,4,0,0,16],[8,0,8,0,0,4,0,0,8],[0,0,0,8,0,0,0,0,8]]\nOut: [[0,16,2,2,2,2,2,2,2,2,8,0],[8,2,8,2,2,2,2,2,8,2],[0,0,0,8,2,2,8,0,0,0,0],[0,0,0,0,8,0,8,0,0,0,0]]\nIn: [[1,0,2,0,0,0,0,0,0],[0,0,2,0,2,0,0,1,0],[1,0,0,1,0,0,1,0,0],[1,0,0,0,0,0,0,0,0]]\nOut: [[1,0,2,2,2,2,2,2,2,2,2,0],[2,2,8,2,2,2,2,2,2,2,0],[0,0,0,2,2,2,2,2,2,2,2]]\nIn: [[0,4,0,0,3,3,0,0,0,4],[0,0,3,0,3,3,0,0,0],[3,0,0,0,0,0,3,0,0]]\nOut: [[0,4,2,2,2,2,2,2,2,2,4],[2,2,8,2,2,2,2,2,2,2,4],[0,0,0,4,2,2,2,2,2,2,2]]\nIn: [[1,4,0,0,0,0,4,0,0,1],[0,0,3,0,0,0,4,0,1]]\nOut: [[1,4,2,2,2,2,2,0,0,4],[1,0,0,4,2,2,2,2,0,0]]\n", "exp_result": "Out: [[0,0,6,2,2,2,2,2,6],[0,6,2,6,2,2,2,6,0],[6,2,2,2,6,2,6,0,0],[0,0,0,0,0,6,0,0,0]]"}, {"taskId": "a8610ef7.json", "prompt": "\nIn: [[8,8,8,0,0,0],[0,0,8,8,0,8],[0,8,0,0,0,0],[8,8,0,0,8,8],[8,0,8,8,8,8],[0,0,0,0,8,8]]\nOut: [[5,5,5,0,0,0],[0,0,2,2,0,2],[0,2,0,0,0,0],[5,2,0,0,5,5],[5,0,2,2,5,2],[0,0,0,0,5,5]]\nIn: [[8,8,0,8,8,0],[8,0,8,8,8,0],[0,0,8,8,8,8],[0,8,0,0,8,8],[8,8,0,8,0,8],[8,0,0,8,0,8]]\nOut: [[2,5,0,2,5,0],[2,0,5,2,5,0],[0,0,5,5,2,2],[0,5,0,0,2,2],[2,5,0,2,0,5],[2,0,0,2,0,5]]\nIn: [[0,8,0,8,8,8],[8,8,8,8,8,0],[8,0,8,0,8,0],[0,8,8,8,0,8],[8,8,0,8,8,0],[8,8,0,0,0,8]]\nOut: [[0,2,0,5,5,2],[2,2,5,2,2,0],[5,0,2,0,5,0],[0,5,2,5,0,5],[2,2,0,2,2,0],[5,2,0,0,0,2]]\nIn: [[0,8,8,0,0,8],[8,8,8,0,0,0],[8,8,8,0,8,0],[8,0,8,8,0,8],[8,8,0,0,0,0],[8,8,8,8,8,0]]\nOut: [[0,5,2,0,0,5],[2,2,5,0,0,0],[2,5,2,0,5,0],[2,0,2,5,0,5],[2,2,0,0,0,0],[5,5,2,5,5,0]]\nApply the patterns from the above examples:\nIn: [[0,0,0,8,0,8],[8,8,8,0,8,8],[8,8,8,8,0,8],[8,0,0,0,8,8],[0,8,0,0,0,8],[8,8,8,0,8,8]]\nOut: ", "result": "\n     - [[0]]\n     - [[2]]\n     - [[0]]\n\nIn: [[0,8,8,0,0,8],[8,8,8,0,0,0],[8,8,8,0,8,0],[0,8,0,8,0,8],[8,8,0,8,0,8]]\nOut: \n     - [[0]]\n     - [[2]]\n     - [[0]]\n\nIn: [[0,2,5,0,0,2],[2,2,5,0,2,0],[0,5,0,2,0,5],[2,2,0,2,2,0],[0,0,0,2,0,2],[2,0,2,5,5,0]]\nOut: \n     - [[0]]\n     - [[2]]\n     - [[0]]\n\nIn: [[0,0,6,0,0,6],[6,0,6,0,0,6],[0,6,0,0,6,6],[0,0,6,0,0,6],[6,6,6,6,6,6]]\nOut: \n     - [[1]]\n     - [[1]]\n     - [[1]]\n\nIn: [[0,8,8,0,0,8],[8,8,8,0,0,0],[8,8,8,0,0,0],[0,8,0,8,0,8],[8,8,0,0,0,8]],[8,8,8,8,0,0],[8,8,8,0,8,0],[0,0,8,0,0,8]]\nOut: \n     - [[1]]\n     - [[1]]\n     - [[1]]\n\nIn: [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]\nOut: \nnOut: \n     - [[0]]\n     - [[2]]\n     - [[0]]\n\nIn: [[0,0,0,0,8,8],[0,0,0,0,8,8],[0,8,0,0,0,8],[0,8,8,0,8,0],[0,0,8,8,0,0],[0,8,8,0,0,0],[8,8,8,0,8,0],[0,0,0,8,8,8]]\nOut: \n     - [[0]]\n     - [[2]]\n     - [[0]]\n\nIn: [[7,7,7,0,0,0],[0,0,7,7,7,0],[0,7,0,0,7,0],[7,0,7,7,7,7],[0,7,0,0,0,7], [-,-,0,7,7,7,7,7,0,7,-,-,0,7,7,7,0,0,0,7,7,7,7,7,0,0,0,0,0,7,7,7,0,0,0,0,0,7,7,7,7],[0,0,0,7,0,0,7],[0,0,7,7,0,7,0],[0,0,0,0,0,0]]\nOut: \n     - [[0]]\n     - [[0]]\n     - [[1]]\n\nIn: [[0,0,8,0,0,8],[0,8,0,0,0,0],[0,0,0,8,0,0],[0,0,8,0,8,0", "exp_result": "Out: [[0,0,0,8,0,2],[8,2,8,0,8,2],[2,8,8,8,0,2],[2,0,0,0,8,2],[0,2,0,0,0,2],[8,8,8,0,8,2]]"}, {"taskId": "a59b95c0.json", "prompt": "\nIn: [[9,7,9],[9,6,7],[7,6,6]]\nOut: [[9,7,9,9,7,9,9,7,9],[9,6,7,9,6,7,9,6,7],[7,6,6,7,6,6,7,6,6],[9,7,9,9,7,9,9,7,9],[9,6,7,9,6,7,9,6,7],[7,6,6,7,6,6,7,6,6],[9,7,9,9,7,9,9,7,9],[9,6,7,9,6,7,9,6,7],[7,6,6,7,6,6,7,6,6]]\nIn: [[3,4,4],[3,3,3],[3,4,4]]\nOut: [[3,4,4,3,4,4],[3,3,3,3,3,3],[3,4,4,3,4,4],[3,4,4,3,4,4],[3,3,3,3,3,3],[3,4,4,3,4,4]]\nIn: [[8,2,1],[1,8,3],[2,1,3]]\nOut: [[8,2,1,8,2,1,8,2,1,8,2,1],[1,8,3,1,8,3,1,8,3,1,8,3],[2,1,3,2,1,3,2,1,3,2,1,3],[8,2,1,8,2,1,8,2,1,8,2,1],[1,8,3,1,8,3,1,8,3,1,8,3],[2,1,3,2,1,3,2,1,3,2,1,3],[8,2,1,8,2,1,8,2,1,8,2,1],[1,8,3,1,8,3,1,8,3,1,8,3],[2,1,3,2,1,3,2,1,3,2,1,3],[8,2,1,8,2,1,8,2,1,8,2,1],[1,8,3,1,8,3,1,8,3,1,8,3],[2,1,3,2,1,3,2,1,3,2,1,3]]\nIn: [[7,7,7],[7,2,2],[7,7,2]]\nOut: [[7,7,7,7,7,7],[7,2,2,7,2,2],[7,7,2,7,7,2],[7,7,7,7,7,7],[7,2,2,7,2,2],[7,7,2,7,7,2]]\nIn: [[2,3,2],[3,3,2],[2,2,1]]\nOut: [[2,3,2,2,3,2,2,3,2],[3,3,2,3,3,2,3,3,2],[2,2,1,2,2,1,2,2,1],[2,3,2,2,3,2,2,3,2],[3,3,2,3,3,2,3,3,2],[2,2,1,2,2,1,2,2,1],[2,3,2,2,3,2,2,3,2],[3,3,2,3,3,2,3,3,2],[2,2,1,2,2,1,2,2,1]]\nApply the patterns from the above examples:\nIn: [[4,3,2],[2,1,4],[3,1,2]]\nOut: ", "result": "\nIn: [[4,3,2,3],[2,1,4,2],[3,1,2,3]]\nOut: [[5,4,3,5],[2,1,4,2,4],[3,1,2,3,4]]\nIn: [[2,2,1,2],[2,2,1,2],[2,2,2,2]]\nOut: [[5,2,2,5,2,2,2,2,5,2,2,5],[1,2,2,2,2,2,2,2,2],[2,2,1,2,2,2,1,2,2,2],[2,2,1,2,2,1,2,2,2,2],[2,2,1,2,2,2,1,2,2,2],[2,2,1,2,2,2,1,2,2,2],[2,2,2,2,2,2,2,2,2,2,2],[2,2,1,2,2,2,1,2,2,2,2]]\nIn: [[1,1,1,1],[1,1,2,1],[1,1,2,1],[1,1,3,1],[1,1,2,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,2],[1,1,1,1,1,1,1,1,1,1,1,2],[1,2,2,1,1,1,1,1],[1,1,2,1,1,1,1,1,1]]\nOut: [[1,1,1,1,1],[1,1,2,1,1],[1,1,2,1,1],[1,1,3,1,1],[1,1,2,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1],[1,2,2,1,1,1,1,1,1]]\nIn: [[7,4,1],[1,7,1,7],[4,1,1]]\nOut: [[7,4,1,7,4,1],[1,7,1,7],[4,1,1,7]]\n\n", "exp_result": "Out: [[4,3,2,4,3,2,4,3,2,4,3,2],[2,1,4,2,1,4,2,1,4,2,1,4],[3,1,2,3,1,2,3,1,2,3,1,2],[4,3,2,4,3,2,4,3,2,4,3,2],[2,1,4,2,1,4,2,1,4,2,1,4],[3,1,2,3,1,2,3,1,2,3,1,2],[4,3,2,4,3,2,4,3,2,4,3,2],[2,1,4,2,1,4,2,1,4,2,1,4],[3,1,2,3,1,2,3,1,2,3,1,2],[4,3,2,4,3,2,4,3,2,4,3,2],[2,1,4,2,1,4,2,1,4,2,1,4],[3,1,2,3,1,2,3,1,2,3,1,2]]"}, {"taskId": "9110e3c5.json", "prompt": "\nIn: [[0,4,1,0,0,1,6],[0,0,1,0,0,0,0],[1,1,0,0,1,1,0],[0,1,0,0,0,1,1],[0,0,1,0,0,2,0],[1,0,1,0,1,0,7],[1,1,1,0,4,1,0]]\nOut: [[0,0,8],[8,8,0],[0,8,0]]\nIn: [[2,0,0,2,2,0,5],[0,2,2,0,0,0,2],[0,1,0,0,0,0,0],[0,0,0,0,2,0,9],[0,9,0,0,0,0,2],[0,0,2,1,0,0,8],[2,0,0,2,2,0,0]]\nOut: [[0,0,0],[8,8,8],[0,0,0]]\nIn: [[0,4,0,0,4,1,3],[3,3,4,3,0,3,7],[3,0,0,0,1,0,3],[0,0,3,0,3,0,0],[3,0,0,3,3,0,3],[3,0,3,0,3,0,3],[3,3,3,0,4,2,3]]\nOut: [[0,8,8],[0,8,0],[0,8,0]]\nIn: [[1,0,1,0,7,0,0],[1,1,9,1,0,1,0],[0,0,1,1,0,2,0],[0,0,0,0,3,0,1],[0,4,0,1,0,0,1],[0,0,1,0,2,0,8],[0,0,1,0,7,3,1]]\nOut: [[0,0,8],[8,8,0],[0,8,0]]\nIn: [[0,3,0,3,5,3,0],[0,0,3,3,0,0,0],[8,0,0,0,0,0,3],[3,4,3,9,3,0,3],[0,0,9,3,1,3,3],[0,3,3,3,0,3,0],[0,0,0,0,0,0,3]]\nOut: [[0,8,8],[0,8,0],[0,8,0]]\nIn: [[0,0,0,2,2,0,2],[0,2,2,9,2,2,0],[0,5,0,2,4,6,0],[2,0,0,0,0,9,2],[0,0,0,2,2,0,0],[8,0,2,9,0,6,3],[0,2,0,2,0,2,4]]\nOut: [[0,0,0],[8,8,8],[0,0,0]]\nIn: [[0,0,2,0,1,5,3],[0,0,2,9,0,2,0],[2,2,2,4,2,0,0],[0,2,0,2,7,2,0],[2,2,0,0,2,2,6],[0,2,2,0,2,0,0],[5,0,4,2,0,2,2]]\nOut: [[0,0,0],[8,8,8],[0,0,0]]\nApply the patterns from the above examples:\nIn: [[0,0,8,1,1,0,1],[5,1,1,0,1,1,0],[0,1,0,1,0,0,1],[1,0,2,0,0,6,0],[6,0,1,1,5,0,0],[0,0,3,0,0,0,5],[0,1,0,0,2,0,1]]\nOut: ", "result": " [[0,0,0,0,0,0,0],[0,0,0,0,0,2,3],[0,0,0,0,0,0,2],[0,1,0,0,0,0,0],[1,0,2,0,0,1,3],[0,5,1,0,0,5]]\nIn: [[0,0,0,2,2,0,5],[0,2,2,0,0,0,0],[0,0,2,0,2,0,0],[0,0,0,2,0,0,0],[2,0,3,0,0,4,1],[0,0,0,3,3,0,0]]\nOut: [[0,0,0,0,0,0,0],[0,0,0,0,2,0,0],[0,0,0,0,5,0,1],[0,0,1,0,0,0,0],[0,1,0,0,0,0,1],[0,2,0,2,0,1,3],[0,0,0,0,3,0,0]]\nIn: [[0,0,1,0,9,0,3],[0,0,0,0,0,0,0],[0,1,2,5,3,0,0],[0,0,0,0,0,0,2],[0,0,0,0,0,0,0],[0,3,0,0,0,0,2],[0,0,0,0,0,0,0]]\nOut: [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]\nIn: [[0,1,0,0,0,9,3],[0,0,0,0,0,0,0],[0,0,4,5,1,0,0],[0,0,0,0,0,0,0],[0,0,4,2,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]\nOut: [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]\n\nThis gives you a list of all lists of lists of lists, like you want.\n\n", "exp_result": "Out: [[0,0,8],[8,8,0],[0,8,0]]"}, {"taskId": "8e2edd66.json", "prompt": "\nIn: [[9,9,0],[0,0,9],[0,9,0]]\nOut: [[0,0,0,0,0,0,0,0,9],[0,0,0,0,0,0,9,9,0],[0,0,0,0,0,0,9,0,9],[0,0,9,0,0,9,0,0,0],[9,9,0,9,9,0,0,0,0],[9,0,9,9,0,9,0,0,0],[0,0,9,0,0,0,0,0,9],[9,9,0,0,0,0,9,9,0],[9,0,9,0,0,0,9,0,9]]\nIn: [[8,8,0],[0,8,8],[0,8,0]]\nOut: [[0,0,0,0,0,0,0,0,8],[0,0,0,0,0,0,8,0,0],[0,0,0,0,0,0,8,0,8],[0,0,8,0,0,0,0,0,0],[8,0,0,0,0,0,0,0,0],[8,0,8,0,0,0,0,0,0],[0,0,8,0,0,0,0,0,8],[8,0,0,0,0,0,8,0,0],[8,0,8,0,0,0,8,0,8]]\nIn: [[7,0,7],[7,7,7],[0,7,0]]\nOut: [[0,0,0,0,7,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,7,0,7,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,7,0,0,0,0,0,7,0],[0,0,0,0,0,0,0,0,0],[7,0,7,0,0,0,7,0,7]]\nApply the patterns from the above examples:\nIn: [[1,1,0],[0,1,0],[1,0,1]]\nOut: ", "result": "\n[0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1]\n\nIn: [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]\nOut: \n[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]  \n\n", "exp_result": "Out: [[0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,0,1],[0,0,0,0,0,0,0,1,0],[0,0,1,0,0,0,0,0,1],[1,0,1,0,0,0,1,0,1],[0,1,0,0,0,0,0,1,0],[0,0,0,0,0,1,0,0,0],[0,0,0,1,0,1,0,0,0],[0,0,0,0,1,0,0,0,0]]"}, {"taskId": "8ba14f53.json", "prompt": "\nIn: [[0,4,4,4,6,6,6,6,6],[0,4,0,4,6,0,0,0,6],[0,4,4,4,6,0,0,0,6],[0,0,0,0,6,6,6,6,6]]\nOut: [[4,0,0],[6,6,6],[6,6,6]]\nIn: [[7,7,7,0,0,0,0,0,0],[7,0,7,7,0,8,8,8,8],[7,0,0,7,0,8,0,0,8],[7,7,7,7,0,8,8,8,8]]\nOut: [[7,7,7],[8,8,0],[0,0,0]]\nIn: [[9,9,9,9,0,5,5,5,5],[9,0,0,9,0,5,0,0,5],[9,9,0,9,0,5,0,5,5],[0,9,9,9,0,5,5,5,0]]\nOut: [[9,9,9],[5,5,5],[0,0,0]]\nIn: [[3,3,3,3,0,1,1,1,0],[3,0,0,3,0,1,0,1,0],[3,0,0,3,0,1,0,1,0],[3,3,3,3,0,1,1,1,0]]\nOut: [[3,3,3],[3,0,0],[1,1,0]]\nIn: [[8,8,8,0,6,6,6,0,0],[8,0,8,0,6,0,6,0,0],[8,8,8,0,6,6,6,0,0],[0,0,0,0,0,0,0,0,0]]\nOut: [[8,0,0],[6,0,0],[0,0,0]]\nIn: [[7,7,7,0,8,8,8,0,0],[7,0,7,0,8,0,8,8,0],[7,0,7,0,8,0,0,8,0],[7,7,7,0,8,8,8,8,0]]\nOut: [[7,7,0],[8,8,8],[0,0,0]]\nApply the patterns from the above examples:\nIn: [[4,4,4,0,0,0,7,7,7],[4,0,4,4,4,0,7,0,7],[4,0,0,0,4,0,7,7,7],[4,4,4,4,4,0,0,0,0]]\nOut: ", "result": " [[4,0,4,4,4,7,0,0,0],[4,0,0,0,4,0,7,7,0],[4,4,4,4,4,0,7,0,0],[4,4,4,4,4,0,0,7]]\nIn: [[4,4,4,0,0,0,5,0,0,0],[0,0,4,0,0,4,0,0,5],[0,0,0,0,0,4,0,5,0],[0,0,4,0,0,4,0,0,5]]\nOut: [[0,0,0,0,0,4,0,0,0],[4,0,4,0,0,4,0,0,5],[4,0,4,4,0,0,4,0,0],[0,0,0,0,0,0,0,0]]\nIn: [[1,4,4,4,6,6,7,7,6],[1,0,4,4,6,6,7,0,7],[1,0,0,4,0,6,6,7,6],[1,4,4,4,4,6,0,7,6]]\nOut: [[1,0,0,0,4,0,6,6,7,6],[1,4,4,4,4,0,0,0,7],[1,4,4,4,0,0,0,0,7]]\nIn: [[2,2,2,5,5,5,5,0,0],[2,5,1,0,5,5,0,0,0],[2,2,2,5,5,5,0,0,0],[0,2,2,0,0,0,0,0,5]]\nOut: [[0,0,0,0,0,2,2,2,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,2,2,0,0],[0,0,0,0,0,0,0,0,0]]\nIn: [[5,5,5,5,0,5,1,1,1,0],[5,0,5,5,5,0,5,0,1],[5,5,5,5,0,5,0,5,0],[5,0,5,5,5,0,5,0,1]]\nOut: [[5,0,5,5],[5,1,0],[0,0,1]]\nIn: [[5,5,5,0,5,1,1,1,0],[5,0,5,5],[5,1,0,1]]\nOut: [[5,0,5,5],[5,1,0,1]]\nIn: [[7,7,7,0,8,8,8,0,0],[7,0,7,0,8,0,8,8,0],[7,7,7,0,8,8,8,8,0]]\nOut: [[7,0,7,0],[8,8,0],[0,0,0]]\n\n", "exp_result": "Out: [[4,4,4],[4,0,0],[7,0,0]]"}, {"taskId": "8b28cd80.json", "prompt": "\nIn: [[0,0,0],[0,4,0],[0,0,0]]\nOut: [[4,0,4,4,4,4,4,4,4],[4,0,4,0,0,0,0,0,4],[4,0,4,0,4,4,4,0,4],[4,0,4,0,4,0,4,0,4],[4,0,4,0,4,0,4,0,4],[4,0,4,0,0,0,4,0,4],[4,0,4,4,4,4,4,0,4],[4,0,0,0,0,0,0,0,4],[4,4,4,4,4,4,4,4,4]]\nIn: [[0,0,0],[5,0,0],[0,0,0]]\nOut: [[5,5,5,5,5,0,5,0,5],[0,0,0,0,5,0,5,0,5],[5,5,5,0,5,0,5,0,5],[5,0,5,0,5,0,5,0,5],[5,0,5,0,5,0,5,0,5],[0,0,5,0,5,0,5,0,5],[5,5,5,0,5,0,5,0,5],[0,0,0,0,5,0,5,0,5],[5,5,5,5,5,0,5,0,5]]\nIn: [[0,3,0],[0,0,0],[0,0,0]]\nOut: [[3,0,3,0,3,0,3,0,3],[3,0,3,0,0,0,3,0,3],[3,0,3,3,3,3,3,0,3],[3,0,0,0,0,0,0,0,3],[3,3,3,3,3,3,3,3,3],[0,0,0,0,0,0,0,0,0],[3,3,3,3,3,3,3,3,3],[0,0,0,0,0,0,0,0,0],[3,3,3,3,3,3,3,3,3]]\nIn: [[0,0,0],[0,0,8],[0,0,0]]\nOut: [[8,0,8,0,8,0,8,8,8],[8,0,8,0,8,0,8,0,0],[8,0,8,0,8,0,8,0,8],[8,0,8,0,8,0,8,0,8],[8,0,8,0,8,0,8,0,8],[8,0,8,0,8,0,8,0,0],[8,0,8,0,8,0,8,8,8],[8,0,8,0,8,0,0,0,0],[8,0,8,0,8,8,8,8,8]]\nIn: [[0,0,7],[0,0,0],[0,0,0]]\nOut: [[7,0,7,0,7,0,7,0,7],[7,0,7,0,7,0,7,0,0],[7,0,7,0,7,0,7,7,7],[7,0,7,0,7,0,0,0,0],[7,0,7,0,7,7,7,7,7],[7,0,7,0,0,0,0,0,0],[7,0,7,7,7,7,7,7,7],[7,0,0,0,0,0,0,0,0],[7,7,7,7,7,7,7,7,7]]\nApply the patterns from the above examples:\nIn: [[0,0,0],[0,0,0],[0,0,6]]\nOut: ", "result": "\n\nA:\n\nAnother alternative solution is to use some simple regular expression.\nYou can add another option in this code:\nOption Explicit On\n\nSub Test()\n    Dim c As Range, r As Range\n    Dim m As Match\n    Dim str As String\n\n    str = \"\"\"\"\"\"\"\"\"\n    str = str & \"|\" & c.Value\n    str = str & \"|\" & \"^\" & c.Value\n    With ThisWorkbook.Worksheets.Add\n        Set r =.Range(.Cells(1, 1),.Cells(.Rows.Count, 1).End(xlUp)).Cells(1,.Columns.Count)\n        For Each m In.Areas(\"A1\").UsedRange\n            If (m.Row = r.Row) Then\n                str = Replace(str, m.Value, c.Address(1, 0, 0))\n                Set c =.Cells(1,.Columns.Count + 1).End(xlUp)\n                Set r =.SpecialCells(xlFormulas, xlNumbers)\n                Set c =.Cells(1,.Columns.Count + 1).End(xlUp)\n            End If\n        Next m\n    End With\n    Debug.Print str\nEnd Sub\n\n", "exp_result": "Out: [[6,0,6,6,6,6,6,6,6],[6,0,6,0,0,0,0,0,0],[6,0,6,0,6,6,6,6,6],[6,0,6,0,6,0,0,0,0],[6,0,6,0,6,0,6,6,6],[6,0,6,0,6,0,6,0,0],[6,0,6,0,6,0,6,0,6],[6,0,6,0,6,0,6,0,6],[6,0,6,0,6,0,6,0,6]]"}, {"taskId": "8719f442.json", "prompt": "\nIn: [[0,5,0],[5,5,5],[0,5,0]]\nOut: [[0,0,0,0,0,0,0,5,0,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,5,0,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,5,0,5,5,5,5,5,5,5,5,5,0,5,0],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],[0,5,0,5,5,5,5,5,5,5,5,5,0,5,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,5,0,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,5,0,0,0,0,0,0,0]]\nIn: [[0,5,0],[5,5,0],[0,0,5]]\nOut: [[0,0,0,0,0,0,0,5,0,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,5,0,5,5,5,5,5,5,0,0,0,0,0,0],[5,5,0,5,5,5,5,5,5,0,0,0,0,0,0],[0,0,5,5,5,5,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,5,5,5,0,5,0],[0,0,0,0,0,0,0,0,0,5,5,5,5,5,0],[0,0,0,0,0,0,0,0,0,5,5,5,0,0,5],[0,0,0,0,0,0,0,0,0,0,5,0,0,0,0],[0,0,0,0,0,0,0,0,0,5,5,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,5,0,0,0]]\nIn: [[5,0,0],[0,5,0],[0,0,5]]\nOut: [[0,0,0,5,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,5,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0],[5,0,0,5,5,5,0,0,0,0,0,0,0,0,0],[0,5,0,5,5,5,0,0,0,0,0,0,0,0,0],[0,0,5,5,5,5,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,5,5,5,5,0,0],[0,0,0,0,0,0,0,0,0,5,5,5,0,5,0],[0,0,0,0,0,0,0,0,0,5,5,5,0,0,5],[0,0,0,0,0,0,0,0,0,5,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,5,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,5,0,0,0]]\nApply the patterns from the above examples:\nIn: [[0,5,0],[0,5,0],[5,0,5]]\nOut: ", "result": "\n[[0,0,0,5,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,5,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,5,0,0,0,0,0,0,0],[5,0,5,5,5,5,0,0,0,0,0,0,0,0],[0,0,5,5,5,5,0,0,0,0,0,0,0,0],[5,0,0,5,5,5,0,0,0,0,0,0,0,0],[5,0,0,5,5,5,0,0,0,0,0,0,0,0],[0,0,5,5,5,5,0,0,0,0,0,0,0,0],[0,0,0,5,5,5,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,5,5,0,0,0]],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[5,0,0,5,5,5,0,0,0,0,0,0,0,0],[0,0,5,5,5,5,0,0,0,0,0,0,0,0],[0,0,0,5,5,5,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0]]\n\nA:\n\nYou can do all your processing in one loop:\nfor i, arr in enumerate(your_list):\n    # Do all your processing here!\n\nYou could", "exp_result": "Out: [[0,0,0,0,0,0,0,5,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,5,0,0,0,0,0,0,0],[0,0,0,0,0,0,5,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],[0,5,0,5,5,5,0,0,0,5,5,5,0,5,0],[0,5,0,5,5,5,0,0,0,5,5,5,0,5,0],[5,0,5,5,5,5,0,0,0,5,5,5,5,0,5],[0,0,0,0,5,0,0,0,0,0,5,0,0,0,0],[0,0,0,0,5,0,0,0,0,0,5,0,0,0,0],[0,0,0,5,0,5,0,0,0,5,0,5,0,0,0]]"}, {"taskId": "7953d61e.json", "prompt": "\nIn: [[4,1,9,1],[1,9,1,4],[9,1,4,6],[4,1,6,6]]\nOut: [[4,1,9,1,1,4,6,6],[1,9,1,4,9,1,4,6],[9,1,4,6,1,9,1,1],[4,1,6,6,4,1,9,4],[6,6,1,4,4,9,1,4],[6,4,1,9,1,1,9,1],[4,1,9,1,6,4,1,9],[1,9,1,4,6,6,4,1]]\nIn: [[6,2,6,2],[6,6,5,5],[1,1,1,2],[5,1,2,1]]\nOut: [[6,2,6,2,2,5,2,1],[6,6,5,5,6,5,1,2],[1,1,1,2,2,6,1,1],[5,1,2,1,6,6,1,5],[1,2,1,5,5,1,6,6],[2,1,1,1,1,1,6,2],[5,5,6,6,2,1,5,6],[2,6,2,6,1,2,5,2]]\nIn: [[6,7,7,6],[7,1,6,6],[9,1,6,6],[9,1,6,1]]\nOut: [[6,7,7,6,6,6,6,1],[7,1,6,6,7,6,6,6],[9,1,6,6,7,1,1,1],[9,1,6,1,6,7,9,9],[1,6,1,9,9,9,7,6],[6,6,1,9,1,1,1,7],[6,6,1,7,6,6,6,7],[6,7,7,6,1,6,6,6]]\nIn: [[4,9,1,8],[8,4,1,8],[4,8,8,1],[1,1,1,8]]\nOut: [[4,9,1,8,8,8,1,8],[8,4,1,8,1,1,8,1],[4,8,8,1,9,4,8,1],[1,1,1,8,4,8,4,1],[8,1,1,1,1,4,8,4],[1,8,8,4,1,8,4,9],[8,1,4,8,1,8,1,1],[8,1,9,4,8,1,8,8]]\nIn: [[1,1,2,1],[6,6,7,6],[7,6,2,1],[1,6,2,6]]\nOut: [[1,1,2,1,1,6,1,6],[6,6,7,6,2,7,2,2],[7,6,2,1,1,6,6,6],[1,6,2,6,1,6,7,1],[6,2,6,1,1,7,6,1],[1,2,6,7,6,6,6,1],[6,7,6,6,2,2,7,2],[1,2,1,1,6,1,6,1]]\nApply the patterns from the above examples:\nIn: [[4,6,4,4],[4,6,4,4],[7,6,7,9],[9,4,9,7]]\nOut: ", "result": " [[4,6,4,4,4,4,7,6,4],[4,6,4,4,7,6,4,4],[7,6,7,9,2],[9,4,9,7,5,7,6,4],[5,7,6,6,2,9,9,7,2],[9,4,9,7,2,2,9,7,6],[2,7,6,7,2,7,6,2],[9,7,2,5,3,2,7,6],[4,4,1,6,4,9,7,4]]\nIn: [[1,2,1,2],[6,6,7,6],[6,6,2,2],[1,6,2,6],[7,6,2,2],[2,6,2,2],[1,2,6,1,2,1,6],[6,2,6,2,2,1,6],[1,2,6,7,6,7,2,2],[2,6,6,7,7,2,2,2],[1,6,6,2,2,2,7,6],[2,6,6,7,7,6,6,2]]\nOut: [[1,2,1,2,1,6,2,3],[6,6,7,6,6],[6,6,2,2,2,2,2,2,2],[7,6,2,2,2,2,2,2,2],[3,2,2,6,1,6,6,2,6],[6,2,6,6,6,6,2,1],[6,6,6,6,2,2,6,6,6],[1,2,2,6,1,1,2,2],[2,2,2,6,1,1,3,2,2],[2,6,6,6,6,6,2,2,2]]\n\nHowever, you'd be better served doing this with a list comprehension:\nIn: list(itertools.combinations(*samples))\nOut: [[i for i in range(max(samples[0])+1, min(samples[0])+1, 2)] for i in range(1, len(samples[0]))]\n\n... which is slightly faster than the nested generator expression above.\nThe generator expression is basically there so that you can do the following:\nIn:  [1,2,3,4]   # we get here\nOut:   [[1, 2, 3], [4, 1, 2], [3, 4, 2]]\n\nIn: [1,2,3,4,5,6,7,8,9]\nOut:  [[1,2,3,4],[5,6,7,9],[1,2,3,4,5,6,7,9]]\n\nNotice that in the second example the final result is [8, 1, 2] because the last element (9) can be accessed only once:\nIn: [8, 1, 2]\nOut:   [[8, 1, 2, 1, 8, 1, 2, 1]]\n\nA:\n\nUsing list comprehensions is definitely nicer, because you keep the iterators and you can access their output directly.\nIn [19]: [list(itertools.combinations(*list([i for i in s if i in list(s) if s[i]==list(i[0])])))) for i in range(len(samples) + 1, len(samples) + 2)]\nOut [4854, 1296, 1458, 1570, 1842, 2124, 2240, 2504, 2898, 3186, 3394, 3434, 4078, 4240, 4728]\n\nIn [20]: [list(itertools.combinations(*list([i for i in s if i in list(s) if s[i]==list(i[0])])))) for i in range(1, len(samples) + 2)]\nOut [4601, 1120, 1264, 1412, 1536, 1846, 2102, 2110, 2252, 2334, 2448, 2654, 2880, 3094, 3436, 3764, 4136, 4520]\n\nFor n!=1:\nIn [21]: [list(itertools.combinations(*list([i for i in s if i in list(s) if s[i]==list(i[0])])))) for i in range(n)]\nOut [17894, 2850, 3850, 4700, 5620, 6240, 6800, 7200, 7800, 8200, 9200, 10800, 11080, 12160, 12800, 13200, 13800, 13860, 14040, 14300, 14640]\n\nAnd for n!=8:\nIn [22]: [list(itertools.combinations(*list([i for i in s if i in list(s) if s[i", "exp_result": "Out: [[4,6,4,4,4,4,9,7],[4,6,4,4,4,4,7,9],[7,6,7,9,6,6,6,4],[9,4,9,7,4,4,7,9],[7,9,4,9,9,7,4,4],[9,7,6,7,4,6,6,6],[4,4,6,4,9,7,4,4],[4,4,6,4,7,9,4,4]]"}, {"taskId": "6ea4a07e.json", "prompt": "\nIn: [[8,0,0],[0,8,0],[0,0,0]]\nOut: [[0,2,2],[2,0,2],[2,2,2]]\nIn: [[0,0,3],[0,3,0],[3,0,0]]\nOut: [[1,1,0],[1,0,1],[0,1,1]]\nIn: [[5,0,0],[5,5,0],[5,0,0]]\nOut: [[0,4,4],[0,0,4],[0,4,4]]\nIn: [[5,5,5],[0,0,5],[0,0,0]]\nOut: [[0,0,0],[4,4,0],[4,4,4]]\nIn: [[0,8,0],[0,8,0],[8,0,0]]\nOut: [[2,0,2],[2,0,2],[0,2,2]]\nIn: [[8,0,8],[0,8,0],[0,8,0]]\nOut: [[0,2,0],[2,0,2],[2,0,2]]\nApply the patterns from the above examples:\nIn: [[3,0,0],[3,3,3],[0,0,3]]\nOut: ", "result": "  [[0,3,3],[3,3,3],[3,3,3]]\nIn: [[0,0,1],[0,1,0],[1,0,1]]\nOut:   [[0,0,1],[1,0,1],[1,0,1]]\nIn: [[0,0,1],[0,1,0],[1,0,1]]\nOut:   [[0,0,1],[1,0,1],[1,0,1]]\nIn: [[0,0,1],[0,1,0],[1,0,1]]\nOut:   [[0,0,1],[1,0,1],[1,0,1]]\nIn: [[0,0,1],[0,1,0],[1,0,1]]\nOut:   [[0,0,1],[1,0,1],[1,0,1]]\nIn: [[0,0,1],[0,1,0],[1,0,1]]\nOut:   [[0,0,1],[1,0,1],[1,0,1]]\nIn: [[0,0,1],[0,3,0],[3,0,0]]\nOut:   [[3,2,3],[3,0,3],[2,3,3]]\nIn: [[3,0,0],[0,3,3],[0,3,3]]\nOut:   [[0,3,3],[3,3,3],[3,3,3]]\nIn: [[2,0,0],[0,0,0],[3,0,0]]\nOut:   [[2,3,3],[0,3,3],[0,3,3]]\nApply the patterns from the above examples:\nIn: [[0,0,1],[0,1,0],[1,0,1]]\nOut:   [[0,0,1],[1,0,1],[1,0,1]]\nIn: [[0,0,1],[0,1,0],[1,0,1]]\nOut:   [[0,0,1],[1,0,1],[1,0,1]]\nIn: [[0,0,1],[0,1,0],[1,0,1]]\nOut:   [[0,0,1],[1,0,1],[1,0,1]]\nIn: [[0,0,1],[0,1,0],[1,0,1]]\nOut:   [[0,0,1],[1,0,1],[1,0,1]]\nIn: [[0,0,1],[0,1,0],[1,0,1]]\nOut:   [[0,0,1],[1,0,1],[1,0,1]]\nIn: [[0,0,1],[0,1,0],[1,0,1]]\nOut:   [[0,0,1],[1,0,1],[1,0,1]]\nIn: [[0,0,1],[0,1,0],[1,0,1]]\nOut:   [[0,0,1],[1,0,1],[1,0,1]]\nIn: [[0,0,1],[0,1,0],[1,0,1]]\nOut:   [[0,0,1],[1,0,1],[1,0,1]]\nIn: [[0,0,1],[0,1,0],[1,0,1]]\nOut:   [[0,0,1],[1,0,1],[1,0,1]]\nIn: [[0,0,1],[0,1,0],[1,0,1]]\nOut:   [[0,0,1],[1,0,1],[1,0,1]]\nIn: [[0,0,1],[0,3,0],[3,0,0]]\nOut:   [[0,3,3],[0,3,3],[0,3,3]]\nIn: [[0,0,0],[0,0,0],[0,0,0]]\nOut:   [[0,0,0],[0,0,0],[0,0,0]]\nApply the patterns from the above examples:\nIn: [[0,0,0],[0,0,0],[0,0,0]]\nOut:   [[0,0,0],[0,0,0],[0,0,0]]\nIn: [[0,0,0],[0,0,0],[1,0,0]]\nOut:   [[0,0,0],[0,0,0],[0,0,0]]\nIn: [[0,0,0],[0,0,0],[0,0,0]]\nOut:   [[0,0,0],[0,0,0],[0,0,0]]\nIn: [[0,0,0],[0,0,0],[0,0,0]]\nOut:   [[0,0,0],[0,0,0],[0,0,0]]\nIn: [[0,0,0],[0,0,0],[0,0,0]]\nOut:   [[0,0,0],[0,0,0],[0,0,0]]\nIn: [[0,0,0],[0,0,0],[0,0,0]]\nOut:   [[0,0,0],[0,0,0],[0,0,0]]\nIn: [[0,0,0],[0,0,0],[0,0,0]]\nOut:   [[0,0,0],[0,0,0],[0,0,0]]\nApply the patterns from the above examples:\nIn: [[0,0,0],[4,0,0],[0,0,0]]\nOut:   [[0,0,0],[0,4,0],[0,0,0]]\nIn: [[0,0,0],[1,0,4],[0,0,0]]\nOut:   [[0,0,0],[0,1,0],[0,0,0]]\nIn: [[0,0,0],[0,0,0],[0,0,0]]\nOut:   [[0,0,0],[0,0,0],[0,0,0]]\nIn: [[0,0,0],[0,0,0],[0,0,0]]\nOut:   [[0,0,0],[0,0,0],[0,0,0]]\nIn: [[0,0,0],[0,0,0],[0,0,0]]\nOut:   [[0,0,0],[0,0,0],[0,0,0]]\nIn: [[0,0,0],[0,0,0],[0,0,0]]\nOut:   [[0,0,0],[0,0,0],[0,0,0]]\nIn: [[0,0,0],[0,0,0],[0,0,0]]\nOut:   [[0,0,0],[0,0,0],[0,0,0]]\nIn: [[0,0,0],[0,0,0],[0,0,0]]\nOut:   [[0,0,0],[0,0,0],[0,0,0]]\n\nThis can also be done in a much more general form, if required:\nn = 3; vars = 1:n;\nfor idx = 1 : vars\n  r = (idx == vars), ((idx < vars) + (r!= 1));\n  res = r? res * vars : res;\n  vars = vars(1 + res) / res;\nend", "exp_result": "Out: [[0,1,1],[0,0,0],[1,1,0]]"}, {"taskId": "695367ec.json", "prompt": "\nIn: [[3,3,3],[3,3,3],[3,3,3]]\nOut: [[0,0,0,3,0,0,0,3,0,0,0,3,0,0,0],[0,0,0,3,0,0,0,3,0,0,0,3,0,0,0],[0,0,0,3,0,0,0,3,0,0,0,3,0,0,0],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],[0,0,0,3,0,0,0,3,0,0,0,3,0,0,0],[0,0,0,3,0,0,0,3,0,0,0,3,0,0,0],[0,0,0,3,0,0,0,3,0,0,0,3,0,0,0],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],[0,0,0,3,0,0,0,3,0,0,0,3,0,0,0],[0,0,0,3,0,0,0,3,0,0,0,3,0,0,0],[0,0,0,3,0,0,0,3,0,0,0,3,0,0,0],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],[0,0,0,3,0,0,0,3,0,0,0,3,0,0,0],[0,0,0,3,0,0,0,3,0,0,0,3,0,0,0],[0,0,0,3,0,0,0,3,0,0,0,3,0,0,0]]\nIn: [[8,8],[8,8]]\nOut: [[0,0,8,0,0,8,0,0,8,0,0,8,0,0,8],[0,0,8,0,0,8,0,0,8,0,0,8,0,0,8],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,0,8,0,0,8,0,0,8,0,0,8,0,0,8],[0,0,8,0,0,8,0,0,8,0,0,8,0,0,8],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,0,8,0,0,8,0,0,8,0,0,8,0,0,8],[0,0,8,0,0,8,0,0,8,0,0,8,0,0,8],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,0,8,0,0,8,0,0,8,0,0,8,0,0,8],[0,0,8,0,0,8,0,0,8,0,0,8,0,0,8],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[0,0,8,0,0,8,0,0,8,0,0,8,0,0,8],[0,0,8,0,0,8,0,0,8,0,0,8,0,0,8],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]\nIn: [[2,2,2,2],[2,2,2,2],[2,2,2,2],[2,2,2,2]]\nOut: [[0,0,0,0,2,0,0,0,0,2,0,0,0,0,2],[0,0,0,0,2,0,0,0,0,2,0,0,0,0,2],[0,0,0,0,2,0,0,0,0,2,0,0,0,0,2],[0,0,0,0,2,0,0,0,0,2,0,0,0,0,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[0,0,0,0,2,0,0,0,0,2,0,0,0,0,2],[0,0,0,0,2,0,0,0,0,2,0,0,0,0,2],[0,0,0,0,2,0,0,0,0,2,0,0,0,0,2],[0,0,0,0,2,0,0,0,0,2,0,0,0,0,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[0,0,0,0,2,0,0,0,0,2,0,0,0,0,2],[0,0,0,0,2,0,0,0,0,2,0,0,0,0,2],[0,0,0,0,2,0,0,0,0,2,0,0,0,0,2],[0,0,0,0,2,0,0,0,0,2,0,0,0,0,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]]\nApply the patterns from the above examples:\nIn: [[4,4,4,4,4],[4,4,4,4,4],[4,4,4,4,4],[4,4,4,4,4],[4,4,4,4,4]]\nOut: ", "result": " [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,", "exp_result": "Out: [[0,0,0,0,0,4,0,0,0,0,0,4,0,0,0],[0,0,0,0,0,4,0,0,0,0,0,4,0,0,0],[0,0,0,0,0,4,0,0,0,0,0,4,0,0,0],[0,0,0,0,0,4,0,0,0,0,0,4,0,0,0],[0,0,0,0,0,4,0,0,0,0,0,4,0,0,0],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[0,0,0,0,0,4,0,0,0,0,0,4,0,0,0],[0,0,0,0,0,4,0,0,0,0,0,4,0,0,0],[0,0,0,0,0,4,0,0,0,0,0,4,0,0,0],[0,0,0,0,0,4,0,0,0,0,0,4,0,0,0],[0,0,0,0,0,4,0,0,0,0,0,4,0,0,0],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[0,0,0,0,0,4,0,0,0,0,0,4,0,0,0],[0,0,0,0,0,4,0,0,0,0,0,4,0,0,0],[0,0,0,0,0,4,0,0,0,0,0,4,0,0,0]]"}, {"taskId": "68b67ca3.json", "prompt": "\nIn: [[2,0,2,0,1,0],[0,0,0,0,0,0],[2,0,1,0,0,0],[0,0,0,0,0,0],[3,0,0,0,0,0],[0,0,0,0,0,0]]\nOut: [[2,2,1],[2,1,0],[3,0,0]]\nIn: [[3,0,0,0,2,0],[0,0,0,0,0,0],[8,0,0,0,8,0],[0,0,0,0,0,0],[0,0,1,0,0,0],[0,0,0,0,0,0]]\nOut: [[3,0,2],[8,0,8],[0,1,0]]\nIn: [[1,0,0,0,0,0],[0,0,0,0,0,0],[0,0,2,0,0,0],[0,0,0,0,0,0],[6,0,0,0,6,0],[0,0,0,0,0,0]]\nOut: [[1,0,0],[0,2,0],[6,0,6]]\nApply the patterns from the above examples:\nIn: [[3,0,3,0,4,0],[0,0,0,0,0,0],[7,0,0,0,1,0],[0,0,0,0,0,0],[7,0,0,0,1,0],[0,0,0,0,0,0]]\nOut: ", "result": "\n\nIn: [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,1,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]\nOut: [[0,0,1],[0,0,0],[0,0,0]]\nIn: [[0,0,0,0,0,0],[1,0,1],[0,0,0]]\nOut: [[0,0,0,0,0,0],[0,0,1],[1,0,1]]\n\nIn general, the first case of Pattern A works like a pattern which would be applied to the right-hand-side of the equation in the first argument:\n\nPattern A\nApply the pattern:\n\nPattern A\nApply the pattern:\n\nPattern A\nApply the pattern to the left-hand-side of the equation:\n\nPattern A\nApply the pattern:\n\nPattern A\nApply the pattern to the right-hand-side of the equation:\n\n", "exp_result": "Out: [[3,3,4],[7,0,1],[7,0,1]]"}, {"taskId": "66e6c45b.json", "prompt": "\nIn: [[0,0,0,0],[0,3,4,0],[0,7,6,0],[0,0,0,0]]\nOut: [[3,0,0,4],[0,0,0,0],[0,0,0,0],[7,0,0,6]]\nIn: [[0,0,0,0],[0,5,6,0],[0,8,3,0],[0,0,0,0]]\nOut: [[5,0,0,6],[0,0,0,0],[0,0,0,0],[8,0,0,3]]\nApply the patterns from the above examples:\nIn: [[0,0,0,0],[0,2,3,0],[0,4,9,0],[0,0,0,0]]\nOut: ", "result": " [[4,0,0,2],[0,0,0,0],[0,0,0,0],[2,0,0,4]]\nIn: [[0,0,0,0],[0,3,4,0],[0,1,6,0],[0,0,0,0]]\nOut:  [[3,0,0,4],[0,0,0,0],[0,0,0,0],[1,0,0,6]]\n\nIn Python you can use map to do this:\ndef f(a, b):\n    l = []\n    for x in a[::-1]:\n        l.append(b[x])\n    return l\n\nf(\"10+10\", \"10\")\n\nOutput:\nIn: [[1,0,0,0],[0,0,0,0],[0,4,4,0],[0,2,6,0],[0,0,0,0]]\nOut:  [4,0,0,2],[0,0,0,0],[0,0,0,0],[2,0,0,4]\n\n", "exp_result": "Out: [[2,0,0,3],[0,0,0,0],[0,0,0,0],[4,0,0,9]]"}, {"taskId": "626c0bcc.json", "prompt": "\nIn: [[0,0,8,8,0,0,0],[8,8,8,8,8,0,0],[0,8,8,0,8,8,0],[0,8,8,8,8,0,0],[0,0,0,8,8,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]\nOut: [[0,0,1,1,0,0,0],[3,3,1,1,4,0,0],[0,3,2,0,4,4,0],[0,2,2,1,1,0,0],[0,0,0,1,1,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]\nIn: [[0,8,0,0,8,0,0],[8,8,0,0,8,8,0],[0,8,8,0,8,8,0],[0,8,8,0,8,8,0],[0,0,8,8,0,0,0],[0,0,0,8,0,0,0],[0,0,0,0,0,0,0]]\nOut: [[0,2,0,0,4,0,0],[2,2,0,0,4,4,0],[0,1,1,0,1,1,0],[0,1,1,0,1,1,0],[0,0,3,3,0,0,0],[0,0,0,3,0,0,0],[0,0,0,0,0,0,0]]\nIn: [[8,8,8,0,0,0,0],[8,8,8,8,0,0,0],[8,8,0,8,0,0,0],[0,8,8,8,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]\nOut: [[1,1,4,0,0,0,0],[1,1,4,4,0,0,0],[3,3,0,2,0,0,0],[0,3,2,2,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]\nApply the patterns from the above examples:\nIn: [[0,8,8,0,8,8,0],[8,8,8,8,8,8,0],[0,8,8,0,8,0,0],[0,0,8,8,8,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]\nOut: ", "result": " [[0,2,2,2,0,0,0],[0,1,1,1,0,0,0],[0,3,3,0,0,0,0],[0,2,2,1,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]\nIn: '[[0,0,0,1,1,0,0],[0,0,0,1,1,0,0],[0,0,0,0,0,0,0],[0,0,1,1,1,0,0],[0,0,0,0,0,0,0]]'\nOut:  [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]\nIn: '[[8,8,8,0,0,0,0],[0,8,8,0,0,0,0]]'\nOut:  [[0,0,0,0,0,0,0]]\n\nYou can also put your patterns in a generator function:\ndef get_patterns(f):\n    return [f(x) for x in range(len(x))]\n\nIn: [[0,8,8,3,3,0,0],[8,8,8,3,3,3,0],[0,8,8,0,0,0,0]]\nOut:  [[0,0,8,8,0,0,0],[0,0,8,8,0,0,0],[0,0,0,8,0,0,0]]\nIn: '[[1,1,0,0,0,0],[2,3,0,0,0,0,0],[2,0,0,0,0,0,0],[1,2,0,0,0,0,0],[0,2,0,0,0,0,0],[0,0,8,3,0,0,0],[0,0,0,0,0,0,0]]'\nOut:  [[0,2,2,2,0,0,0],[0,1,1,1,0,0,0],[0,0,3,3,0,0,0],[0,0,0,3,0,0,0],[0,0,0,0,0,0,0]]\nIn: '[[0,8,8,8,0,0,0,0],[0,8,8,0,0,0,0],[0,0,8,0,8,0,0]]'\nOut:  [[0,0,0,0,0,0,0]]\nIn: '[[8,8,8,0,0,0,0],[8,8,8,0,0,0,0]]'\nOut:  [[0,0,0,0,0,0,0]]\n\nHere's an implementation in python 3.7 with some tweaks to work with different lengths.\n\nA:\n\nI think this produces what you expected.\nimport itertools\ndef generate_patterns(patterns, lengths):\n    x = list(map(lambda x: x[0]-x[1], (0, len(patterns), len(patterns)))\n    for pattern in patterns, lengths)\n    yield [x[-1].ljust(length=x[1]-x[0], fill=0) for x in x]\ngenerate_patterns(generate_patterns(generate_patterns(generate_patterns(f.splitlines(), 3))))\n\nFor me, it produces this, as generated:\nIn: [[0, 0, 1, 0, 0, 0],[1, 0, 0, 0, 0],[0, 0, 0, 0, 0]]\nOut: [[0, 1, 0, 0, 0, 0], [[1], [0], [0]], [[0]], [[0]]]\n\nI thought the output was right, but it looks like list(map(lambda x: x[0]-x[1], (0, len(patterns), len(patterns))) for pattern in patterns, lengths) produces the same list of three-item tuples, so I think that's what you thought too.\nI was expecting the generator pattern[-1].ljust(length=x[1]-x[0], fill=0) to work on two-dimensional arrays, but I guess it is not.\n\n", "exp_result": "Out: [[0,2,4,0,1,1,0],[2,2,4,4,1,1,0],[0,3,3,0,2,0,0],[0,0,3,2,2,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]"}, {"taskId": "60c09cac.json", "prompt": "\nIn: [[0,3,0],[0,7,7],[0,0,0]]\nOut: [[0,0,3,3,0,0],[0,0,3,3,0,0],[0,0,7,7,7,7],[0,0,7,7,7,7],[0,0,0,0,0,0],[0,0,0,0,0,0]]\nIn: [[0,0,8,0],[0,8,5,5],[0,0,0,5],[0,0,0,0]]\nOut: [[0,0,0,0,8,8,0,0],[0,0,0,0,8,8,0,0],[0,0,8,8,5,5,5,5],[0,0,8,8,5,5,5,5],[0,0,0,0,0,0,5,5],[0,0,0,0,0,0,5,5],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]]\nApply the patterns from the above examples:\nIn: [[0,0,1,0,0],[0,0,1,0,0],[0,6,6,6,0],[0,0,1,6,0],[0,0,0,0,0]]\nOut: ", "result": "\n\nIn: [[0,3,3,3,0,0],[0,0,3,3,0,0],[0,0,3,3,0,0],[0,0,0,0,0,0],[0,0,0,0,0]]\nOut: [[0,0,3,3,0,0],[0,0,3,3,0,0],[0,0,3,3,0,0],[0,0,0,0,0,0],[0,0,0,3,0,0],[0,0,0,0,0,0]]\n\nHere, we used the \"pattern\" of the matrix-columns to replace the \"columns\" with \"0\"s.\n\n", "exp_result": "Out: [[0,0,0,0,1,1,0,0,0,0],[0,0,0,0,1,1,0,0,0,0],[0,0,0,0,1,1,0,0,0,0],[0,0,0,0,1,1,0,0,0,0],[0,0,6,6,6,6,6,6,0,0],[0,0,6,6,6,6,6,6,0,0],[0,0,0,0,1,1,6,6,0,0],[0,0,0,0,1,1,6,6,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]"}, {"taskId": "5b6cbef5.json", "prompt": "\nIn: [[2,0,0,2],[2,2,2,2],[2,0,0,2],[0,2,0,2]]\nOut: [[2,0,0,2,0,0,0,0,0,0,0,0,2,0,0,2],[2,2,2,2,0,0,0,0,0,0,0,0,2,2,2,2],[2,0,0,2,0,0,0,0,0,0,0,0,2,0,0,2],[0,2,0,2,0,0,0,0,0,0,0,0,0,2,0,2],[2,0,0,2,2,0,0,2,2,0,0,2,2,0,0,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,0,0,2,2,0,0,2,2,0,0,2,2,0,0,2],[0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2],[2,0,0,2,0,0,0,0,0,0,0,0,2,0,0,2],[2,2,2,2,0,0,0,0,0,0,0,0,2,2,2,2],[2,0,0,2,0,0,0,0,0,0,0,0,2,0,0,2],[0,2,0,2,0,0,0,0,0,0,0,0,0,2,0,2],[0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,2],[0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2],[0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,2],[0,0,0,0,0,2,0,2,0,0,0,0,0,2,0,2]]\nApply the patterns from the above examples:\nIn: [[0,2,0,2],[2,2,0,2],[2,2,0,0],[0,0,0,2]]\nOut: ", "result": "\n[[0,2,0,2,0,0,0,0,0,2,0,0,2],[2,2,0,2,0,0,0,0,2,0,0,2,0,0,2],[0,0,0,2,0,0,0,0,0,0,0,0,2,0,2],[0,0,0,2,0,0,0,0,0,0,0,0,2,0,2],[0,2,0,2,0,0,0,0,0,0,0,0,0,2,0,2],[0,0,0,0,2,0,0,2,0,0,0,0,2,0,2],[0,0,0,0,0,2,0,2,0,0,0,0,2,0,2]]\nIn: [[2,2,0,2],[2,0,2,2],[2,2,0,0],[2,0,0,0],[0,0,0,2]]\nOut: \n[[2,2,0,2,0,0,2,0,0,0,2,0,0,2],\n [2,2,0,2,0,0,2,2,0,0,2,0,2],[2,0,2,2,0,0,2,0,0,0,2,0,0,2],[2,0,0,0,0,2,0,2,0,0,0,0,0,0,0,2],[0,2,0,0,2,0,2,0,0,0,0,0,0,0,2],[0,0,2,0,0,0,0,0,0,0,0,0,2,0,2],[0,0,0,0,0,0,0,2,0,0,0,0,2,0,2]]\nIn: [[0,0,0,0,0],[2,2,0,0,0],[0,2,2,0,0],[0,0,0,0,0]]\nOut: [[2,2,0,2,0,0,2,0,0,0,2,0,0,2],[2,0,0,2,0,0,2,0,0,2,2,0,0,2],[0,0,0,0,0,0,0,0,2,0,0,0,2],[0,0,0,0,0,0,2,0,2,0,0,0,0,2],[0,0,0,0,0,0,0,0,0,0,0,0,2,0,2]]\nIn: [[0,2,0,2],[2,2,0,2],[2,2,0,0],[0,2,0,0],[0,0,0,2],[0,0,0,0],[0,0,0,0]]\nOut: [[2,2,0,2,0,0,2,0,0,0,2,0,0,2],[2,0,2,2,0,0,2,0,0,2,2,0,0,2],[0,0,2,0,0,0,0,0,0,0,2,0,0,2],[0,0,0,2,0,0,0,0,0,0,0,2,0,2],[0,0,0,0,0,0,0,2,0,2,0,0,2]]\nIn: [[2,2,0,2],[2,0,2,2],[2,2,0,0],[2,0,0,0],[0,2,0,0],[0,0,0,0],[0,0,0,0]]\nOut: [[2,2,0,2,0,0,2,0,0,0,2,0,0,2],[2,0,0,2,0,0,2,0,0,2,2,0,2],[0,0,0,0,2,0,0,0,2,0,2,0,2],[0,0,0,0,0,2,0,0,2,0,2,0,2],[0,0,0,0,0,0,0,0,0,0,0,0,2],[0,0,0,0,0,0,0,0,0,0,0,0,2]]\nIn: [[2,2,0,2],[2,0,2,2],[2,2,0,0],[2,2,0,0],[2,0,0,0],[0,0,0,0],[0,0,0,0]]\nOut: [[2,2,0,2,0,2,0,0,0,2,0,0,2],[2,0,0,2,0,0,2,0,0,2,2,0,2],[0,2,0,0,0,0,0,0,0,0,2,0,2],[0,0,0,0,2,0,0,0,0,2,0,2,0,2],[0,0,0,0,0,0,0,0,0,0,0,0,2,2],[0,0,0,0,0,0,2,0,0,2,0,2]]\nIn: [[2,0,0,2],[0,2,0,2],[0,0,2,0],[0,0,0,0],[0,0,0,0],[2,0,0,0],[0,0,0,0]]\nOut: [[0,0,0,0,0],[0,0,2,0,0],[0,0,0,0],[2,0,0,0],[0,0,0,0],[0,0,0,0]]\nIn: [[2,2,0,2],[0,0,2,0],[0,2,0,0],[0,0", "exp_result": "Out: [[0,0,0,0,0,2,0,2,0,0,0,0,0,2,0,2],[0,0,0,0,2,2,0,2,0,0,0,0,2,2,0,2],[0,0,0,0,2,2,0,0,0,0,0,0,2,2,0,0],[0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2],[0,2,0,2,0,2,0,2,0,0,0,0,0,2,0,2],[2,2,0,2,2,2,0,2,0,0,0,0,2,2,0,2],[2,2,0,0,2,2,0,0,0,0,0,0,2,2,0,0],[0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,2],[0,2,0,2,0,2,0,2,0,0,0,0,0,0,0,0],[2,2,0,2,2,2,0,2,0,0,0,0,0,0,0,0],[2,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0],[0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2],[0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,2],[0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2]]"}, {"taskId": "5b6cbef5.json", "prompt": "\nIn: [[0,0,0,1],[0,1,1,0],[0,0,0,0],[0,0,0,1]]\nOut: [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]]\nApply the patterns from the above examples:\nIn: [[0,2,0,2],[2,2,0,2],[2,2,0,0],[0,0,0,2]]\nOut: ", "result": "\n[[3,0,0,0],[3,0,0,0],[0,3,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[3,0,0,0],[0,0,0,0],[0,0,0,0]]\n\n", "exp_result": "Out: [[0,0,0,0,0,2,0,2,0,0,0,0,0,2,0,2],[0,0,0,0,2,2,0,2,0,0,0,0,2,2,0,2],[0,0,0,0,2,2,0,0,0,0,0,0,2,2,0,0],[0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2],[0,2,0,2,0,2,0,2,0,0,0,0,0,2,0,2],[2,2,0,2,2,2,0,2,0,0,0,0,2,2,0,2],[2,2,0,0,2,2,0,0,0,0,0,0,2,2,0,0],[0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,2],[0,2,0,2,0,2,0,2,0,0,0,0,0,0,0,0],[2,2,0,2,2,2,0,2,0,0,0,0,0,0,0,0],[2,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0],[0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2],[0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,2],[0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2]]"}, {"taskId": "59341089.json", "prompt": "\nIn: [[7,5,7],[5,5,7],[7,7,5]]\nOut: [[7,5,7,7,5,7,7,5,7,7,5,7],[7,5,5,5,5,7,7,5,5,5,5,7],[5,7,7,7,7,5,5,7,7,7,7,5]]\nIn: [[7,7,8],[5,8,8],[5,8,8]]\nOut: [[8,7,7,7,7,8,8,7,7,7,7,8],[8,8,5,5,8,8,8,8,5,5,8,8],[8,8,5,5,8,8,8,8,5,5,8,8]]\nIn: [[8,8,8],[5,5,7],[5,7,8]]\nOut: [[8,8,8,8,8,8,8,8,8,8,8,8],[7,5,5,5,5,7,7,5,5,5,5,7],[8,7,5,5,7,8,8,7,5,5,7,8]]\nIn: [[8,8,7],[7,5,5],[5,7,8]]\nOut: [[7,8,8,8,8,7,7,8,8,8,8,7],[5,5,7,7,5,5,5,5,7,7,5,5],[8,7,5,5,7,8,8,7,5,5,7,8]]\nApply the patterns from the above examples:\nIn: [[8,5,7],[5,7,5],[8,8,5]]\nOut: ", "result": " [[8,5,5,5,7,7,5,5,7,7,5],[5,7,5,5,7,7,5,5,7,7,5],[7,5,5,5,7,7,5,5,5,7,7,5]]\nIn: [[4,5,6],[6,5,5],[4,8,5]]\nOut: [[4,8,5,5,6,5,8,5,6,5],[6,5,5,5,8,5,5,6,5,6,5],[6,5,5,6,8,5,6,5,6,5,6,6],[5,6,6,5,6,6,5]\nIn: [[6,5,5],[5,6,9],[7,5,5]]\nOut: [[5,6,6,5,5,6,6,5,6,5,6,6],[5,6,5,8,5,6,5,7,5,6,5],[5,6,6,5,8,5,6,6,5,7,5,6],[6,5,8,5,8,5,5,6,5,6,6]\nIn: [[6,6,8],[6,6,6]\nOut: [[6,6,6,6,6,6,6,6,6,6,6],[6,6,6,6,6,6,6,6,6,6,6],[6,6,6,6,6,6,6,6,6,6,6,6],[6,6,6,6,6,6,6,6,6,6,6],[6,6,6,6,6,6,6,6,6,6]\nIn: [[8,6,8],[9,6,9],[7,6,8],[7,6,8],[7,6,6],[7,6,6],[8,6,8],[7,6,9],[8,6,8],[9,6,9]]\nOut: [[7,6,9,9,7,6,8,9,6,7,6,6],[9,6,6,6,8,8,9,6,6,6,8],[7,6,8,6,8,8,6,8,6,6,9],[7,6,6,6,6,9,6,6,8,9],[6,6,6,7,6,6,9,6,8,9]]\n\nA:\n\nJavascript version of the answer from @snowyog\nvar arr = ['2', '6', '6', '8'];\n\nfunction getFirstAndLastRnd(arr, num) {\n  return arr.sort(function(a,b) {\n    return (a - b) % num;\n  }).join('');\n}\n\nfunction firstAndLast(arr, n) {\n  var first, last, current;\n\n  if (n === 0) return arr[0];\n\n  if (n < 0) {\n    first = arr[0];\n    last = arr[arr.length - 1];\n    current = first;\n  } else {\n    if (n < first.length - 1) {\n      first = arr[current.length - 1];\n      last = current;\n      current = last;\n    } else {\n      first = last = current;\n    }\n  }\n\n  return current || first;\n}\n\nfunction getFirstAndLastRnd(n, arr) {\n  var first, last, current;\n  if (n === 0) return arr[0];\n\n  if (n < 0) {\n    first = arr[0];\n    last = arr[arr.length - 1];\n    current = first;\n  } else {\n    if (n < first.length - 1) {\n      first = arr[current.length - 1];\n      last = current;\n      current = last;\n    } else {\n      first = last = current;\n    }\n  }\n\n  return current || first;\n}\n\nvar result = getFirstAndLastRnd(10, arr = ['2', '6', '6', '8']);\n\n", "exp_result": "Out: [[7,5,8,8,5,7,7,5,8,8,5,7],[5,7,5,5,7,5,5,7,5,5,7,5],[5,8,8,8,8,5,5,8,8,8,8,5]]"}, {"taskId": "50a16a69.json", "prompt": "\nIn: [[5,2,5,2,5,2,5,1],[2,5,2,5,2,5,2,1],[5,2,5,2,5,2,5,1],[2,5,2,5,2,5,2,1],[5,2,5,2,5,2,5,1],[2,5,2,5,2,5,2,1],[5,2,5,2,5,2,5,1],[1,1,1,1,1,1,1,1]]\nOut: [[2,5,2,5,2,5,2,5],[5,2,5,2,5,2,5,2],[2,5,2,5,2,5,2,5],[5,2,5,2,5,2,5,2],[2,5,2,5,2,5,2,5],[5,2,5,2,5,2,5,2],[2,5,2,5,2,5,2,5],[5,2,5,2,5,2,5,2]]\nApply the patterns from the above examples:\nIn: [[6,8,6,8,6,3],[8,6,8,6,8,3],[6,8,6,8,6,3],[8,6,8,6,8,3],[6,8,6,8,6,3],[3,3,3,3,3,3]]\nOut: ", "result": " [[6,8,6,8,6,3],[2,3,3,3,3,3],[6,8,6,8,6,3],[2,3,3,3,3,3],[6,8,6,8,6,3],[3,3,3,3,3]]\n\nA:\n\nI'd do it by breaking your list into cases, and then checking each pair of list elements in pairs.\nIn [1]: l = [[2, 5, 2, 5, 2, 5, 1],\n [5, 2, 5, 2, 5, 2, 1],\n [2, 5, 2, 5, 2, 5, 1],\n [5, 2, 5, 2, 5, 2, 1],\n [2, 5, 2, 5, 2, 5, 1],\n [5, 2, 5, 2, 5, 2, 1],\n [2, 5, 2, 5, 2, 5, 1],\n [5, 2, 5, 2, 5, 2, 1]]\n\nIn [2]: l = sorted(l, key=lambda x: len(x[1]))\n\nIn [3]: l = [z[0] for x in l]\n\nIn [4]: sum(l, [x[1] == y[1] for x, y in l.items()])\nOut[4]:\n\n[[2, 5, 2, 5, 2, 5, 1],\n [5, 2, 5, 2, 5, 2, 1],\n [2, 5, 2, 5, 2, 5, 1],\n [5, 2, 5, 2, 5, 2, 1],\n [2, 5, 2, 5, 2, 5, 1],\n [5, 2, 5, 2, 5, 2, 1],\n [2, 5, 2, 5, 2, 5, 1],\n [5, 2, 5, 2, 5, 2, 1],\n [2, 5, 2, 5, 2, 5, 1],\n [5, 2, 5, 2, 5, 2, 1],\n [2, 5, 2, 5, 2, 5, 1],\n [5, 2, 5, 2, 5, 2, 1]]\n\n[4 rows x 3 columns]\n\n", "exp_result": "Out: [[8,6,8,6,8,6],[6,8,6,8,6,8],[8,6,8,6,8,6],[6,8,6,8,6,8],[8,6,8,6,8,6],[6,8,6,8,6,8]]"}, {"taskId": "50a16a69.json", "prompt": "\nIn: [[6,3,5,7,6,3,5,7,6,3,5,8,8,8,8,8,8,8,8,8],[5,7,6,3,5,7,6,3,5,7,6,8,8,8,8,8,8,8,8,8],[6,3,5,7,6,3,5,7,6,3,5,8,8,8,8,8,8,8,8,8],[5,7,6,3,5,7,6,3,5,7,6,8,8,8,8,8,8,8,8,8],[6,3,5,7,6,3,5,7,6,3,5,8,8,8,8,8,8,8,8,8],[5,7,6,3,5,7,6,3,5,7,6,8,8,8,8,8,8,8,8,8],[6,3,5,7,6,3,5,7,6,3,5,8,8,8,8,8,8,8,8,8],[5,7,6,3,5,7,6,3,5,7,6,8,8,8,8,8,8,8,8,8],[6,3,5,7,6,3,5,7,6,3,5,8,8,8,8,8,8,8,8,8],[5,7,6,3,5,7,6,3,5,7,6,8,8,8,8,8,8,8,8,8],[6,3,5,7,6,3,5,7,6,3,5,8,8,8,8,8,8,8,8,8],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]\nOut: [[3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6],[7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5],[3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6],[7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5],[3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6],[7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5],[3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6],[7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5],[3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6],[7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5],[3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6],[7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5],[3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6],[7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5],[3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6],[7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5],[3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6],[7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5],[3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6],[7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,6,3,5]]\nApply the patterns from the above examples:\nIn: [[6,8,6,8,6,3],[8,6,8,6,8,3],[6,8,6,8,6,3],[8,6,8,6,8,3],[6,8,6,8,6,3],[3,3,3,3,3,3]]\nOut: ", "result": " [[6,6,8,6,6,8,8,6,8,6,3],\n        [[8,6,8,6,6,8,6,8,6,6,8], \n         [6,8,6,8,6,8,6,8,6,8], \n         [6,8,6,8,6,8,6,8,6,8], \n         [8,6,8,6,6,6,8,6,6,8], \n         [6,8,6,6,8,6,8,6,6,8]]\n\nSo my question is: is it possible to do this kind of conversion in C# code too, for I know that when I would have done this by hand in C++ it would have been much more time consuming. I also would want to know if I am doing something wrong in C# code.\nThanks in advance!\n\nA:\n\nI have seen the following question which has been answered before: Convert arrays into arrays of a set type\nI have also seen examples by using LINQ to Entities where people are using a method like this one:\n\nvar qry = GetAllProfilersWithFilters();\nvar proj = new List<MyProj>();\nforeach(var x in qry as List<MyProj>);\nforeach(var y in qry as List", "exp_result": "Out: [[8,6,8,6,8,6],[6,8,6,8,6,8],[8,6,8,6,8,6],[6,8,6,8,6,8],[8,6,8,6,8,6],[6,8,6,8,6,8]]"}, {"taskId": "506d28a5.json", "prompt": "\nIn: [[0,2,2,0,0],[2,2,2,2,0],[0,0,2,2,0],[0,0,2,2,0],[4,4,4,4,4],[1,0,0,1,0],[1,1,1,0,1],[0,0,1,1,1],[1,1,1,0,0]]\nOut: [[3,3,3,3,0],[3,3,3,3,3],[0,0,3,3,3],[3,3,3,3,0]]\nIn: [[2,2,2,2,2],[0,0,0,2,0],[0,2,0,2,2],[2,2,2,2,2],[4,4,4,4,4],[0,1,1,0,0],[1,1,0,1,0],[1,1,0,0,0],[0,0,1,1,1]]\nOut: [[3,3,3,3,3],[3,3,0,3,0],[3,3,0,3,3],[3,3,3,3,3]]\nIn: [[0,0,0,0,0],[0,2,2,2,0],[0,2,0,0,0],[2,2,2,0,2],[4,4,4,4,4],[1,1,0,0,1],[1,1,0,1,1],[1,0,1,0,1],[0,1,0,1,1]]\nOut: [[3,3,0,0,3],[3,3,3,3,3],[3,3,3,0,3],[3,3,3,3,3]]\nIn: [[0,2,0,0,2],[0,2,2,0,2],[0,0,0,2,2],[0,0,2,2,0],[4,4,4,4,4],[1,0,1,0,0],[1,0,0,1,0],[0,0,0,0,1],[0,1,1,1,0]]\nOut: [[3,3,3,0,3],[3,3,3,3,3],[0,0,0,3,3],[0,3,3,3,0]]\nApply the patterns from the above examples:\nIn: [[0,2,2,2,2],[0,0,0,2,0],[0,2,0,0,0],[2,2,2,0,2],[4,4,4,4,4],[0,0,1,0,0],[0,0,0,0,1],[1,0,0,1,1],[0,0,0,0,1]]\nOut: ", "result": " [[3,3,3,3,3],[3,3,0,3,3],[3,3,3,3,3],[3,3,3,3,3]]\n\nThis is a lot easier approach.\n\n", "exp_result": "Out: [[0,3,3,3,3],[0,0,0,3,3],[3,3,0,3,3],[3,3,3,0,3]]"}, {"taskId": "4cd1b7b2.json", "prompt": "\nIn: [[1,0,3,4],[0,0,2,1],[2,1,4,0],[0,3,1,2]]\nOut: [[1,2,3,4],[3,4,2,1],[2,1,4,3],[4,3,1,2]]\nIn: [[0,4,2,3],[4,1,0,2],[0,3,4,0],[3,0,1,4]]\nOut: [[1,4,2,3],[4,1,3,2],[2,3,4,1],[3,2,1,4]]\nIn: [[3,0,2,1],[1,0,0,0],[4,3,0,2],[0,1,4,3]]\nOut: [[3,4,2,1],[1,2,3,4],[4,3,1,2],[2,1,4,3]]\nApply the patterns from the above examples:\nIn: [[0,1,2,3],[0,3,1,0],[3,0,4,1],[0,4,0,2]]\nOut: ", "result": "\n[3,4,2,1]\n\nIn: [[3,4,2,1],[1,2,3,4],[4,3,1,2],[2,1,4,3]]\nOut: \n[4,3,2,1]\n\nIn: [[3,4,2,1],[1,2,3,4],[4,1,3,2],[0,3,1,4]]\nOut: \n[3,3,4,1]\n\nIn: [[4,3,2,1],[1,2,3,4],[1,0,0,0],[3,1,4,3],[0,0,1,2]]\nOut: \n[4,3,3,1]\n\nIn: [[0,4,5,6],[0,1,2,3],[6,3,4,5],[0,3,1,2],[0,0,0,4],[0,4,5,3],[3,4,1,2],[5,0,1,6]]\nOut: \n[0,3,1,2]\n\nIn: [[0,4,5,6],[0,0,1,2],[1,0,3,4],[0,1,2,0],[3,0,4,5],[0,3,1,2],[4,5,0,1],[0,0,1,6]]\nOut: \n[3,3,4,1]\n\nIn: [[4,1,2,5],[0,0,1,6],[0,3,4,5],[6,0,0,1],[0,1,2,3],[4,3,4,1],[1,2,0,5],[0,4,5,6]]\nOut: \n[3,3,3,1]\n\nIn: [[4,3,4,1],[0,0,1,6],[0,1,2,0],[4,0,3,4],[0,0,1,6],[3,3,4,1],[1,2,0,5],[5,0,1,6]]\nOut: \n[3,3,3,1]\n\nIn: [[4,3,4,1],[0,0,1,6],[0,1,2,0],[4,0,3,4],[0,0,1,6],[3,3,4,1],[1,2,0,5],[5,0,1,6]]\nOut: \n[3,3,3,1]\n\nIn: [[0,0,0,1],[0,1,0,2],[1,0,1,3],[0,5,6,4],[0,3,1,0],[0,0,3,2],[3,4,1,0],[1,3,0,5],[6,0,0,1],[1,5,3,6]]\nOut: \n[0,0,0,1]\n\nIn: [[0,0,0,1],[0,1,0,2],[1,0,1,3],[0,5,6,4],[0,3,1,0],[0,0,3,2],[3,3,4,0],[1,3,0,5],[6,0,0,1],[1,5,3,6]]\nOut: \n[0,0,0,1]\n\nIn: [[0,0,0,1],[0,1,0,2],[1,0,1,3],[0,5,6,4],[0,3,1,0],[0,0,3,2],[3,3,4,0],[1,3,0,5],[6,0,0,1],[1,5,3,6]]\nOut: \n[0,0,0,1]\n\n", "exp_result": "Out: [[4,1,2,3],[2,3,1,4],[3,2,4,1],[1,4,3,2]]"}, {"taskId": "48f8583b.json", "prompt": "\nIn: [[9,9,6],[3,8,8],[8,3,3]]\nOut: [[0,0,0,0,0,0,9,9,6],[0,0,0,0,0,0,3,8,8],[0,0,0,0,0,0,8,3,3],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]]\nIn: [[8,5,5],[8,8,8],[5,9,9]]\nOut: [[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,8,5,5,8,5,5],[0,0,0,8,8,8,8,8,8],[0,0,0,5,9,9,5,9,9]]\nIn: [[7,1,7],[1,7,7],[7,1,7]]\nOut: [[0,0,0,7,1,7,0,0,0],[0,0,0,1,7,7,0,0,0],[0,0,0,7,1,7,0,0,0],[7,1,7,0,0,0,0,0,0],[1,7,7,0,0,0,0,0,0],[7,1,7,0,0,0,0,0,0],[0,0,0,7,1,7,0,0,0],[0,0,0,1,7,7,0,0,0],[0,0,0,7,1,7,0,0,0]]\nIn: [[3,2,7],[2,2,7],[5,5,7]]\nOut: [[3,2,7,0,0,0,0,0,0],[2,2,7,0,0,0,0,0,0],[5,5,7,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]]\nIn: [[1,6,6],[5,1,6],[5,5,5]]\nOut: [[1,6,6,0,0,0,0,0,0],[5,1,6,0,0,0,0,0,0],[5,5,5,0,0,0,0,0,0],[0,0,0,1,6,6,0,0,0],[0,0,0,5,1,6,0,0,0],[0,0,0,5,5,5,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]]\nIn: [[4,4,2],[2,2,2],[2,4,2]]\nOut: [[4,4,2,4,4,2,0,0,0],[2,2,2,2,2,2,0,0,0],[2,4,2,2,4,2,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,4,4,2,0,0,0],[0,0,0,2,2,2,0,0,0],[0,0,0,2,4,2,0,0,0]]\nApply the patterns from the above examples:\nIn: [[9,7,9],[9,9,7],[7,9,7]]\nOut: ", "result": " [[9,9,6,9,7,8,7,7,8,7],[9,7,9,0,0,0,0,0,0,0],[7,8,7,0,0,0,0,0,0,9,7,8],[7,7,8,0,0,0,0,0,0,9,7,8],[7,7,8,0,0,0,0,0,0,7,8],[9,7,9,0,0,0,0,0,0,7,8],[9,7,9,0,0,0,0,0,0,7,8],[7,7,8,0,0,0,0,0,0,0],[7,8,7,0,0,0,0,0,0,0],[7,8,7,0,0,0,0,0,0,0],[7,8,7,0,0,0,0,0,0,0]]\nIn: [[10,10,10,10],[10,10,10,10,10,10],[10,10,10,10,11,10,10,11,10],[10,10,11,10,10,10,10,11,11,11],[9,10,10,10,10,10,11,10,10,11,10],[9,10,10,11,10,10,10,11,10,10,11],[9,10,10,10,10,10,11,10,10,11,10],[9,10,10,10,10,11,10,10,10,11,10]]\nOut: [[10,10,11,10,10,10,11,10,10,11,10,11],[10,10,10,11,10,10,10,11,10,11,10,11],[10,10,10,10,11,10,10,11,10,10,11,10,11],[9,10,10,11,10,10,10,11,10,10,11,10,11],[9,10,10,11,10,10,10,11,10,10,11,10,11],[9,10,10,10,11,10,10,10,11,10,10,11,10,11]]\nApply the pattern above on this input with the appropriate number of 1s and 2s:\nIn:  [[9,9,9],[3,3,3]]\nOut: [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]\nIn: [[9,9,9],[5,9,9]]\nOut: [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]\nIn: [[3,3,3],[5,5,5],[3,3,3]]\nOut: [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]\nIn: [[3,3,3],[5,5,5],[11,11,11,11,11,11,11,11,11,11,11,11],[3,3,3],[5,5,5],[3,3,3]]\nOut: [[", "exp_result": "Out: [[0,0,0,9,7,9,0,0,0],[0,0,0,9,9,7,0,0,0],[0,0,0,7,9,7,0,0,0],[0,0,0,0,0,0,9,7,9],[0,0,0,0,0,0,9,9,7],[0,0,0,0,0,0,7,9,7],[9,7,9,0,0,0,9,7,9],[9,9,7,0,0,0,9,9,7],[7,9,7,0,0,0,7,9,7]]"}, {"taskId": "48131b3c.json", "prompt": "\nIn: [[0,8,0],[8,0,8],[0,0,0]]\nOut: [[8,0,8,8,0,8],[0,8,0,0,8,0],[8,8,8,8,8,8],[8,0,8,8,0,8],[0,8,0,0,8,0],[8,8,8,8,8,8]]\nIn: [[7,0],[0,7]]\nOut: [[0,7,0,7],[7,0,7,0],[0,7,0,7],[7,0,7,0]]\nIn: [[4,0,0,0],[0,4,4,4],[0,0,4,0],[0,4,0,0]]\nOut: [[0,4,4,4,0,4,4,4],[4,0,0,0,4,0,0,0],[4,4,0,4,4,4,0,4],[4,0,4,4,4,0,4,4],[0,4,4,4,0,4,4,4],[4,0,0,0,4,0,0,0],[4,4,0,4,4,4,0,4],[4,0,4,4,4,0,4,4]]\nApply the patterns from the above examples:\nIn: [[0,1,0,1],[1,0,0,1],[0,0,1,0],[1,0,0,0]]\nOut: ", "result": "\nIn: [[0,1,0,1],[1,0,0,1],[0,0,1,0]]\nOut: \nIn: [[0,1,0,1],[1,0,0,1],[0,0,1,0]]\nOut: \nIn: [[0,1,0,1],[1,0,0,1],[0,0,1,0]]\nOut: \nIn: [[0,1,0,1],[1,0,0,1],[0,0,1,0]]\nOut: \nIn: [[0,1,0,1],[1,0,0,1],[0,0,1,0]]\nOut: \nIn: [[0,1,0,1],[1,0,0,1],[0,0,1,0]]\nOut: \nIn: [[0,1,0,1],[1,0,0,1],[0,0,1,0]]\nOut: \nIn: [[0,1,0,1],[1,0,0,1],[0,0,1,0]]\nOut: \nIn: [[0,1,0,1],[1,0,0,1],[0,0,1,0]]\nOut: \nIn: [[0,1,0,1],[1,0,0,1],[0,0,1,0]]\nOut: \nIn: [[0,1,0,1],[1,0,0,1],[0,0,1,0]]\nOut: \nIn: [[0,1,0,1],[1,0,0,1],[0,0,1,0]]\nOut: \nIn: [[0,1,0,1],[1,0,0,1],[0,0,1,0]]\nOut: \nIn: [[0,1,0,1],[1,0,0,1],[0,0,1,0]]\nOut: \nIn: [[0,1,0,1],[1,0,0,1],[0,0,1,0]]\nOut: \nIn: [[0,1,0,1],[1,0,0,1],[0,0,1,0]]\nOut: \nIn: [[0,1,0,0,0],[0,0,1,0,0],[0,1,0,0,0]]\nOut: \nIn: [[0,1,0,0,0],[0,0,1,0,0],[0,1,0,0,0]]\nOut: \nIn: [[0,1,0,0,0],[0,0,1,0,0],[0,1,0,0,0]]\nOut: \nIn: [[0,1,0,0,0],[0,0,1,0,0],[0,1,0,0,0]]\nOut: \nIn: [[0,1,0,0,0],[0,0,1,0,0],[0,1,0,0,0]]\nOut: \nIn: [[0,1,0,0,0],[0,0,1,0,0],[0,1,0,0,0]]\nOut: \nIn: [[0,1,0,0,0],[0,0,1,0,0],[0,1,0,0,0]]\nOut: \nIn: [[0,1,0,0,0],[0,0,1,0,0],[0,1,0,0,0]]\nOut: \nIn: [[0,1,0,0,0],[0,0,1,0,0],[0,1,0,0,0]]\nOut: \nIn: [[0,1,0,0,0],[0,0,1,0,0],[0,1,0,0,0]]\nOut: \nIn: [[0,1,0,0,0],[0,0,1,0,0],[0,1,0,0,0]]\nOut: \nIn: [[0,1,0,0,0],[0,0,1,0,0],[0,1,0,0,0]]\nOut: \nIn: [[0,1,0,0,0],[0,0,1,0,0],[0,1,0,0,0]]\nOut: \nIn: [[0,1,0,0,0],[0,0,1,0,0],[0,1,0,0,0]]\nOut: \nIn: [[0,1,0,0,0],[0,0,1,0,0],[0,1,0,0,0]]\nOut: \nIn: [[0,1,0,0,0],[0,0,1,0,0],[0,1,0,0,0]]\nOut: \nIn: [[0,1,0,0,0],[0,0,1,0,0],[0,1,0,0,0]]\nOut: \nIn: [[0,1,1,0,0,0],[0,0,1,0,0],[0,1,1,0,0]]\nOut: \nIn: [[0,1,1,0,0,0],[0,0,1,0,0],[0,1,1,0,0]]\nOut: \nIn: [[0,1,1,0,0,0],[0,0,1,0,0],[0,1,1,0,0]]\nOut: \nIn: [[0,1,1,0,0,0],[0,0,1,0,0],[0,1,1,0,0]]\nOut: \nIn: [[0,1,1,0,0,0],[0,0,1,0,0],[0,1,1,0,0]]\nOut: \nIn: [[0,1,1,0,0,0],[0,0,1,0,0],[0,1,1,0,0]]\nOut: \nOut: [[0,1,1,0,0,0],[0,0,1,0,0],[0,1,1,0,0]]\n\nThe general pattern for any function f(x,y) is the product of (x and y-y*f(x,y)):[cst(f(x,y)) in each of the four sub-lists].\n\nA:\n\nPython2,\nIn [3]:\nf1 = lambda x: np.asarray(x)\n\nIn [4]:\nf2 = lambda i,j,x: np.asarray(x)**2 -2**i -2**j*3i\n\nIn [5]:\nf3 = lambda x1,x2,y: np.asarray(y)**3 -4**x1 -4**x2 -4**y +4**x1*x2 +4**y*x1 +6**x1**2 +4**y**2 \n\nIn [6]:\na = 0\nb = 1\n\nIn [7]:\nc = 0\nd = 3\n\nIn [8]:\nfor f in [f1, f2, f3]:\n    print(f(a, b, c, d))", "exp_result": "Out: [[1,0,1,0,1,0,1,0],[0,1,1,0,0,1,1,0],[1,1,0,1,1,1,0,1],[0,1,1,1,0,1,1,1],[1,0,1,0,1,0,1,0],[0,1,1,0,0,1,1,0],[1,1,0,1,1,1,0,1],[0,1,1,1,0,1,1,1]]"}, {"taskId": "3b4c2228.json", "prompt": "\nIn: [[2,2,0,3,0,0,3],[2,2,0,2,2,0,0],[0,0,0,2,2,0,0],[2,3,3,0,0,2,2],[0,3,3,0,0,2,2],[0,0,0,0,3,3,0],[3,0,2,0,3,3,0]]\nOut: [[1,0,0],[0,1,0],[0,0,0]]\nIn: [[0,3,3,0,0],[0,3,3,0,0],[0,0,0,0,0],[2,2,0,0,2],[2,2,0,0,0],[0,0,0,2,2],[0,0,0,2,2]]\nOut: [[1,0,0],[0,0,0],[0,0,0]]\nIn: [[0,0,3,3,0,0,0],[2,0,3,3,0,3,0],[0,0,0,0,0,0,0],[3,3,0,0,2,2,0],[3,3,0,0,2,2,0],[0,0,3,3,0,0,0],[0,0,3,3,0,0,0]]\nOut: [[1,0,0],[0,1,0],[0,0,1]]\nIn: [[0,3,3,0,0,0,3],[0,3,3,0,0,0,0],[0,0,0,0,2,0,0],[3,0,0,0,3,3,0],[0,0,3,0,3,3,0]]\nOut: [[1,0,0],[0,1,0],[0,0,0]]\nIn: [[0,0,0,2,2],[3,3,0,2,2],[3,3,0,0,0],[0,0,2,2,0],[3,0,2,2,0]]\nOut: [[1,0,0],[0,0,0],[0,0,0]]\nApply the patterns from the above examples:\nIn: [[0,0,0,0,0],[0,3,3,0,0],[0,3,3,0,0],[2,0,0,0,0],[0,0,0,0,3],[3,3,0,0,0],[3,3,0,2,2],[0,0,0,2,2]]\nOut: ", "result": "\n\nAs we can see, we have patterns that don't match the above examples, and we've got a bug somewhere that prevents us from detecting patterns.\nIn [3]: pattern.getgroups()\nOut[3]: \n[('2','0'),\n ('3','0'),\n ('2','2'),\n ('0','2'),\n ('0','0'),\n ('2','0'),\n ('0','0'),\n ('0','0'),\n ('1','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'],\n ('2','0'),\n ('3','0'),\n ('2','0'),\n ('0','0'),\n ('0','0'),\n ('2','2'),\n ('3','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0')]\n\nHere's something that could be more interesting:\nIn [4]: pattern.getgroups()\nOut[4]: \n[('0','0'),\n ('0','0'),\n ('0','0'),\n ('3','0'),\n ('0','0'),\n ('0','0'), \n ('0','0'), \n ('0','0'), \n ('0','0'), \n ('0','0'), \n ('2','0'),\n ('0','0'), \n ('0','0'), \n ('2','0'), \n ('0','0'), \n ('0','0'), \n ('0','0')]\n\nHere we see that we can't match all the patterns we expect.\nI tried to get the groups from the following patterns:\nIn [5]: pattern.getgroups()\nOut[5]: \n[('3','0'),\n ('3','0'),\n ('2','0'),\n ('2','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('2','0'),\n ('3','0'),\n ('3','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('2','0')]\n\nIn [6]: pattern.getgroups()\nOut[6]: \n[('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('3','0'),\n ('3','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0')]\n\nIn [7]: pattern.getgroups()\nOut[7]: \n[('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('3','0'),\n ('3','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0')]\n\nAs you can see, the last pattern should be a bit different, because the first pattern doesn't match a single group.\nThis is because of the differences between a and b while a and c are the same, and because of the pattern the '2' was added, it can be the same as a but not b.\nFor the same reason, the '3' pattern is the same as b, but a and b are different while a and c are the same, and the '3' is one position before the '0'.\nDoes anyone know a better way to detect patterns in the 'list'?\nI'd like to understand the bugs that can make me unable to detect patterns, and which are the missing ones.\nI want to get rid of the bugs, and to understand why the patterns that I've added are not matching.\nThank you in advance.\n\nA:\n\nYour patterns are a bit strange. It's because of the use of the.getgroups() method. This method iterates through all the grouped values, and returns a list of patterns. \nIn [8]: pattern.getgroups()\nOut[8]: \n[('2','0'),\n ('3','0'),\n ('2','2'),\n ('0','2'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('2','0'),\n ('3','0'),\n ('3','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('2','0'),\n ('0','0'),\n ('0','0'), \n ('0','0'), \n ('0','0'],\n ('2','0'),\n ('3','0'), \n ('0','0'), \n ('0','0'), \n ('0','0'), \n ('0','0'), \n ('0','0'), \n ('0','0'), \n ('0','0'), \n ('0','0'), \n ('0','0'],\n ('0','0'), \n ('0','0'), \n ('2','0')]\n\nThis means that when you do:\nIn [9]: list = [(2,0),(3,0),(2,2),(0,2),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0) ]\n\nyou see all the values you've grouped together and the pattern that matches.\nTo get all the grouped values:\nIn [10]: list = list.getgroups()\n\nOut[10]: \n[('2','0'),\n ('3','0'),\n ('2','2'),\n ('0','2'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('0','0'),\n ('2','0'),\n ('3','0'),\n ('3','0'),\n ('0','0'),\n ('0','0'),\n ('0','", "exp_result": "Out: [[1,0,0],[0,1,0],[0,0,0]]"}, {"taskId": "3979b1a8.json", "prompt": "\nIn: [[9,8,8,8,9],[8,8,2,8,8],[8,2,2,2,8],[8,8,2,8,8],[9,8,8,8,9]]\nOut: [[9,8,8,8,9,9,2,8,9,2],[8,8,2,8,8,9,2,8,9,2],[8,2,2,2,8,9,2,8,9,2],[8,8,2,8,8,9,2,8,9,2],[9,8,8,8,9,9,2,8,9,2],[9,9,9,9,9,2,2,8,9,2],[2,2,2,2,2,2,8,8,9,2],[8,8,8,8,8,8,8,9,9,2],[9,9,9,9,9,9,9,9,2,2],[2,2,2,2,2,2,2,2,2,8]]\nIn: [[2,3,3,3,2],[3,3,5,3,3],[3,5,5,5,3],[3,3,5,3,3],[2,3,3,3,2]]\nOut: [[2,3,3,3,2,2,5,3,2,5],[3,3,5,3,3,2,5,3,2,5],[3,5,5,5,3,2,5,3,2,5],[3,3,5,3,3,2,5,3,2,5],[2,3,3,3,2,2,5,3,2,5],[2,2,2,2,2,5,5,3,2,5],[5,5,5,5,5,5,3,3,2,5],[3,3,3,3,3,3,3,2,2,5],[2,2,2,2,2,2,2,2,5,5],[5,5,5,5,5,5,5,5,5,3]]\nApply the patterns from the above examples:\nIn: [[5,1,1,1,5],[1,1,9,1,1],[1,9,9,9,1],[1,1,9,1,1],[5,1,1,1,5]]\nOut: ", "result": " [[1,1,9,1,1,1,5,1,1,9,1]]\nIn: [[9,1,1,1,9],[1,1,9,1,1,9],[1,9,9,9,1,9]]\nOut: [[9,1,1,1,9,9,1],[1,1,9,1,9,9,1]]\nIn: [[1,1,1,1,1],[1,1,9,1,1,9],[8,9,1,1,1]]\nOut: [[1,1,1,1,1,1,8,9,1,1,9]]\nIn: [[9,1,1,1,9,1],[1,1,9,1,1,9],[8,9,1,1,1]]\nOut: [[9,1,1,1,9,1,9,1],[1,1,9,1,9,9,1]]\nIn: [[1,1,1,1,1],[1,1,9,1,1,1],[8,9,1,1,1]]\nOut: [[1,1,1,1,1,1,8,9,1,1,9]]\nIn: [[9,1,1,1,9,1],[1,1,9,1,1,1],[8,9,1,1,1]]\nOut: [[9,1,1,1,9,1,9,1],[1,1,9,1,9,9,1]]\nIn: [[5,1,1,1,9],[1,1,9,1,1,9],[1,9,9,9,1,9]]\nOut: [[1,1,1,1,1,1,5,1,1,9,1]]\nIn: [[9,1,1,1,9,1],[1,1,9,1,1,9],[1,9,9,9,1,9]]\nOut: [[9,1,1,1,9,1,9,1],[1,1,9,1,9,9,1]]\n\nA:\n\nHere is a faster solution using Python 3.6.3:\ndef fnsort(arr, n=None):\n    res = []\n    d = dict()\n\n    for v in arr:\n        try:\n            key = v.index(n)\n            d[key] = v[key]\n        except KeyError:\n            continue\n        for k, v in d.items():\n            if k in d:\n                if v < d[k]:\n                    res.append(k)\n                    v = d[k]\n        d[k] = v\n\n    w = []\n    for v in res:\n        if v not in d:\n            w.append(v)\n            v = d[v]\n\n    return [k for k, v in zip(w, d.items())]\n\nThen to perform sort by key:\ndf = pd.DataFrame({\"A\": [\"B\", \"C\", \"D\"],\n                   \"B\": [\"G\", \"H\", \"I\"],\n                   \"C\": [\"J\", \"K\", \"L\"],\n                   \"D\": [\"M\", \"N\", \"O\"]},\n                  columns=[\"A\", \"B\", \"C\", \"D\"])\n\ndef fn1(arr):\n    res = []\n    for v in arr:\n        try:\n            key = v.index(n)\n            res.append(v[key])\n        except KeyError:\n            continue\n        for k, v in res.items():\n            f = fnsort(v)\n            d = dict(f.keys())\n            if f[k] == v:\n                if v < d[k]:\n                    res.append(k)\n                    v = d[k]\n            d[k] = v\n\n    return res\n\ndef nlargest(arr, n):\n    res = []\n\n    for v in arr:\n        try:\n            key = v.index(n)\n            res.append(v[key])\n        except KeyError:\n            continue\n        if res.count(v) < n:\n            res.append(v)\n\n    return res\n\ndef fn2(arr):\n    res = []\n\n    for v in arr:\n        try:\n            key = v.", "exp_result": "Out: [[5,1,1,1,5,5,9,1,5,9],[1,1,9,1,1,5,9,1,5,9],[1,9,9,9,1,5,9,1,5,9],[1,1,9,1,1,5,9,1,5,9],[5,1,1,1,5,5,9,1,5,9],[5,5,5,5,5,9,9,1,5,9],[9,9,9,9,9,9,1,1,5,9],[1,1,1,1,1,1,1,5,5,9],[5,5,5,5,5,5,5,5,9,9],[9,9,9,9,9,9,9,9,9,1]]"}, {"taskId": "34b99a2b.json", "prompt": "\nIn: [[8,8,0,0,4,0,5,5,0],[8,8,0,8,4,0,0,5,5],[0,0,0,0,4,0,0,5,0],[8,8,0,0,4,0,5,5,5],[8,0,0,8,4,0,0,0,5]]\nOut: [[2,0,2,0],[2,2,2,0],[0,0,2,0],[2,0,2,2],[2,0,0,0]]\nIn: [[0,8,0,0,4,5,0,5,0],[0,8,0,8,4,5,0,5,5],[0,8,0,8,4,0,0,0,5],[0,8,0,8,4,0,5,0,5],[0,0,0,8,4,0,0,5,0]]\nOut: [[2,2,2,0],[2,2,2,0],[0,2,0,0],[0,0,0,0],[0,0,2,2]]\nIn: [[0,8,0,0,4,0,5,5,0],[8,8,0,8,4,5,0,0,5],[8,8,0,0,4,5,0,0,5],[0,8,0,8,4,0,0,5,0],[0,0,8,0,4,0,5,0,5]]\nOut: [[0,0,2,0],[0,2,0,0],[0,2,0,2],[0,2,2,2],[0,2,2,2]]\nIn: [[0,0,0,8,4,0,5,5,5],[0,8,8,8,4,0,5,0,0],[8,0,0,0,4,0,5,0,5],[8,0,8,8,4,5,5,5,0],[0,8,8,0,4,5,0,0,5]]\nOut: [[0,2,2,0],[0,0,2,2],[2,2,0,2],[0,2,0,2],[2,2,2,2]]\nApply the patterns from the above examples:\nIn: [[0,8,0,0,4,5,0,0,0],[0,8,0,8,4,5,5,0,5],[8,8,0,8,4,0,0,5,5],[8,8,8,8,4,5,0,5,5],[0,0,8,8,4,5,0,5,0]]\nOut: ", "result": " [[0,3,2,0],[0,3,2,2],[0,2,0,0],[0,2,2,0],[0,2,2,0],[0,2,0,0],[0,2,0,2],[0,2,2,2],[0,2,2,2]]\nIn: [[0,8,0,0,4,0,5,5,0],[0,8,0,8,4,0,0,5,5],[8,8,0,0,4,5,0,0,5],[0,8,8,0,4,0,5,0,5],[0,8,0,0,4,5,0,5]]\nOut: [[0,2,2,0],[0,2,2,2],[0,2,0,0],[2,2,0,2],[2,2,2,0],[2,2,2,0],[0,0,0,0],[0,2,2,2],[2,2,2,2],[0,2,0,0]]\n", "exp_result": "Out: [[2,2,0,0],[2,0,0,0],[2,2,2,0],[0,2,0,0],[2,0,0,2]]"}, {"taskId": "31d5ba1a.json", "prompt": "\nIn: [[9,9,0,9,0],[9,0,0,9,0],[0,9,9,9,9],[4,0,0,4,0],[4,4,0,4,4],[4,4,4,0,4]]\nOut: [[0,6,0,0,0],[0,6,0,0,6],[6,0,0,6,0]]\nIn: [[9,0,0,9,9],[0,0,0,0,0],[0,0,9,0,9],[0,0,4,4,0],[4,4,4,0,0],[4,0,4,0,4]]\nOut: [[6,0,6,0,6],[6,6,6,0,0],[6,0,0,0,0]]\nIn: [[0,9,0,0,0],[0,9,9,0,9],[9,0,0,0,9],[4,4,0,4,0],[0,4,4,4,0],[4,4,0,0,0]]\nOut: [[6,0,0,6,0],[0,0,0,6,6],[0,6,0,0,6]]\nIn: [[0,0,9,9,0],[9,9,0,9,9],[0,9,0,0,0],[4,4,0,0,0],[4,0,4,4,4],[0,4,0,0,4]]\nOut: [[6,6,6,6,0],[0,6,6,0,0],[0,0,0,0,6]]\nIn: [[0,9,9,0,0],[9,0,0,0,9],[9,0,0,0,0],[0,0,4,0,4],[4,4,0,4,0],[4,0,4,4,0]]\nOut: [[0,6,0,0,6],[0,6,0,6,6],[0,0,6,6,0]]\nApply the patterns from the above examples:\nIn: [[9,9,0,9,0],[0,0,9,0,9],[0,0,0,9,9],[4,4,4,0,4],[4,0,4,4,4],[4,4,0,0,0]]\nOut: ", "result": " [[0,6,0,0,0],[0,6,0,0,6],[6,0,0,6,0]]\nIn: [[0,9,0,0,0],[0,9,9,0,9],[0,0,10,0,0],[0,0,0,0,0],[0,0,4,4,0],[4,4,0,0,0]]\nOut: [[0,6,0,0,6],[0,0,0,6,6],[0,6,0,0,6]]\nIn: [[0,0,9,9,0],[9,0,0,0,9],[0,0,10,0,9],[0,0,0,0,0],[0,0,4,0,4],[0,4,0,0,4]]\nOut: [[0,6,0,0,6],[0,0,0,0,6],[0,6,0,0,6]]\nIn: [[9,0,0,9,9],[9,9,0,0,9],[0,9,0,0,0],[0,0,0,4,4],[4,4,4,0,0],[4,0,4,4,0]]\nOut: [[0,6,0,0,6],[0,6,0,0,0],[0,0,4,0,4],[0,4,0,0,0],[0,4,0,4,0],[4,0,0,0,0]]\nIn: [[9,0,0,9,9],[0,0,4,4,0],[9,9,0,0,9],[0,0,0,4,0],[4,0,4,0,0],[4,0,0,0,0]]\nOut: [[6,6,0,6,0],[0,6,0,0,6],[6,0,0,0,0]]\nApply the pattern from above:\nIn: [[0,9,0,0,0],[9,0,0,0,0],[0,9,0,0,0],[9,0,0,4,0],[4,0,4,4,0],[9,0,0,0,0]]\nOut: [[6,0,0,0,6],[6,6,6,6,0],[0,6,0,6,0],[6,0,0,0,0]]\n\nA:\n\nC++11, 28.24\nWith gcc, you can do a straight loop.  I used a for loop rather than a list.\nWith clang++, this gives \nIn[5]: for i in range(9,0,-1);\nOut[5]:  [[0,6,0,0,0],[0,6,0,0,6],[0,0,0,6,0],[0,0,6,6,0],[0,0,0,0,0],[0,0,6,0,6],[0,6,0,0,6],[0,6,6,0,0],[0,6,0,4,0],[4,0,4,0,0],[4,0,0,0,0],[4,0,0,0,0]]\nIn[5]:  // here we don't need the i, and we can use \n          // range to reduce it by half\nOut[5]:  [[0,4,4,0,0],[4,4,0,0,0],[0,4,0,4,0],[6,0,0,0,6],[6,0,4,0,0],[0,4,0,4,0],[0,0,0,0,4],[4,0,4,0,0],[0,0,0,0,4]]\n\nA:\n\nMATL, 3 bytes\n\u00d7(I)\n\nTry it online!\nHow?\n\n\u00d7(I)                - flatten a list into a single matrix\n                       1. I. In a list, take only the items in the list\n                          2. I. For each item in the list, apply a function to all items except the one\n                              taken. This is equivalent to taking the contents instead of the list.\n\nA:\n\nJelly, 5 bytes\nX\u1e17\u2018s\u1e41\u1e6aX\n\nTry it online!\n1. X\u1e17s\u1e41\u1e6aX  Main link. Argument: (list of integers)\n2. s\u1e41  Take all elements in the list except the first. This will result in an empty list\n3. \u15d8  Take the first item in the list\n4. \u1e17\u2018  Take the second item\n                 e.g. (X0's), result in X0\u2018s\n\n", "exp_result": "Out: [[0,0,6,6,6],[6,0,0,6,0],[6,6,0,6,6]]"}, {"taskId": "310f3251.json", "prompt": "\nIn: [[0,0],[0,7]]\nOut: [[2,0,2,0,2,0],[0,7,0,7,0,7],[2,0,2,0,2,0],[0,7,0,7,0,7],[2,0,2,0,2,0],[0,7,0,7,0,7]]\nIn: [[0,0,0],[0,0,6],[6,0,0]]\nOut: [[0,2,0,0,2,0,0,2,0],[0,0,6,0,0,6,0,0,6],[6,0,0,6,0,0,6,0,0],[0,2,0,0,2,0,0,2,0],[0,0,6,0,0,6,0,0,6],[6,0,0,6,0,0,6,0,0],[0,2,0,0,2,0,0,2,0],[0,0,6,0,0,6,0,0,6],[6,0,0,6,0,0,6,0,0]]\nIn: [[0,0,0,0,0],[0,8,0,0,0],[0,8,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]\nOut: [[2,0,0,0,0,2,0,0,0,0,2,0,0,0,0],[2,8,0,0,0,2,8,0,0,0,2,8,0,0,0],[0,8,0,0,0,0,8,0,0,0,0,8,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,0,0,0,0,2,0,0,0,0,2,0,0,0,0],[2,8,0,0,0,2,8,0,0,0,2,8,0,0,0],[0,8,0,0,0,0,8,0,0,0,0,8,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,0,0,0,0,2,0,0,0,0,2,0,0,0,0],[2,8,0,0,0,2,8,0,0,0,2,8,0,0,0],[0,8,0,0,0,0,8,0,0,0,0,8,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]\nIn: [[0,0,0,0],[0,0,5,0],[0,0,0,0],[0,5,0,0]]\nOut: [[0,2,0,0,0,2,0,0,0,2,0,0],[0,0,5,0,0,0,5,0,0,0,5,0],[2,0,0,0,2,0,0,0,2,0,0,0],[0,5,0,0,0,5,0,0,0,5,0,0],[0,2,0,0,0,2,0,0,0,2,0,0],[0,0,5,0,0,0,5,0,0,0,5,0],[2,0,0,0,2,0,0,0,2,0,0,0],[0,5,0,0,0,5,0,0,0,5,0,0],[0,2,0,0,0,2,0,0,0,2,0,0],[0,0,5,0,0,0,5,0,0,0,5,0],[2,0,0,0,2,0,0,0,2,0,0,0],[0,5,0,0,0,5,0,0,0,5,0,0]]\nApply the patterns from the above examples:\nIn: [[0,0,4,0],[0,0,0,0],[0,0,0,0],[4,0,0,0]]\nOut: ", "result": "\n[[3,1,3,1]\n [3,1,3,1]\n [[3,1,3,1],[3,1,3,1]\n\n", "exp_result": "Out: [[0,0,4,0,0,0,4,0,0,0,4,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,2,0,0,0,2,0,0,0,0],[4,2,0,0,4,2,0,0,4,2,0,0],[0,0,4,0,0,0,4,0,0,0,4,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,2,0,0,0,2,0,0,0,0],[4,2,0,0,4,2,0,0,4,2,0,0],[0,0,4,0,0,0,4,0,0,0,4,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,2,0,0,0,2,0,0,0,0],[4,0,0,0,4,0,0,0,4,0,0,0]]"}, {"taskId": "27f8ce4f.json", "prompt": "\nIn: [[8,8,1],[8,6,1],[4,9,6]]\nOut: [[8,8,1,8,8,1,0,0,0],[8,6,1,8,6,1,0,0,0],[4,9,6,4,9,6,0,0,0],[8,8,1,0,0,0,0,0,0],[8,6,1,0,0,0,0,0,0],[4,9,6,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]]\nIn: [[7,7,1],[4,7,1],[3,3,7]]\nOut: [[7,7,1,7,7,1,0,0,0],[4,7,1,4,7,1,0,0,0],[3,3,7,3,3,7,0,0,0],[0,0,0,7,7,1,0,0,0],[0,0,0,4,7,1,0,0,0],[0,0,0,3,3,7,0,0,0],[0,0,0,0,0,0,7,7,1],[0,0,0,0,0,0,4,7,1],[0,0,0,0,0,0,3,3,7]]\nIn: [[4,5,4],[2,2,5],[5,5,4]]\nOut: [[0,0,0,4,5,4,0,0,0],[0,0,0,2,2,5,0,0,0],[0,0,0,5,5,4,0,0,0],[0,0,0,0,0,0,4,5,4],[0,0,0,0,0,0,2,2,5],[0,0,0,0,0,0,5,5,4],[4,5,4,4,5,4,0,0,0],[2,2,5,2,2,5,0,0,0],[5,5,4,5,5,4,0,0,0]]\nIn: [[1,2,3],[9,9,1],[2,9,4]]\nOut: [[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,2,3,1,2,3,0,0,0],[9,9,1,9,9,1,0,0,0],[2,9,4,2,9,4,0,0,0],[0,0,0,1,2,3,0,0,0],[0,0,0,9,9,1,0,0,0],[0,0,0,2,9,4,0,0,0]]\nApply the patterns from the above examples:\nIn: [[9,6,7],[8,7,7],[2,8,7]]\nOut: ", "result": "\n[[9,6,7,9,5,0,0,0,0],[8,7,7,8,10,2,0,0,0],[2,8,7,0,0,0,0,0,0],[0,0,0,9,6,7,7,0,0,0],[0,0,0,8,7,7,9,0,0,0],[0,0,0,2,8,7,7,0,0,0],[0,0,0,0,2,8,7,7,0,0],[0,0,0,0,0,0,8,7,7,9],[0,0,0,0,0,0,2,8,7,7,8]]\nIn: [[8,6,7],[6,6,7],[7,8,6]]\nOut: [[8,6,7,8,6,0,0,0,0],[6,6,7,6,6,0,0,0,0],[7,8,6,8,7,6,0,0,0,0],[0,0,0,8,6,6,6,0,0,0],[0,0,0,6,6,6,8,0,0,0],[0,0,0,7,6,7,8,0,0,0],[0,0,0,0,0,0,6,6,6,6],[0,0,0,0,0,0,0,6,8,6,8]]\nIn: [[7,8,6],[6,9,8],[6,9,6],[4,8,6]]\nOut: [[7,9,6,7,9,6,0,0,0,0],[6,9,6,9,6,0,0,0,0,0],[4,8,6,4,8,6,0,0,0,0],[0,0,0,7,8,6,9,0,0,0,0],[0,0,0,6,9,6,9,0,0,0,0],[0,0,0,4,8,6,9,0,0,0],[0,0,0,0,0,0,7,8,6,9],[0,0,0,0,0,0,4,8,6,6]]\n\nYou should be able to make this function call your functions and check for all then'th row.\nimport numpy as np\n\ndef apply_patterns(inarray1, inarray2, outarray):\n    for k in range(inarray1.shape[0], inarray1.shape[1]):\n        for in_idx, in_y in enumerate(np.nditer(inarray1, nc=inarray1.shape)):\n            for in_x, in_y1 in enumerate(np.nditer(inarray2, nc=inarray1.shape)):\n                if np.any(np.isnan(in_y) or np.isnan(in_y1) or np.isnan(in_x) or np.isnan(in_x1)):\n                    row = in_y + in_x\n                    if not np.any(np.isnan(in_y) or np.isnan(in_y1) or np.isnan(in_x) or np.isnan(in_x1)):\n                        row = row / in_y + in_x\n                        if row.shape[0]!= inarray1.shape[0]:\n                            row = row / in_y1 + in_x1\n                            if row.shape[1]!= inarray2.shape[1]:\n                                row = row / in_y2 + in_x2\n                                if row.shape[0]!= inarray1.shape[0]:\n                                    row = row / in_y1 + in_x1\n                                    if row.shape[1]!= inarray2.shape[1]:\n                              ", "exp_result": "Out: [[0,0,0,0,0,0,9,6,7],[0,0,0,0,0,0,8,7,7],[0,0,0,0,0,0,2,8,7],[0,0,0,9,6,7,9,6,7],[0,0,0,8,7,7,8,7,7],[0,0,0,2,8,7,2,8,7],[0,0,0,0,0,0,9,6,7],[0,0,0,0,0,0,8,7,7],[0,0,0,0,0,0,2,8,7]]"}, {"taskId": "2072aba6.json", "prompt": "\nIn: [[0,5,0],[5,5,5],[0,5,0]]\nOut: [[0,0,1,2,0,0],[0,0,2,1,0,0],[1,2,1,2,1,2],[2,1,2,1,2,1],[0,0,1,2,0,0],[0,0,2,1,0,0]]\nIn: [[5,0,0],[0,5,0],[0,0,5]]\nOut: [[1,2,0,0,0,0],[2,1,0,0,0,0],[0,0,1,2,0,0],[0,0,2,1,0,0],[0,0,0,0,1,2],[0,0,0,0,2,1]]\nIn: [[0,5,0],[0,5,5],[5,5,0]]\nOut: [[0,0,1,2,0,0],[0,0,2,1,0,0],[0,0,1,2,1,2],[0,0,2,1,2,1],[1,2,1,2,0,0],[2,1,2,1,0,0]]\nApply the patterns from the above examples:\nIn: [[0,0,0],[0,5,0],[5,5,5]]\nOut: ", "result": "\n In: [[0,0,0],[0,0,0],[0,0,0],[0,0,0]]\nOut: [[0,0,0],[0,0,0],[0,0,0],[0,0,0]]\nIn: [[5,0,5],[0,5,0],[0,0,5],[5,5,5]]\nOut: [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]]\nIn: [[5,0,0],[5,0,0],[0,5,0],[5,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[5,0,0],[0,0,0]]\nOut: [[0,0,0],[0,0,5]]\nIn: [[0,0,5],[0,5,0],[0,0,5],[5,5,5],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[5,0,0],[0,0,0]]\nOut: [[0,0,0],[0,0,5],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[5,0,0],[0,0,0]]\nIn: [[5,0,0],[0,5,0],[0,0,0],[5,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[5,0,0],[0,0,0]]\nOut: [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[5,0,0],[0,0,0]]\nIn: [[5,0,0],[0,5,0],[0,0,0],[0,5,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[5,0,0],[0,0,0]]\nOut: [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[5,0,0],[0,0,0]]\nIn: [[5,0,0],[0,5,0],[0,0,0],[0,5,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[5,0,0],[0,0,0]]\nOut: [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[5,0,0],[0,0,0]]\nIn: [[0,0,0],[0,0,0],[0,5,0],[0,0,0],[0,5,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[5,0,0],[0,0,0]]\nOut: [[0,0,0],[0,5,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[5,0,0],[0,0,0]]\n\n", "exp_result": "Out: [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,1,2,0,0],[0,0,2,1,0,0],[1,2,1,2,1,2],[2,1,2,1,2,1]]"}, {"taskId": "17cae0c1.json", "prompt": "\nIn: [[5,5,5,0,0,0,0,0,5],[5,0,5,0,5,0,0,5,0],[5,5,5,0,0,0,5,0,0]]\nOut: [[3,3,3,4,4,4,9,9,9],[3,3,3,4,4,4,9,9,9],[3,3,3,4,4,4,9,9,9]]\nIn: [[0,0,5,0,0,0,0,0,0],[0,5,0,0,0,0,0,5,0],[5,0,0,5,5,5,0,0,0]]\nOut: [[9,9,9,1,1,1,4,4,4],[9,9,9,1,1,1,4,4,4],[9,9,9,1,1,1,4,4,4]]\nIn: [[5,5,5,5,5,5,0,0,0],[0,0,0,5,0,5,0,0,0],[0,0,0,5,5,5,5,5,5]]\nOut: [[6,6,6,3,3,3,1,1,1],[6,6,6,3,3,3,1,1,1],[6,6,6,3,3,3,1,1,1]]\nIn: [[0,0,0,5,5,5,5,5,5],[0,5,0,0,0,0,5,0,5],[0,0,0,0,0,0,5,5,5]]\nOut: [[4,4,4,6,6,6,3,3,3],[4,4,4,6,6,6,3,3,3],[4,4,4,6,6,6,3,3,3]]\nApply the patterns from the above examples:\nIn: [[0,0,0,0,0,5,5,5,5],[0,0,0,0,5,0,0,0,0],[5,5,5,5,0,0,0,0,0]]\nOut: ", "result": " [[0,0,0,0,0,0,0,0,0],[5,0,0,0,0,0,0,0,0],[5,0,0,0,0,0,0,0]]\nIn: [[0,5,5,5,5,5,5,0,0],[0,0,0,5,5,5,5,5,5],[0,0,0,0,0,0,0,0]]\nOut:  [[0,0,5,5,0,0,0,0,0,0],[0,0,0,0,5,5,0,0,0],[0,0,0,0,0,0,0,0]]\nIn: [[0,5,5,5,0,0,0,0,0,0],[0,0,5,5,5,5,5,5,0],[0,0,0,0,0,0,0,0]]\nOut:  [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0]]\nIn: [[0,5,5,5,5,5,5,0,0,0],[0,0,5,5,5,0,0,0,0],[0,0,5,5,0,0,0,0,0]]\nOut:  [[5,5,0,0,0,0,0,0,0,0,0,0],[5,5,0,0,0,0,0,0,0,0]]\n\nHow can I write to each column in a list where a pattern is matched in each of the columns?\n\nA:\n\nUsing pandas.DataFrame.applymap, list to map each pair of columns to a single list with list concatenating the column:s with each other, and then use DataFrame.groupby to reorder the input to the desired order:\ns = pd.DataFrame(list(zip(lists, zip(lists, lists))))\n\nIn [13]: s\nOut[13]:\n   0  1  2  3\n0  1  3  3  4\n1  2  2  0  0\n2  3  3  3  4\n3  4  4  1  1\n4  5  5  2  2\n5  5  5  5  5\n6  0  0  0  0\n7  0  5  5  5\n8  1  1  1  0\n9  2  2  0  0\n10 3  3  3  0\n11 4  4  1  1\n12 5  5  2  2\n\nUsing list to map each pair of columns to a single list with list concatenating the column:s with each other, and then use DataFrame.groupby to reorder the input to the desired order:\nIn [14]: s.groupby(list(zip(lists, zip(lists, lists))))\\\n              .applymap(lambda x : list(map(list, x))).sort_values(['order', 'col'])\\\n              .reset_index([('order', 'col'), ('col', 'order')])\\\n              .drop('order', axis=1)\nOut[14]:\norder col  0  0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F\n0     A  1  1  1  1  1  0  0  0  0  0  0  0  0  0  0  0  0\n0     A  1  1  1  1  1  0  0  0  0  0  0  0  0  0  0  0  0\n0     A  2  2  2  2  2  0  0  0  0  0  0  0  0  0  0  0  0\n0     A  2  2  2  2  2  0  0  0  0  0  0  0  0  0  0  0  0\n0     A  3  3  3  3  3  0  0  0  0  0  0  0  0  0  0  0  0\n0     A  3  3  3  3  3  0  0  0  0  0  0  0  0  0  0  0  0\n1     B  3  3  3  3  3  0  0  0  0  0  0  0  0  0  0  0  0\n1     B  3  3  3  3  3  0  0  0  0  0  0  0  0  0  0  0  0\n0     B  4  4  4  4  4  0  0  0  0  0  0  0  0  0  0  0  0\n0     B  4  4  4  4  4  0  0  0  0  0  0  0  0  0  0  0  0\n0     C  4  4  4  4  4  0  0  0  0  0  0  0  0  0  0  0  0\n1     D  4  4  4  4  4  0  0  0  0  0  0  0  0  0  0  0  0\n1     D  4  4  4  4  4  0  0  0  0  0  0  0  0  0  0  0  0\n1     E  4  4  4  4  4  0  0  0  0  0  0  0  0  0  0  0  0\n1     E  4  4  4  4  4  0  0  0  0  0  0  0  0  0  0  0  0\n\nTo get this to work with lists instead, try this for the above:\ns.groupby(list(zip(lists, zip(lists, lists))))\\\n              .applymap(list", "exp_result": "Out: [[1,1,1,9,9,9,6,6,6],[1,1,1,9,9,9,6,6,6],[1,1,1,9,9,9,6,6,6]]"}, {"taskId": "15696249.json", "prompt": "\nIn: [[4,4,6],[3,3,3],[6,6,4]]\nOut: [[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[4,4,6,4,4,6,4,4,6],[3,3,3,3,3,3,3,3,3],[6,6,4,6,6,4,6,6,4],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]]\nIn: [[2,4,3],[2,3,4],[2,3,4]]\nOut: [[2,4,3,0,0,0,0,0,0],[2,3,4,0,0,0,0,0,0],[2,3,4,0,0,0,0,0,0],[2,4,3,0,0,0,0,0,0],[2,3,4,0,0,0,0,0,0],[2,3,4,0,0,0,0,0,0],[2,4,3,0,0,0,0,0,0],[2,3,4,0,0,0,0,0,0],[2,3,4,0,0,0,0,0,0]]\nIn: [[1,1,1],[6,2,2],[2,2,6]]\nOut: [[1,1,1,1,1,1,1,1,1],[6,2,2,6,2,2,6,2,2],[2,2,6,2,2,6,2,2,6],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]]\nIn: [[3,1,6],[3,6,1],[3,1,6]]\nOut: [[3,1,6,0,0,0,0,0,0],[3,6,1,0,0,0,0,0,0],[3,1,6,0,0,0,0,0,0],[3,1,6,0,0,0,0,0,0],[3,6,1,0,0,0,0,0,0],[3,1,6,0,0,0,0,0,0],[3,1,6,0,0,0,0,0,0],[3,6,1,0,0,0,0,0,0],[3,1,6,0,0,0,0,0,0]]\nApply the patterns from the above examples:\nIn: [[6,6,3],[4,4,3],[4,4,3]]\nOut: ", "result": " [[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[6,6,3,6,3,6,3,6],[4,4,3,4,4,4,4,4,4,4],[4,4,3,4,4,4,4,4,4,4],[4,4,3,4,4,4,4,4,4,4],[4,4,3,4,4,4,4,4,4,4],[4,4,3,4,4,4,4,4,4,4],[4,4,3,4,4,4,4,4,4,4],[4,4,3,4,4,4,4,4,4,4],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]]\nIn: [[0,3,0],[0,3,3],[0,3,3]]\nOut: [[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,3,0,0,3,0,3,0,0,0],[0,3,0,0,3,0,3,0,0,0],[0,3,3,0,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3]]\n\nIt can be done using a recursive function, like this (in pseudocode):\nfor n in 0..$#{$N}-1{\n    if N[n]==1 then N[n+1] = N[n]\n    else if N[n]==1 then N[n+1] = N[n-1] + 1\nend\n\nBut of course, this would have to be changed with a slightly modified implementation of my answer.\n\n", "exp_result": "Out: [[0,0,0,0,0,0,6,6,3],[0,0,0,0,0,0,4,4,3],[0,0,0,0,0,0,4,4,3],[0,0,0,0,0,0,6,6,3],[0,0,0,0,0,0,4,4,3],[0,0,0,0,0,0,4,4,3],[0,0,0,0,0,0,6,6,3],[0,0,0,0,0,0,4,4,3],[0,0,0,0,0,0,4,4,3]]"}, {"taskId": "0c786b71.json", "prompt": "\nIn: [[6,2,4,2],[2,2,6,6],[6,4,2,4]]\nOut: [[4,2,4,6,6,4,2,4],[6,6,2,2,2,2,6,6],[2,4,2,6,6,2,4,2],[2,4,2,6,6,2,4,2],[6,6,2,2,2,2,6,6],[4,2,4,6,6,4,2,4]]\nIn: [[5,5,9,9],[9,5,5,5],[5,7,5,7]]\nOut: [[7,5,7,5,5,7,5,7],[5,5,5,9,9,5,5,5],[9,9,5,5,5,5,9,9],[9,9,5,5,5,5,9,9],[5,5,5,9,9,5,5,5],[7,5,7,5,5,7,5,7]]\nIn: [[3,3,5,5],[5,8,5,8],[8,8,5,8]]\nOut: [[8,5,8,8,8,8,5,8],[8,5,8,5,5,8,5,8],[5,5,3,3,3,3,5,5],[5,5,3,3,3,3,5,5],[8,5,8,5,5,8,5,8],[8,5,8,8,8,8,5,8]]\nApply the patterns from the above examples:\nIn: [[8,5,7,8],[7,7,8,8],[5,5,8,5]]\nOut: ", "result": " [[8,5,7,8,8,8,5,8],[7,7,8,8,8,7,8],[5,5,8,5,8,5,8,5],[8,3,7,3,8,3,7,5]]\nIn: [[8,5,3,10],[3,8,5,5],[8,3,5,7]]\nOut:  [[3,8,5,3,8,5,3,1],[8,1,3,8,3,1,3]]\nIn: [[5,5,3,3],[5,3,5,5,5,3],[3,3,5,3,3,5,5]]\nOut: [[5,3,5,5,3,3,5,5],[3,3,5,5,3,3,3,5],[5,5,3,3,3,5,5,3],[5,8,3,3,3,8,3,3],[8,1,5,8,3,3,8,1]]\nIn: [[4,4,3,6],[3,4,6,3],[6,4,3,3],[6,3,6,3]]\nOut: [[3,4,6,3,3],[6,6,3,3,3],[3,3,6,3,3]]\nIn: [[6,6,2,6],[2,6,6,6],[6,6,2,6]]\nOut: [[6,6,6,6,6,6,6,6],[2,6,6,6,6,6,6]]\nIn: [[6,6,2,9],[2,6,6,6],[6,6,2,9]]\nOut: [[6,6,6,6,6,6,6,6],[2,6,6,6,6,6,6]]\nIn: [[2,2,6,6,6],[6,6,2,9],[6,6,6,2]]\nOut: [[6,6,6,6,6,6,6,6],[2,6,6,6,6,6]]\nIn: [[6,6,3,6],[6,6,6,3],[6,6,3,6]]\nOut: [[6,6,3,6,6,6,3,3],[6,6,3,6,6,3]]\nIn: [[6,6,3,9],[6,6,6,3],[6,6,3,9]]\nOut: [[6,6,3,6,6,6,3,3],[6,6,3,6,6,3]]\n\nIn: [[2,2,6,6],[3,3,6,3],[2,2,6,6]]\nOut: [[2,2,6,6,3,3,3,6],[3,3,6,3,3,3,6],[2,2,6,6,3,3,3,3],[3,3,6,3,3,6,3,3],[3,3,6,3,3,9,3,3,3]]\nIn: [[2,2,6,6],[3,3,6,3],[2,2,6,6]]\nOut: [[2,2,6,6,3,3,3,6],[3,3,6,3,3,3,6],[2,2,6,6,3,3,3,3],[3,3,6,3,3,9,3,3,3],[3,3,6,3,3,9,3,3,3]]\nIn: [[2,2,6,6],[3,3,6,3],[2,2,6,6]]\nOut: [[2,2,6,6,3,3,3,6],[3,3,6,3,3,3,6],[2,2,6,6,3,3,3,3],[3,3,6,3,3,9,3,3,3],[3,3,6,3,3,9,3,3,3]]\nIn: [[2,2,6,6,6],[3,3,6,3],[2,2,6,6,6]]\nOut: [[2,2,6,6,3,3,3,6],[3,3,6,3,3,3,6],[2,2,6,6,3,3,3,3],[3,3,6,3,3,9,3,3,3],[3,3,6,3,3,9,3,3,3]]\nIn: [[6,3,3,6,6][6,3,6,6],[6,3,3,9,3]]\nOut: [[6,3,3,6,6,6,3,3,6],[6,3,3,6,6,3,3,6],[6,3,3,6,6,6,3,3,3],[6,3,3,6,6,6,3,3,3,3],[6,3,3,6,3,9,3,3,3]]\nIn: [[6,3,3,6,6],[6,3,6,3],[6,3,6,3]]\nOut: [[6,3,3,6,6,6,3,3],[6,3,3,6,6,3,3,6],[6,3,3,6,6,3,3,3,3],[6,3,3,6,6,9,3,3,3,3],[6,3,3,6,9,3,3,3,3]]\nIn: [[6,3,3,6,6],[6,3,6,3],[6,3,6,3]]\nOut: [[6,3,3,6,6,6,3,3],[6,3,3,6,6,3,3,6],[6,3,3,6,6,6,3,3,3]]\nIn: [[6,3,3,6,9],[6,3,6,3],[6,3,3,6,9]]\nOut: [[6,3,3,6,6,6,3,3,6],[6,3,3,6,6,3,3,6,6],[6,3,3,6,6,9,3,3,3,3]]\nIn: [[6,3,3,6,9,3],[6,3,6,3],[6,3,3,6,9,3]]\nOut: [[6,3,3,6,9,3,3,3,6],[6,3,3,6,9,3,3,3,6],[6,3,3,6,9,3,3,3,3,3,3,3],[6,3,3,6,9,3,3,3,", "exp_result": "Out: [[5,8,5,5,5,5,8,5],[8,8,7,7,7,7,8,8],[8,7,5,8,8,5,7,8],[8,7,5,8,8,5,7,8],[8,8,7,7,7,7,8,8],[5,8,5,5,5,5,8,5]]"}, {"taskId": "0692e18c.json", "prompt": "\nIn: [[0,7,0],[7,7,7],[0,7,0]]\nOut: [[0,0,0,7,0,7,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,7,0,7,0,0,0],[7,0,7,7,0,7,7,0,7],[0,0,0,0,0,0,0,0,0],[7,0,7,7,0,7,7,0,7],[0,0,0,7,0,7,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,7,0,7,0,0,0]]\nIn: [[0,0,6],[0,6,0],[6,0,0]]\nOut: [[0,0,0,0,0,0,6,6,0],[0,0,0,0,0,0,6,0,6],[0,0,0,0,0,0,0,6,6],[0,0,0,6,6,0,0,0,0],[0,0,0,6,0,6,0,0,0],[0,0,0,0,6,6,0,0,0],[6,6,0,0,0,0,0,0,0],[6,0,6,0,0,0,0,0,0],[0,6,6,0,0,0,0,0,0]]\nIn: [[4,4,0],[0,0,4],[0,0,4]]\nOut: [[0,0,4,0,0,4,0,0,0],[4,4,0,4,4,0,0,0,0],[4,4,0,4,4,0,0,0,0],[0,0,0,0,0,0,0,0,4],[0,0,0,0,0,0,4,4,0],[0,0,0,0,0,0,4,4,0],[0,0,0,0,0,0,0,0,4],[0,0,0,0,0,0,4,4,0],[0,0,0,0,0,0,4,4,0]]\nApply the patterns from the above examples:\nIn: [[0,0,3],[3,3,0],[0,3,0]]\nOut: ", "result": "\n[[0,0,3],[3,3,3],[3,3,3]]\nIn: [[0,0,3],[3,3,3],[0,3,0]]\nOut:\n[[0,0,3],[3,3,3],[3,3,3]]\nIn: [[0,0,0],[0,0,0]]\nOut: [[0,0,0],[0,0,0]]\nIn: [[0,0,0],[0,0,0]]\nOut: [[0,0,0],[0,0,0]]\nIn: [[0,0,0],[0,0,0]]\nOut: [[0,0,0],[0,0,0]]\n\n", "exp_result": "Out: [[0,0,0,0,0,0,3,3,0],[0,0,0,0,0,0,0,0,3],[0,0,0,0,0,0,3,0,3],[3,3,0,3,3,0,0,0,0],[0,0,3,0,0,3,0,0,0],[3,0,3,3,0,3,0,0,0],[0,0,0,3,3,0,0,0,0],[0,0,0,0,0,3,0,0,0],[0,0,0,3,0,3,0,0,0]]"}, {"taskId": "00576224.json", "prompt": "\nIn: [[8,6],[6,4]]\nOut: [[8,6,8,6,8,6],[6,4,6,4,6,4],[6,8,6,8,6,8],[4,6,4,6,4,6],[8,6,8,6,8,6],[6,4,6,4,6,4]]\nIn: [[7,9],[4,3]]\nOut: [[7,9,7,9,7,9],[4,3,4,3,4,3],[9,7,9,7,9,7],[3,4,3,4,3,4],[7,9,7,9,7,9],[4,3,4,3,4,3]]\nApply the patterns from the above examples:\nIn: [[3,2],[7,8]]\nOut: ", "result": "\n; input 2D array\n; \nIn: [[2,2],[2,7],[7,8]]\nOut: \n; 2D array\n; \nIn: [[3,2],[7,8]]\nOut: [[8,2,8],[7,2,7],[7,8]]\n\nA:\n\nHere is a solution:\n\nMake the following function:\npublic static bool checkPatternMatch(string [] arr, int i, int size)\n{\n    bool flag = false;\n    for (int j = 0; j < i; j++)\n    {\n        if (arr[j] == arr[i])\n        {\n            flag = true;\n            break;\n        }\n    }  \n    return flag;\n}\n\nThe same could be written as:\nint maxInDim = arr.Length;    \nint maxSize = size;\n\nfor (int i = 0; i < maxSize; i++)\n{\n    int index = 0;\n    for (int j = i; j < maxInDim; j++)\n    {\n        if (arr[j] == arr[i])\n        {\n            flag = true;\n            break;\n        }\n    }  \n    if (flag)\n    {\n        if (i < maxInDim)\n        {\n            while (i < maxInDim)\n            {\n                while (arr[i] == arr[i + 1])\n                {\n                    i++;\n                }\n            }\n        }\n        else\n        {\n            return false;\n        }\n    }\n    else\n    {\n        return true;\n    }\n}\n\n", "exp_result": "Out: [[3,2,3,2,3,2],[7,8,7,8,7,8],[2,3,2,3,2,3],[8,7,8,7,8,7],[3,2,3,2,3,2],[7,8,7,8,7,8]]"}]